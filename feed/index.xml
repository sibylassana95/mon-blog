<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>SIBY INFORMATIQUE</title>
	<atom:link href="https://sibylassana95.github.io/mon-blog/feed/" rel="self" type="application/rss+xml" />
	<link>https://sibylassana95.github.io/mon-blog</link>
	<description>Astuce - Cours - Actualité</description>
	<lastBuildDate>Wed, 22 Jun 2022 17:39:40 +0000</lastBuildDate>
	<language>fr-FR</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.0</generator>
	<item>
		<title>Récupérer la valeur sélectionné d’un JComboBox – Java</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/22/recuperer-la-valeur-selectionne-dun-jcombobox-java/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Wed, 22 Jun 2022 17:39:40 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=776</guid>

					<description><![CDATA[JComboBox fait partie du package Java Swing. JComboBox hérite de la classe JComponent. JComboBox affiche un menu contextuel sous forme d’une liste, qui permet à l’utilisateur de sélectionner une option dans cette liste spécifiée. JComboBox peut générer une interface ActionListener lorsque l’utilisateur sélectionne une option. Lors de la sélection d’une option, la méthode actionPerformed() de&#8230;]]></description>
										<content:encoded><![CDATA[
<p>JComboBox fait partie du package Java Swing. JComboBox hérite de la classe JComponent. JComboBox affiche un menu contextuel sous forme d’une liste, qui permet à l’utilisateur de sélectionner une option dans cette liste spécifiée.</p>



<p>JComboBox peut générer une interface ActionListener lorsque l’utilisateur sélectionne une option. Lors de la sélection d’une option, la méthode actionPerformed() de l’interface ActionListener est appelée et récupérera la valeur sélectionné du JComboBox à l’aide de la méthode getSelectedItem() de la classe JComboBox.</p>



<div class="wp-block-cover is-light"><span aria-hidden="true" class="wp-block-cover__background has-background-dim"></span><div class="wp-block-cover__inner-container">
<div class="wp-container-1 wp-block-group"><div class="wp-block-group__inner-container">
<pre class="wp-block-preformatted">import javax.swing.*;
import java.awt.*;
import java.awt.event.*;  

public class Main extends JFrame
{
 public static void main(String[] argv)
 {  
   JFrame frame = new JFrame("frame"); 
   frame.setLayout(new FlowLayout()); 
  
   String[] items = { "item1", "item2", "item3" };
   JComboBox cb = new JComboBox(items);

   cb.addActionListener(new ActionListener() {     
     @Override
     public void actionPerformed(ActionEvent e) {
        System.out.println("Valeur: " + cb.getSelectedItem().toString());      
     }
   });
  
   frame.add(cb); 
   frame.setSize(250, 250); 
   frame.show();
 }
}</pre>
</div></div>
</div></div>



<figure class="wp-block-image size-large"><img src="https://1.bp.blogspot.com/-z5KT9zATk24/XsvrSJscBpI/AAAAAAAAJBE/T95g1kcsx7Uya5XkhLUvzYe5UnyLsZ1LQCNcBGAsYHQ/s1600/R%25C3%25A9cup%25C3%25A9rer-la-valeur-s%25C3%25A9lectionn%25C3%25A9-dun-JComboBox.gif" alt=""/></figure>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Récupérer la valeur d’un JRadioButton – Swing Java</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/22/recuperer-la-valeur-dun-jradiobutton-swing-java/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Wed, 22 Jun 2022 17:38:16 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=774</guid>

					<description><![CDATA[Nous utilisons la classe JRadioButton pour créer un bouton radio. Le bouton radio est utilisé pour sélectionner une option parmi plusieurs options. Il est utilisé pour remplir des formulaires, des documents en ligne et des QCMs. Nous ajoutons des boutons radio dans un groupe afin de pouvoir sélectionner un seul bouton radio à la fois.&#8230;]]></description>
										<content:encoded><![CDATA[
<p>Nous utilisons la classe JRadioButton pour créer un bouton radio. Le bouton radio est utilisé pour sélectionner une option parmi plusieurs options. Il est utilisé pour remplir des formulaires, des documents en ligne et des QCMs.</p>



<p>Nous ajoutons des boutons radio dans un groupe afin de pouvoir sélectionner un seul bouton radio à la fois. Nous utilisons la classe « ButtonGroup » pour créer un groupe de boutons et ajouter un bouton radio dans un groupe.</p>



<p>JRadioButton peut générer une interface ActionListener. Lorsque nous cliquons sur le bouton radio, la méthode actionPerformed() est appelée.</p>



<p>Utilisez ButtonGroup.getSelection().getActionCommand() pour obtenir la valeur sélectionné par l’utilisateur.</p>



<p>Dans ce tutoriel nous allons découvrir comment récupérer la valeur d’un JRadioButton en Java.</p>



<div class="wp-block-cover is-light"><span aria-hidden="true" class="wp-block-cover__background has-background-dim"></span><div class="wp-block-cover__inner-container">
<div class="wp-container-2 wp-block-group"><div class="wp-block-group__inner-container">
<pre class="wp-block-preformatted">import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
 
public class RadioButtonValue extends JFrame implements ActionListener 
{  
   private ButtonGroup group;

   private static void init() 
   {
      //créer un frame
      JFrame frame = new RadioButtonValue();
 
      //Affichez le frame.
      frame.pack();
      frame.setVisible(true);
      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
   }
 
   public static void main(String[] args) {
      //créer et afficher l'interface graphique
      javax.swing.SwingUtilities.invokeLater(new Runnable() {
         public void run() {
            init();
         }
      });
   }
   
   public RadioButtonValue() 
   {
      // définir la disposition du flux pour le frame
      this.getContentPane().setLayout(new FlowLayout());
 
      JRadioButton bleu = new JRadioButton("Bleu");
      bleu.setActionCommand("Bleu");
 
      JRadioButton rouge = new JRadioButton("Rouge");
      rouge.setActionCommand("Rouge");
 
      JRadioButton vert = new JRadioButton("Vert");
      vert.setActionCommand("Vert");
    
      bleu.setSelected(true);
    
      JButton btn = new JButton("Cliquez ici");
      btn.addActionListener(this);
      group = new ButtonGroup();
 
      //ajouter des boutons radio
      group.add(bleu);
      group.add(rouge);
      group.add(vert);
 
      add(bleu);
      add(rouge);
      add(vert);
      add(btn);
   }
 
   @Override
   public void actionPerformed(ActionEvent e) {
      if (e.getActionCommand().equals("Cliquez ici")) {
         System.out.println("Le radio bouton sélectionné est: " + 
                  group.getSelection().getActionCommand());
      }
   }
}</pre>
</div></div>
</div></div>



<figure class="wp-block-image size-large"><img src="https://1.bp.blogspot.com/-zJ6cYMeFT5k/Xs0j01mIEjI/AAAAAAAAJBk/p9a2wUc58XggZ_32KrdWpSqEVLYjssSOQCNcBGAsYHQ/s1600/r%25C3%25A9cup%25C3%25A9rer-la-valeur-JRadioButton-swing-java.gif" alt=""/></figure>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Afficher une image dans un JFrame , dans une interface et en arrière-plan</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/22/afficher-une-image-dans-un-jframe-dans-une-interface-et-en-arriere-plan/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Wed, 22 Jun 2022 17:36:31 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=772</guid>

					<description><![CDATA[Dans ce tutoriel nous allons découvrir comment afficher une image dans un JFrame. Si vous utilisez JFrame, vous travaillez probablement avec Swing. Dans l’exemple suivant nous avons utiliser cette image, vous pouvez la télécharger dans votre projet. Exemple: Ajouter une image dans une interface java Comment afficher une image en arrière-plan d’un composant Swing? En&#8230;]]></description>
										<content:encoded><![CDATA[
<p>Dans ce tutoriel nous allons découvrir comment afficher une image dans un JFrame. Si vous utilisez JFrame, vous travaillez probablement avec Swing.</p>



<p>Dans l’exemple suivant nous avons utiliser cette image, vous pouvez la télécharger dans votre projet.</p>



<p>Exemple:</p>



<div class="wp-block-cover is-light"><span aria-hidden="true" class="wp-block-cover__background has-background-dim"></span><div class="wp-block-cover__inner-container">
<div class="wp-container-3 wp-block-group"><div class="wp-block-group__inner-container">
<pre class="wp-block-preformatted">import javax.swing.*;

public class ImageJFrame
{
  ImageJFrame() 
  {
    JFrame f = new JFrame("Ajouter une image dans JFrame");
    ImageIcon icon = new ImageIcon("test.png");
    f.add(new JLabel(icon));
    f.pack();
    f.setVisible(true);
  }
  public static void main(String args[]) 
  {
    new ImageJFrame();
  }
}</pre>
</div></div>
</div></div>



<figure class="wp-block-image size-large"><img src="https://1.bp.blogspot.com/-NdfWD8_5yRI/XsSy0Eaj82I/AAAAAAAAI6g/YXI-TlNbat8bZKmJ-4nvwIJQ7Dc2niGWwCNcBGAsYHQ/s1600/out.png" alt=""/></figure>



<h2>Ajouter une image dans une interface java</h2>



<div class="wp-block-cover is-light"><span aria-hidden="true" class="wp-block-cover__background has-background-dim"></span><div class="wp-block-cover__inner-container">
<div class="wp-container-4 wp-block-group"><div class="wp-block-group__inner-container">
<pre class="wp-block-preformatted">import java.awt.*;
import javax.swing.*;
import java.io.*;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;


public class ImagePanel 
{
 ImagePanel() 
 {
  try 
  {
   JFrame f = new JFrame("Ajouter une image dans JPanel");
   JPanel panel = new JPanel();
   panel.setBounds(50, 50, 250, 250);

   BufferedImage img = ImageIO.read(new File("test.png"));
   JLabel pic = new JLabel(new ImageIcon(img));
   panel.add(pic);

   f.add(panel);
   f.setSize(400, 400);
   f.setLayout(null);
   f.setVisible(true);
  } 
  catch (IOException e) {}
 }
 public static void main(String args[]) 
 {
  new ImagePanel();
 }
}</pre>
</div></div>
</div></div>



<figure class="wp-block-image size-large"><img src="https://1.bp.blogspot.com/-RJ4roDZtGiY/Xq6uOmKaoAI/AAAAAAAAIqA/qOV3sMdvnH8CsTq8sdVnQybX1ynZi6wcQCNcBGAsYHQ/s1600/out.png" alt=""/></figure>



<h2>Comment afficher une image en arrière-plan d’un composant Swing?</h2>



<p>En effet il n’existe pas de concept « Image en arrière-plan » dans un JPanel, il faudrait écrire sa propre façon de mettre en œuvre une telle fonctionnalité.</p>



<p>Une façon d’y parvenir consiste à redéfinir la méthode paintComponent() pour dessiner une image d’arrière-plan à chaque fois que le JPanel est actualisé.</p>



<p>Vous devrez définir le comportement du composant, vous assurer qu’il n’est pas opaque et redéfinir la méthode paintComponent() de sorte que l’image soit dessinée avant l’appel de la méthode paintComponent() de la superclasse.</p>



<p>Dans l’exemple suivant nous avons utiliser cette image, vous pouvez la télécharger dans votre projet.</p>



<p>Exemple:</p>



<div class="wp-block-cover is-light" style="min-height:902px"><span aria-hidden="true" class="wp-block-cover__background has-background-dim"></span><div class="wp-block-cover__inner-container">
<div class="wp-container-5 wp-block-group"><div class="wp-block-group__inner-container">
<pre class="wp-block-preformatted">import javax.swing.*;
import java.awt.*;

public class ImageBackground 
{
  public static void main(String args[]) 
  {
    JFrame frame = new JFrame("Afficher une image en arrière-plan");
    final ImageIcon icon = new ImageIcon("background.png");
    JTextArea text = new JTextArea() 
    {
      Image img = icon.getImage();
      // initialiseur d'instance
      {setOpaque(false);}
      public void paintComponent(Graphics graphics) 
      {
        graphics.drawImage(img, 0, 0, this);
        super.paintComponent(graphics);
      }
    };
    JScrollPane pane = new JScrollPane(text);
    Container content = frame.getContentPane();
    content.add(pane, BorderLayout.CENTER);
    frame.setDefaultCloseOperation(3);
    frame.setSize(400, 300);
    frame.setVisible(true);
  }
}</pre>
</div></div>
</div></div>



<figure class="wp-block-image size-large"><img src="https://1.bp.blogspot.com/-YSCDbk5NkGw/Xq1j7kdXqQI/AAAAAAAAIpc/wGdYMOoE6WIevfhOHDri159jBkl_U8kjQCNcBGAsYHQ/s1600/out.png" alt=""/></figure>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Comment afficher des données dans JTable?</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/22/comment-afficher-des-donnees-dans-jtable/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Wed, 22 Jun 2022 17:31:36 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=770</guid>

					<description><![CDATA[Dans ce tutoriel nous allons découvrir comment afficher des données dans JTable. Le composant JTable fourni dans l’API Swing de Java est utilisé pour afficher / modifier des données bidimensionnelles. Ceci est équivalent à une feuille de calcul. JTable fournit des fonctionnalités riches pour gérer l’apparence et le comportement du composant de JTable. JTable hérite&#8230;]]></description>
										<content:encoded><![CDATA[
<p><strong>D</strong>ans ce tutoriel nous allons découvrir comment afficher des données dans JTable. Le composant JTable fourni dans l’API Swing de Java est utilisé pour afficher / modifier des données bidimensionnelles. Ceci est équivalent à une feuille de calcul.</p>



<p>JTable fournit des fonctionnalités riches pour gérer l’apparence et le comportement du composant de JTable. JTable hérite directement de JComponent et implémente plusieurs interfaces listener telles que TableModelListener, TableColumnModelListener, ListSelectionListener… etc.</p>



<span id="more-770"></span>



<p>Chaque JTable a trois modèles <strong>TableModel</strong>, <strong>TableColumnModel</strong> et <strong>ListSelectionModel</strong>.</p>



<ul><li><strong>TableModel</strong>&nbsp;est utilisé pour spécifier la façon dont les données de la table sont stockées et la récupération de ces données. Les données de JTable sont souvent dans une structure à deux dimensions, comme un tableau à deux dimensions ou un vecteur de vecteurs. TableModel est également utilisé pour spécifier comment les données peuvent être modifiables dans le tableau.</li><li><strong>TableColumnModel</strong>&nbsp;est utilisé pour gérer tous les TableColumn en termes de sélection de colonne, l’ordre des colonnes et la taille de la marge.</li><li><strong>ListSelectionModel</strong>&nbsp;permet à la table d’avoir différents modes de sélection tels que des sélections par intervalle et intervalle multiple.</li></ul>



<p>&nbsp;<br>Nous pouvons créer un JTable en utilisant ses constructeurs comme suit:</p>



<figure class="wp-block-table"><table><thead><tr><th>Constructeurs JTable</th><th>Description</th></tr></thead><tbody><tr><td><strong>JTable()</strong></td><td>Créer une table vide</td></tr><tr><td><strong>JTable(int rows, int columns)</strong></td><td>Créez une table avec des cellules et des lignes vides.</td></tr><tr><td><strong>JTable(Object[][] data, Object[] heading)</strong></td><td>Créer une table avec des données spécifiées dans un tableau à deux dimensions et un tableau d’en-tête.</td></tr><tr><td><strong>JTable(TableModel dm)</strong></td><td>Créer une table avec un TableModel donné.</td></tr><tr><td><strong>JTable(TableModel dm, TableColumnModel cm)</strong></td><td>Créez une table avec un TableModel et TableColumnModel donnés.</td></tr><tr><td><strong>JTable(TableModel dm,TableColumnModel cm, ListSelectionModel sm)</strong></td><td>Créez une table avec un TableModel, TableColumnModel et ListSelectionModel donné.</td></tr><tr><td><strong>JTable(Vector data, Vector heading)</strong></td><td>Créez une table avec des données du vecteur et un vecteur d’en-têtes.</td></tr></tbody></table></figure>



<p>Exemple:<br>Prenons quelques exemples. Supposons que vous souhaitiez afficher une liste des employés appartenant à une organisation. Cela devrait afficher les différents attributs des employés. Par exemple, l’ID de l’employé, le nom, l’adresse, le taux horaire, etc. L’affichage ressemblera davantage à une table de base de données affichant des lignes et des colonnes. Dans ce cas, l’id, le nom, l’adresse, le taux horaire sont des colonnes. Le nombre de lignes peut différer en fonction du nombre d’employés dans l’organisation.</p>



<p>Regardons comment afficher de telles données avec JTable avec un minimum de code. L’idée est d’afficher uniquement les détails dans le tableau. L’utilisateur ne doit pas être autorisé à modifier des données.</p>



<div class="wp-block-cover is-light"><span aria-hidden="true" class="wp-block-cover__background has-background-dim"></span><div class="wp-block-cover__inner-container">
<div class="wp-container-6 wp-block-group"><div class="wp-block-group__inner-container">
<pre class="wp-block-preformatted">import javax.swing.*;
import java.awt.*;
 
public class Main {
 
    public static void main(String[] args) {
        //crée un frame
        final JFrame frame = new JFrame("Exemple de JTable");
 
        //En-têtes pour JTable 
        String[] columns = new String[] {
            "Id", "Nom", "Adresse", "Taux horaire", "A temps partiel"
        };
         
        //données pour JTable dans un tableau 2D
        Object[][] data = new Object[][] {
            {1, "Thomas", "Paris", 20.0, true },
            {2, "Jean", "Marseille", 50.0, false },
            {3, "Yohan", "Lyon", 30.0, true },
            {4, "Emily", "Toulouse", 60.0, false },
            {5, "Alex", "Nice", 10.0, false },
        };
 
        //crée un JTable avec des données
        JTable table = new JTable(data, columns);
    
        JScrollPane scroll = new JScrollPane(table);
        table.setFillsViewportHeight(true);
 
        JLabel labelHead = new JLabel("Liste des employes");
        labelHead.setFont(new Font("Arial",Font.TRUETYPE_FONT,20));
 
        frame.getContentPane().add(labelHead,BorderLayout.PAGE_START);
        //ajouter la table au frame
        frame.getContentPane().add(scroll,BorderLayout.CENTER);
 
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(500, 200);
        frame.setVisible(true);
    }
}</pre>
</div></div>
</div></div>



<figure class="wp-block-image size-large"><img src="https://1.bp.blogspot.com/-zVazsKsFg8Y/XsKLM-MaAzI/AAAAAAAAI34/fnPnW5LPAzw62W878uwGd3snK8wSxWO8ACNcBGAsYHQ/s1600/out.png" alt=""/></figure>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Comment changer l’icône d’une JFrame – AWT/Swing Java</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/22/comment-changer-licone-dune-jframe-awt-swing-java/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Wed, 22 Jun 2022 17:28:48 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=767</guid>

					<description><![CDATA[La méthode&#160;setIconImage()&#160;de la classe JFrame est utilisée pour changer l’icône de JFrame ou JWindow. Il change l’icône qui s’affiche sur le côté gauche de la fenêtre. La classe Toolkit est utilisée pour obtenir une instance de la classe Image dans AWT et Swing. La classe Toolkit est la super classe abstraite de chaque implémentation dans&#8230;]]></description>
										<content:encoded><![CDATA[
<p><strong>L</strong>a méthode&nbsp;<strong>setIconImage()</strong>&nbsp;de la classe JFrame est utilisée pour changer l’icône de JFrame ou JWindow. Il change l’icône qui s’affiche sur le côté gauche de la fenêtre.</p>



<p>La classe Toolkit est utilisée pour obtenir une instance de la classe Image dans AWT et Swing.</p>



<p>La classe Toolkit est la super classe abstraite de chaque implémentation dans le Abstract Window Toolkit (AWT). Des sous-classes de Toolkit sont utilisées pour lier divers composants.<br>Exemple:</p>



<span id="more-767"></span>



<div class="wp-block-cover is-light"><span aria-hidden="true" class="wp-block-cover__background has-background-dim"></span><div class="wp-block-cover__inner-container">
<div class="wp-container-10 wp-block-group"><div class="wp-block-group__inner-container">
<div class="wp-container-9 wp-block-columns">
<div class="wp-container-8 wp-block-column" style="flex-basis:100%">
<div class="wp-container-7 wp-block-group"><div class="wp-block-group__inner-container">
<pre class="wp-block-preformatted">import javax.swing.*;  
import java.awt.*;  

class MyIcon 
{   
  MyIcon()
  {
    JFrame frame = new JFrame();
    Image icon = Toolkit.getDefaultToolkit().getImage("test.png");  
    frame.setIconImage(icon);  
    frame.setLayout(null);   
    frame.setSize(200,200);   
    frame.setVisible(true);   
  }   
  public static void main(String args[]){   
    new MyIcon();   
  }   
}</pre>
</div></div>
</div>
</div>
</div></div>
</div></div>



<p><strong>Sortie:</strong></p>



<figure class="wp-block-image size-large"><img src="https://1.bp.blogspot.com/-0z__JE0SagM/XsFOHoh40XI/AAAAAAAAI24/DanesH7y7i4OKNInp1CE-lyTv3_hs-lKQCNcBGAsYHQ/s1600/out.png" alt=""/></figure>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>ActionListener Java JButton</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/22/actionlistener-java-jbutton/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Wed, 22 Jun 2022 17:26:59 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=765</guid>

					<description><![CDATA[Java ActionListener est notifie à chaque fois que vous cliquez sur le bouton. Il est notifié contre ActionEvent. L’interface ActionListener se trouve dans le package java.awt.event. Il n’a qu’une seule méthode actionPerformed(). La méthode actionPerformed() est invoquée automatiquement chaque fois que vous cliquez sur le bouton. Comment écrire ActionListener L’approche consiste à implémenter l’interface ActionListener. Si vous implémentez l’interface ActionListener, vous devez suivre&#8230;]]></description>
										<content:encoded><![CDATA[
<p><strong>J</strong>ava ActionListener est notifie à chaque fois que vous cliquez sur le bouton. Il est notifié contre ActionEvent. L’interface <strong>ActionListener</strong> se trouve dans le package <strong>java.awt.event</strong>. Il n’a qu’une seule méthode <strong>actionPerformed()</strong>. La méthode <strong>actionPerformed()</strong> est invoquée automatiquement chaque fois que vous cliquez sur le bouton.</p>



<figure class="wp-block-image size-large"><img src="https://1.bp.blogspot.com/-M3soRSfzPQU/XskHrZOxaJI/AAAAAAAAI9A/V34shRjMDRANxCtKiavcUJ3l20E6M9UaACNcBGAsYHQ/s1600/action-button.gif" alt=""/></figure>



<h6>Comment écrire ActionListener</h6>



<p>L’approche consiste à implémenter l’interface <strong>ActionListener</strong>. Si vous implémentez l’interface <strong>ActionListener</strong>, vous devez suivre 3 étapes:</p>



<div class="wp-block-cover is-light"><span aria-hidden="true" class="wp-block-cover__background has-background-dim"></span><div class="wp-block-cover__inner-container">
<div class="wp-container-11 wp-block-group"><div class="wp-block-group__inner-container">
<pre class="wp-block-preformatted">import javax.swing.*;
import javax.swing.event.*;
import java.awt.event.*;

//1ère étape
public class MyJButtonActionListener implements ActionListener
{
  private static JTextField text;
  
  public static void main(String[] args) 
  {
    JFrame frame = new JFrame("Exemple ActionListener");
    text = new JTextField();
    text.setBounds(45,50,150,20);
    JButton btn = new JButton("Cliquez ici");
    btn.setBounds(70,100,100,30);
    MyJButtonActionListener instance = new MyJButtonActionListener();
    //2ème étape
    btn.addActionListener(instance);
    frame.add(btn);
    frame.add(text);
    frame.setSize(250,250);
    frame.setLayout(null);
    frame.setVisible(true);  
  }

  //3ème étape
  public void actionPerformed(ActionEvent e){
    text.setText("Welcome to WayToLearnX");
  }
}</pre>
</div></div>
</div></div>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>JPasswordField &#124; Java Swing</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/22/jpasswordfield-java-swing/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Wed, 22 Jun 2022 17:24:27 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=763</guid>

					<description><![CDATA[PasswordField fait partie du package javax.swing. La classe JPasswordField est un composant texte spécialisé pour la saisie de mot de passe. Il permet l’édition d’une seule ligne de texte. JPasswordField hérite de la classe JTextField dans le package javax.swing. Les constructeurs de la classe JPasswordField sont:Constructeurs de JPasswordFieldDescriptionJPasswordField() Constructeur qui crée un nouveau champ Password.JPasswordField(int&#8230;]]></description>
										<content:encoded><![CDATA[
<p>PasswordField fait partie du package javax.swing. La classe JPasswordField est un composant texte spécialisé pour la saisie de mot de passe. Il permet l’édition d’une seule ligne de texte. JPasswordField hérite de la classe JTextField dans le package javax.swing.</p>



<p>Les constructeurs de la classe JPasswordField sont:<br>Constructeurs de JPasswordField<br>Description<br>JPasswordField() Constructeur qui crée un nouveau champ Password.<br>JPasswordField(int n) Constructeur qui crée un nouveau champ Password vide avec un nombre spécifié de colonnes.<br>JPasswordField(String Password) Constructeur qui crée un nouveau champ Password vide initialisé avec la chaîne donnée.<br>JPasswordField(String Password, int n) Constructeur qui crée un nouveau champ Password vide avec la chaîne donnée et un nombre spécifié de colonnes.<br>JPasswordField(Document d, String Password, int n) Constructeur qui crée un champ Password qui utilise le modèle de stockage de texte donné et le nombre de colonnes donné.</p>



<span id="more-763"></span>



<p>Les méthodes couramment utilisées sont:<br>getPassword(): renvoie le texte contenu dans JPasswordField.<br>getText(): retourne le texte contenu dans JPasswordField.<br>getEchoChar(): retourne le caractère utilisé pour Echo dans JPasswordField.<br>setEchoChar(char c): définissez le caractère Echo pour JPasswordField.</p>



<p>Exemple:</p>



<div class="wp-block-cover is-light"><span aria-hidden="true" class="wp-block-cover__background has-background-dim"></span><div class="wp-block-cover__inner-container">
<div class="wp-container-12 wp-block-group"><div class="wp-block-group__inner-container">
<pre class="wp-block-preformatted">import javax.swing.*;  
import java.awt.event.*;

public class Main
{
  public static void main(String[] args) 
  {  
    JFrame frame = new JFrame();  
    
    final JPasswordField password = new JPasswordField(); 
    password.setBounds(120, 70, 150, 30); 
    
    JLabel label1 = new JLabel("Nom utilisateur:");  
    label1.setBounds(15, 20, 100, 30);  
    
    JLabel label2 = new JLabel("Mot de passe:");  
    label2.setBounds(15, 70, 100, 30);  
    
    JButton btn = new JButton("Se connecter");
    btn.setBounds(100, 130, 110, 30);  
    
    final JTextField tf = new JTextField();
    tf.setBounds(120, 20, 150, 30); 
    
    frame.add(password); 
    frame.add(label1); 
    frame.add(label2); 
    frame.add(btn); 
    frame.add(tf);
        
    frame.setSize(300,230);  
    frame.setLayout(null);  
    frame.setVisible(true);   
    
    btn.addActionListener(new ActionListener()
    {
      public void actionPerformed(ActionEvent e) 
      {
        System.out.println("Nom utilisateur : "+ tf.getText());
        System.out.println("Mot de passe: "+ new String(password.getPassword()));    
      }
    });
  }
}</pre>
</div></div>
</div></div>



<p><strong>Sortie:</strong></p>



<figure class="wp-block-image size-large"><img src="https://1.bp.blogspot.com/-tl6oQ4bqzU8/XrcDMtoKs2I/AAAAAAAAIwo/ybrwO4UkC8wqsdkSGCCrI-EW2_gsCxLmQCNcBGAsYHQ/s1600/out.png" alt=""/></figure>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Différence entre JFrame et JPanel</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/22/difference-entre-jframe-et-jpanel/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Wed, 22 Jun 2022 17:21:22 +0000</pubDate>
				<category><![CDATA[Word]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=759</guid>

					<description><![CDATA[JPanel&#160;et&#160;JFrame&#160;sont des classes du langage de programmation Java. Elles ressemblent à des fenêtres lorsqu’elles sont « exécutées », mais ont des utilisations ou des objectifs différents.&#160;&#160; Différence principale entre JFrame et JPanel On peut ajouter un JPanel dans un JFrame, mais pas l’inverse. Une interface graphique Swing ne peut pas exister sans un conteneur de&#8230;]]></description>
										<content:encoded><![CDATA[
<p><strong>J</strong><strong>Panel</strong>&nbsp;et&nbsp;<strong>JFrame</strong>&nbsp;sont des classes du langage de programmation Java. Elles ressemblent à des fenêtres lorsqu’elles sont « exécutées », mais ont des utilisations ou des objectifs différents.<br>&nbsp;<br>&nbsp;<br><img src="https://1.bp.blogspot.com/-9jlMvT3ZwCk/XrK8-PMdk7I/AAAAAAAAItI/qa6QDWaGYTk3Fb4U-qfnnB-euuyRFwy4wCNcBGAsYHQ/s1600/jframe-jpanel.png"></p>



<span id="more-759"></span>



<h6>Différence principale entre JFrame et JPanel</h6>



<ul><li>On peut ajouter un JPanel dans un JFrame, mais pas l’inverse.</li><li>Une interface graphique Swing ne peut pas exister sans un conteneur de niveau supérieur comme (JWindow, JFrame ou Applet), alors qu’elle peut exister sans JPanel.</li></ul>



<h3>JPanel</h3>



<p><strong>JPanel</strong>&nbsp;sert en fait de conteneur à usage général. C’est là que des opérations plus complexes ou plus importantes sont généralement mises en place. Vous pouvez placer de nombreuses opérations dans un même panneau.</p>



<p><strong>JPanel</strong>&nbsp;est une sous-classe de JComponent, et JComponent est une sous-classe de Container, par conséquent,&nbsp;<strong>JPanel</strong>&nbsp;est également un conteneur. Il y a tellement de méthodes qui peuvent être utilisées pour&nbsp;<strong>JPanel</strong>, qu’il a héritées de ses super classes. L’accessibilité, les alignements, etc. sont quelques exemples. Dans&nbsp;<strong>JPanel</strong>, vous pouvez également mettre des champs, des labels, des boutons, des cases à cocher et même des images, et de nombreuses autres fonctions. Il représente simplement une zone où vous pouvez mettre&nbsp;<a href="https://waytolearnx.com/2020/05/creation-interface-graphique-avec-swing-les-bases.html">des composant de Swing (Jlabel, JTable, JButton, JMenu, etc.)</a>.<br>&nbsp;<br>&nbsp;<br>En programmation Java, pour créer un panneau, vous devez appeler un constructeur&nbsp;<strong>JPanel()</strong>&nbsp;(cela crée un panneau vide). Il est opaque par défaut, mais vous pouvez changer sa couleur d’arrière-plan. Vous pouvez également personnaliser ses composants à l’aide d’un gestionnaire de disposition. Les gestionnaires de disposition tels que la disposition de flux, la disposition de grille, la disposition de bordure, etc., vous aident à contrôler les tailles, les positions et l’alignement de vos composants dans&nbsp;<strong>JPanel</strong>. Les couleurs des composants peuvent également être personnalisées à l’aide des constructeurs&nbsp;<strong>setColor()</strong>,&nbsp;<strong>setForeGround()</strong>&nbsp;et&nbsp;<strong>setBackgroundColor()</strong>.<br>&nbsp;</p>



<h3>JFrame</h3>



<p>Il s’agit d’un conteneur de niveau supérieur utilisé pour représenter les exigences minimales pour une fenêtre. Cela inclut les bordures, le redimensionnement (le JFrame est-il redimensionnable?), La barre de titre, les contrôles (Réduire / Agrandir sont autorisés?) Et les gestionnaires d’événements pour divers événements comme windowClose, windowOpened, etc.</p>



<p>JFrame, tout comme JPanel, est également une sous-classe de JComponent et JContainer. C’est une fenêtre avec ses propres caractéristiques. Il a une bordure, une barre de titre et des composants comment label, bouton, etc. Ses attributs physiques, comme la taille, la couleur, les polices, etc., peuvent tous être personnalisés. Il existe une syntaxe appropriée héritée pour chaque attribut que vous souhaitez modifier. JFrame a essentiellement deux sous-zones, la zone de contenu et la barre de menus, mais la plupart des contrôles se trouvent dans la zone de contenu. Dans JFrame, vous pouvez également placer des boutons, des labels et des cases à cocher.<br>&nbsp;</p>



<h3>Conclusion</h3>



<p><strong>JFrame</strong>&nbsp;est la fenêtre; il peut contenir une ou plusieurs instances du&nbsp;<strong>JPanel</strong>.&nbsp;<strong>JPanel</strong>&nbsp;n’est pas une fenêtre.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>JTextField &#124; Java Swing</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/22/jtextfield-java-swing/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Wed, 22 Jun 2022 17:19:50 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=757</guid>

					<description><![CDATA[JTextField fait partie du package javax.swing. La classe JTextField est un composant qui permet de modifier une seule ligne de texte. JTextField hérite de la classe JTextComponent et utilise l’interface SwingConstants. Les constructeurs de la classe JTextField sont : Constructeurs de JTextField Description JTextField() Constructeur qui crée un nouveau TextField JTextField(int columns) Constructeur qui crée un nouveau TextField vide avec un nombre&#8230;]]></description>
										<content:encoded><![CDATA[
<p><strong>J</strong>TextField fait partie du package javax.swing. La classe <strong>JTextField</strong> est un composant qui permet de modifier une seule ligne de texte. <strong>JTextField</strong> hérite de la classe JTextComponent et utilise l’interface SwingConstants.<br> <br>Les constructeurs de la classe <strong>JTextField</strong> sont :</p>



<figure class="wp-block-table"><table><thead><tr><th>Constructeurs de JTextField</th><th>Description</th></tr></thead><tbody><tr><td><strong>JTextField()</strong></td><td>Constructeur qui crée un nouveau TextField</td></tr><tr><td><strong>JTextField(int columns)</strong></td><td>Constructeur qui crée un nouveau TextField vide avec un nombre spécifié de colonnes.</td></tr><tr><td><strong>JTextField(String text)</strong></td><td>Constructeur qui crée un nouveau champ de texte vide initialisé avec la chaîne donnée.</td></tr><tr><td><strong>JTextField(String text, int columns)</strong></td><td>Constructeur qui crée un nouveau champ de texte vide avec la chaîne donnée et un nombre spécifié de colonnes.</td></tr><tr><td><strong>JTextField(Document doc, String text, int columns)</strong></td><td>Constructeur qui crée un champ de texte qui utilise le modèle de stockage donné et le nombre de colonnes donné.</td></tr></tbody></table></figure>



<p>Les méthodes couramment utilisée de JTextField sont les suivantes:</p>



<ul><li><strong>setColumns(int n)</strong> : définissez le nombre de colonnes du champ de texte.</li><li><strong>setFont(Font f)</strong> : définissez la police du texte affiché dans le champ texte.</li><li><strong>addActionListener(ActionListener l)</strong> : définissez un ActionListener sur le champ de texte.</li><li><strong>int getColumns()</strong> : récupère le nombre de colonnes dans le champ texte.</li></ul>



<span id="more-757"></span>



<h3>Exemple: JTextField</h3>



<div class="wp-block-cover is-light"><span aria-hidden="true" class="wp-block-cover__background has-background-dim"></span><div class="wp-block-cover__inner-container">
<div class="wp-container-13 wp-block-group"><div class="wp-block-group__inner-container">
<pre class="wp-block-preformatted">import javax.swing.*;
import java.awt.event.*;

public class TextFieldTest implements ActionListener
{
  JTextField text1,text2;
  JButton btn;
  
  TextFieldTest()
  {
    JFrame f = new JFrame();
    text1 = new JTextField();
    text1.setBounds(20,50,280,30);
    text2 = new JTextField();
    text2.setBounds(20,90,280,30);
    text2.setEditable(false);
    btn = new JButton("Cliquez ici!");
    btn.setBounds(100,140,100,40);
    btn.addActionListener(this);
    f.add(text1);
    f.add(text2);
    f.add(btn);
    f.setSize(340,250);
    f.setLayout(null);
    f.setVisible(true);
  }
  public void actionPerformed(ActionEvent e) 
  {
    String name = text1.getText();
    String result = "";
    if(e.getSource() == btn){
      result = "Hello "+name+", Welcome to WayToLearnX!";
    }
    text2.setText(result);
  }
  public static void main(String[] args) {
    new TextFieldTest();
  } 
}</pre>
</div></div>
</div></div>



<p><strong>Sortie:</strong></p>



<figure class="wp-block-image size-large"><img src="https://1.bp.blogspot.com/-lpWtFhW8cjo/XrQRYV8GfDI/AAAAAAAAIuw/ojeAoNjLH04Vk1RSKtUipOvgt-W7rlXnACNcBGAsYHQ/s1600/out.png" alt=""/></figure>



<p><br>Exemple: JTextField avec ActionListener</p>



<div class="wp-block-cover is-light"><span aria-hidden="true" class="wp-block-cover__background has-background-dim"></span><div class="wp-block-cover__inner-container">
<div class="wp-container-14 wp-block-group"><div class="wp-block-group__inner-container">
<pre class="wp-block-preformatted">import javax.swing.*;
import java.awt.event.*;

public class TextFieldTest implements ActionListener
{
  JTextField text1,text2;
  JButton btn;
  
  TextFieldTest()
  {
    JFrame f = new JFrame();
    text1 = new JTextField();
    text1.setBounds(20,50,280,30);
    text2 = new JTextField();
    text2.setBounds(20,90,280,30);
    text2.setEditable(false);
    btn = new JButton("Cliquez ici!");
    btn.setBounds(100,140,100,40);
    btn.addActionListener(this);
    f.add(text1);
    f.add(text2);
    f.add(btn);
    f.setSize(340,250);
    f.setLayout(null);
    f.setVisible(true);
  }
  public void actionPerformed(ActionEvent e) 
  {
    String name = text1.getText();
    String result = "";
    if(e.getSource() == btn){
      result = "Hello "+name+", Welcome to WayToLearnX!";
    }
    text2.setText(result);
  }
  public static void main(String[] args) {
    new TextFieldTest();
  } 
}</pre>
</div></div>
</div></div>



<figure class="wp-block-image size-large"><img src="https://1.bp.blogspot.com/-rNKdTVJfV6o/XrQiv6dyzoI/AAAAAAAAIu4/_XbllG7LxFMlwXXVpAexDs-9VHHtnZqUgCNcBGAsYHQ/s1600/out.png" alt=""/></figure>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Création interface graphique avec Swing – les bases</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/22/java-swing/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Wed, 22 Jun 2022 16:36:43 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=746</guid>

					<description><![CDATA[Ce tutoriel Java est conçu pour les débutants ayant besoin de comprendre l’api Swing de Java à partir de zéro. En Java, Swing fournit un ensemble de bibliothèques pour créer une interface graphique (GUI), pour le faire fonctionner indépendamment sur différentes plates-formes. Swing est certainement celui qui est le plus utilisé, car ses propriétés de&#8230;]]></description>
										<content:encoded><![CDATA[
<p><strong>C</strong>e tutoriel Java est conçu pour les débutants ayant besoin de comprendre l’api Swing de Java à partir de zéro.</p>



<p>En Java, Swing fournit un ensemble de bibliothèques pour créer une interface graphique (GUI), pour le faire fonctionner indépendamment sur différentes plates-formes. Swing est certainement celui qui est le plus utilisé, car ses propriétés de légèreté, contrôle et de personnalisation facile.</p>



<p>Avant Swing, AWT(Abstract Windowing Toolkit) est celui qui permet de créer différentes interfaces graphiques. Cependant, en raison de ses inconvénients sur la plate-forme, lourd et peu de composants, il a été remplacé par Java Swing, qui est intégré au package AWT. Notez que certains composants AWT restent en Java et dans certaines situations, il doit être utilisé. Dans la partie suivante, vous verrez un package AWT à importer par nos exemples.</p>



<span id="more-746"></span>



<p>Dans ce tutoriel, nous nous concentrons sur Java Swing, qui possède un large éventail de composants, tels que JFrame, JTable, JButton, JMenu, etc.</p>



<h1>Les composants Swing de Java</h1>



<h2 class="has-vivid-red-color has-text-color">JFrame</h2>



<p>Dans Java Swing, la plupart des applications seront construites à l’intérieur d’un composant de base appelé&nbsp;<strong>JFrame</strong>, qui crée une fenêtre pour contenir d’autres composants.</p>



<div class="wp-block-cover is-light"><span aria-hidden="true" class="wp-block-cover__background has-background-dim"></span><div class="wp-block-cover__inner-container">
<div class="wp-container-15 wp-block-group"><div class="wp-block-group__inner-container">
<pre class="wp-block-preformatted">import javax.swing.*;
 
public class Main 
{
    public static void main(String[] args) 
    {
        JFrame frame = new JFrame("Hello World");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(250, 250);
        frame.setVisible(true);
    }
}</pre>
</div></div>
</div></div>



<p>Notez que nous pouvons initialiser le frame avec la chaîne «&nbsp;Hello World&nbsp;», ce qui crée un frame vide avec le titre «&nbsp;Hello World&nbsp;». La fonction&nbsp;<strong>setDefaultCloseOperation</strong>&nbsp;indique au frame quoi faire lorsque l’utilisateur ferme le frame et&nbsp;<strong>JFrame.EXIT_ON_CLOSE</strong>; sortir quant l’utilisateur ferme le frame. La taille du frame peut être définie par&nbsp;<strong>setSize</strong>&nbsp;avec les paramètres (largeur et hauteur). Notez que sans la fonction&nbsp;<strong>setVisible</strong>&nbsp;avec le paramètre «&nbsp;true&nbsp;», vous ne verrez rien à l’écran. Pour voir la partie GUI, nous avons besoin de cette fonction.<br>&nbsp;<br><strong>Sortie:</strong></p>



<figure class="wp-block-image size-large"><img src="https://1.bp.blogspot.com/-wnAAmmcaeM4/XrGAr_AtPoI/AAAAAAAAIro/poRKNbPBrn0Sbra50eKNkfOKyv24xN1DACNcBGAsYHQ/s1600/out.png" alt=""/></figure>



<h2 class="has-vivid-red-color has-text-color">JLabel</h2>



<p>JLabel est une zone pour afficher une chaîne courte ou une image ou les deux. Normalement, nous pouvons ajouter le JLabel dans le JFrame que nous avons construit dans la partie précédente et afficher différents textes. Avec le code java suivant ajouté après la création de JFrame, une label avec le texte «&nbsp;Je suis un JLabel&nbsp;» est créée.</p>



<div class="wp-block-cover is-light" style="min-height:209px"><span aria-hidden="true" class="wp-block-cover__background has-background-dim"></span><div class="wp-block-cover__inner-container">
<div class="wp-container-16 wp-block-group"><div class="wp-block-group__inner-container">
<p>JLabel label = new JLabel<strong>(</strong>&#8220;Je suis un JLabel&#8221;, JLabel.CENTER<strong>)</strong>;</p>



<p>frame.add<strong>(</strong>label<strong>)</strong>;</p>
</div></div>
</div></div>



<p>Pour la position du label, elle pourrait être spécifiée par&nbsp;<strong>JLabel.LEFT</strong>&nbsp;(gauche),&nbsp;<strong>JLabel.CENTER</strong>&nbsp;(centre),&nbsp;<strong>JLabel.RIGHT</strong>&nbsp;(droite).<br>&nbsp;<br><strong>Sortie:</strong></p>



<figure class="wp-block-image size-large"><img src="https://1.bp.blogspot.com/-gnrPLmNB0v8/XrGNIWXtVUI/AAAAAAAAIrw/IfIgF8nXf_4Q97ogHQoMCCX5ZJ2iXkVlgCNcBGAsYHQ/s1600/out.png" alt=""/></figure>



<h2 class="has-vivid-red-color has-text-color">JPanel</h2>



<p>JPanel est un conteneur populaire pour contenir différents composants. Il peut être défini et ajouté à l’aide du code suivant:</p>



<div class="wp-block-cover is-light" style="min-height:142px"><span aria-hidden="true" class="wp-block-cover__background has-background-dim"></span><div class="wp-block-cover__inner-container">
<div class="wp-container-17 wp-block-group"><div class="wp-block-group__inner-container">
<pre class="wp-block-preformatted">JPanel panel = new JPanel();
frame.add(panel);</pre>
</div></div>
</div></div>



<h2 class="has-vivid-red-color has-text-color">JButton</h2>



<p>JButton est un composant de Java Swing. Il peut être configuré pour avoir différentes actions, en utilisant event listener. Pour cette partie, nous en discuterons dans un autre tutoriel. Dans le code suivant, nous avons ajouté deux boutons dans le panel avec un nom différent Bouton 1, Bouton 2</p>



<div class="wp-block-cover is-light"><span aria-hidden="true" class="wp-block-cover__background has-background-dim"></span><div class="wp-block-cover__inner-container">
<div class="wp-container-18 wp-block-group"><div class="wp-block-group__inner-container">
<pre class="wp-block-preformatted">import javax.swing.*;
import java.awt.*;

public class Main 
{
    public static void main(String[] args) 
    {
        // Définissez le frame
        JFrame frame = new JFrame("Hello World");
    
        JLabel label = new JLabel("Je suis un JLabel", JLabel.CENTER);
        frame.add(label);
    
        // Définissez le panel
        JPanel panel = new JPanel();

        // Définir les boutons
        JButton btn1 = new JButton("Bouton 1");
        JButton btn2 = new JButton("Bouton 2");      

        // Ajouter les boutons au frame
        panel.add(btn1); 
        panel.add(btn2);
         
        // Ajouter label et panel au frame
        frame.setLayout(new GridLayout(2, 1));
        frame.add(label);
        frame.add(panel);
         
        frame.pack();
        frame.setSize(250, 250);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
}</pre>
</div></div>
</div></div>



<p>Dans l’exemple ci-dessus, nous avons défini un label sur le côté supérieur et un panel contenant deux boutons en bas.<br>&nbsp;<strong>Sortie:</strong></p>



<figure class="wp-block-image size-large"><img src="https://1.bp.blogspot.com/-s8G9WJFRjm4/XrGgQtmjddI/AAAAAAAAIr4/zKY-uQ2r2Yc-72RzDn7aLf0whdfRZN4fACNcBGAsYHQ/s1600/out.png" alt=""/></figure>



<h2 class="has-vivid-red-color has-text-color">JRadioButton</h2>



<p>Ici, JRadioButton est assez différent de JButton. Il s’agit d’un bouton radio qui peut être sélectionné ou désélectionné. À utiliser avec l’objet ButtonGroup pour créer un groupe de boutons, dans lequel un seul bouton peut être sélectionné à la fois.</p>



<div class="wp-block-cover is-light"><span aria-hidden="true" class="wp-block-cover__background has-background-dim"></span><div class="wp-block-cover__inner-container">
<div class="wp-container-19 wp-block-group"><div class="wp-block-group__inner-container">
<pre class="wp-block-preformatted">import javax.swing.*;
import java.awt.*;

public class Main 
{
    public static void main(String[] args) 
    {
        // Définissez le frame
        JFrame frame = new JFrame("Hello World");
    
        JLabel label = new JLabel("Je suis un JLabel", JLabel.CENTER);
        frame.add(label);
    
        // Définissez le panel
        JPanel panel = new JPanel();

        // Créer des boutons radio
        ButtonGroup group = new ButtonGroup();     
        JRadioButton radio1 = new JRadioButton("ON", true);
        JRadioButton radio2 = new JRadioButton("OFF", false);

        // Ajouter les boutons radio au groupe
        group.add(radio1);
        group.add(radio2);
    
        // Ajouter les boutons au frame
        panel.add(radio1); 
        panel.add(radio2);
         
        // Ajouter label et panel au frame
        frame.setLayout(new GridLayout(2, 1));
        frame.add(label);
        frame.add(panel);
         
        frame.pack();
        frame.setSize(250, 250);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
}</pre>
</div></div>
</div></div>



<p><strong>Sortie:</strong><br></p>



<figure class="wp-block-image size-large"><img src="https://1.bp.blogspot.com/-ZExj1voZqKM/XrGjAsLWDkI/AAAAAAAAIsA/sEFWFoC5vMMsWnjo8yD79r1t_ejamcRCgCNcBGAsYHQ/s1600/out.png" alt=""/></figure>



<h2 class="has-vivid-red-color has-text-color">JCheckBox</h2>



<p>JCheckBox est utilisé pour créer une case à cocher, dont plusieurs cases à cocher peuvent être sélectionnées en même temps. C’est la principale différence entre JRadioButton.</p>



<div class="wp-block-cover is-light"><span aria-hidden="true" class="wp-block-cover__background has-background-dim"></span><div class="wp-block-cover__inner-container">
<div class="wp-container-20 wp-block-group"><div class="wp-block-group__inner-container">
<pre class="wp-block-preformatted">import javax.swing.*;
import java.awt.*;

public class Main 
{
    public static void main(String[] args) 
    {
        // Définissez le frame
        JFrame frame = new JFrame("Hello World");

        JLabel label = new JLabel("Je suis un JLabel", JLabel.CENTER);
        frame.add(label);

        // Définissez le panel
        JPanel panel = new JPanel();

        // Créer des cases à cocher    
        JCheckBox checkBox1 = new JCheckBox("Java", true);
        JCheckBox checkBox2 = new JCheckBox("PHP");
        JCheckBox checkBox3 = new JCheckBox("Python", true);

        // Ajouter les cases à cocher au frame
        panel.add(checkBox1); 
        panel.add(checkBox2);
        panel.add(checkBox3);

        // Ajouter label et panel au frame
        frame.setLayout(new GridLayout(2, 1));
        frame.add(label);
        frame.add(panel);

        frame.pack();
        frame.setSize(250, 250);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
}</pre>
</div></div>
</div></div>



<p><strong>Sortie:</strong></p>



<figure class="wp-block-image size-large"><img src="https://1.bp.blogspot.com/-shy_juhTFGQ/XrGnQWwyQaI/AAAAAAAAIsI/8_V096PmrdkRknf2X3xBK0a9Ui1yG0OcACNcBGAsYHQ/s1600/out.png" alt=""/></figure>



<h2 class="has-vivid-red-color has-text-color">JComboBox</h2>



<p>JComboBox est un composant permettant de sélectionner une valeur dans une liste déroulante. Vous pouvez choisir un et un seul élément dans la liste. L’exemple suivant montre comment créer une liste déroulante, à partir de laquelle différents langages peuvent être choisis: « PHP », « Java », « Python », « C++ », « Ruby ».</p>



<div class="wp-block-cover is-light"><span aria-hidden="true" class="wp-block-cover__background has-background-dim"></span><div class="wp-block-cover__inner-container">
<div class="wp-container-21 wp-block-group"><div class="wp-block-group__inner-container">
<pre class="wp-block-preformatted">import javax.swing.*;
import java.awt.*;

public class Main 
{
    public static void main(String[] args) 
    {
        // Définissez le frame
        JFrame frame = new JFrame("Hello World");

        // Set data in the drop-down list
        String[] langs = {"PHP", "Java", "Python", "C++", "Ruby"};

        // Créer une liste déroulante
        JComboBox cb = new JComboBox(langs);
    
        frame.setLayout(new GridLayout(6, 1));
        frame.add(cb);

        frame.pack();
        frame.setSize(250, 250);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
}</pre>
</div></div>
</div></div>



<p><strong>Sortie:</strong></p>



<figure class="wp-block-image size-large"><img src="https://1.bp.blogspot.com/-GB9HlAcOEhM/XrGq5emN2dI/AAAAAAAAIsQ/HY6gQMorycknMq4k42Lu9AFlgVMWnKB_wCNcBGAsYHQ/s1600/out.png" alt=""/></figure>



<h2 class="has-vivid-red-color has-text-color">JTable</h2>



<p>JTable est utilisé pour créer des tables bidimensionnelles. La table peut afficher des données à l’intérieur. En plus, l’utilisateur peut également modifier les données. L’exemple suivant montre que nous avons créé quatre colonnes: ID, Nom, Age, Adresse. Dans chaque colonne, nous avons mis les données / informations à l’intérieur.</p>



<div class="wp-block-cover is-light"><span aria-hidden="true" class="wp-block-cover__background has-background-dim"></span><div class="wp-block-cover__inner-container">
<div class="wp-container-22 wp-block-group"><div class="wp-block-group__inner-container">
<pre class="wp-block-preformatted">import javax.swing.*;
import java.awt.*;

public class Main 
{
    public static void main(String[] args) 
    {
        // Définissez le frame
        JFrame frame = new JFrame("Hello World");

        //L'en-têtes du JTable
        String[] column = {"ID", "Nom", "Age", "Adresse"};
    
        //Les lignes du JTable
        String[][] data = {
                {"01", "Thomas", "55", "Paris"}, 
                {"02", "Emily", "45", "Marseille"}, 
                {"03", "Yohan", "12", "Lyon"}, 
                {"04", "Jean", "29", "Toulouse"},
                {"05", "Bob", "30", "Nice"}
        };
        
        // Créer le JTable
        JTable table = new JTable(data, column);
        JScrollPane scroll = new JScrollPane(table); 
        frame.add(scroll);

        frame.pack();
        frame.setSize(300, 200);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
}</pre>
</div></div>
</div></div>



<p><strong>Sortie:</strong></p>



<figure class="wp-block-image size-large"><img src="https://1.bp.blogspot.com/-brfdBF1uflo/XrGu-fbNcnI/AAAAAAAAIsY/gZ6J_pC6mLMLU83wjWLNW8pp3I7V5fVzACNcBGAsYHQ/s1600/out.png" alt=""/></figure>



<h2 class="has-vivid-red-color has-text-color">JMenu</h2>



<p>La classe JMenu permet de créer un menu déroulant. Dans cet exemple, nous avons différents paramètres sur le menu. Nous avons le menu Fichier, qui comprend le sous-menu Nouveau, Ouvrir, Enregistrer et le menu Édition et en fin le menu Aide.</p>



<div class="wp-block-cover is-light"><span aria-hidden="true" class="wp-block-cover__background has-background-dim"></span><div class="wp-block-cover__inner-container">
<div class="wp-container-23 wp-block-group"><div class="wp-block-group__inner-container">
<pre class="wp-block-preformatted">import javax.swing.*;
import java.awt.*;

public class Main 
{
    public static void main(String[] args) 
    {
        // Définissez le frame
        JFrame frame = new JFrame("Hello World");

        JPanel panel = new JPanel();
         
        // Définir le menu principal
        JMenuBar menu = new JMenuBar();
        JMenu file = new JMenu("Fichier");
        JMenu edit = new JMenu("Edition");
        JMenu help = new JMenu("Aide");
         
        // Définir le sous-menu pour Fichier
        JMenuItem newf = new JMenuItem("Nouveau");
        JMenuItem quit = new JMenuItem("Ouvrir");
        JMenuItem save = new JMenuItem("Enregistrer");
 
        file.add(newf);
        file.add(save);
        file.add(quit);
         
        menu.add(file);
        menu.add(edit);
        menu.add(help);
         
        frame.setLayout(new GridLayout(5, 1));
    
        frame.add(menu);
        frame.add(panel);
        frame.pack();
        frame.setSize(300, 200);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
}</pre>
</div></div>
</div></div>



<p><strong>Sortie:</strong></p>



<figure class="wp-block-image size-large"><img src="https://1.bp.blogspot.com/-xFSfOMQYKHA/XrG3-YJj4II/AAAAAAAAIsg/gZ3DEJ2uTQElq3AaB4mZBxacyqlOT-d-QCNcBGAsYHQ/s1600/out.png" alt=""/></figure>



<h2 class="has-vivid-red-color has-text-color">JSlider</h2>



<p>JSlider est un composant qui permet aux utilisateurs de sélectionner une valeur en faisant glisser un bouton dans un intervalle spécifié. Le bouton, il pointe toujours vers le point qui correspond aux valeurs entières dans l’intervalle.</p>



<div class="wp-block-cover is-light"><span aria-hidden="true" class="wp-block-cover__background has-background-dim"></span><div class="wp-block-cover__inner-container">
<div class="wp-container-24 wp-block-group"><div class="wp-block-group__inner-container">
<pre class="wp-block-preformatted">import javax.swing.*;
import java.awt.*;

public class Main 
{
    public static void main(String[] args) 
    {
        // Définissez le frame
        JFrame frame = new JFrame("Hello World");

        JPanel panel = new JPanel();
         
        // Définissez le slider
        JSlider slider = new JSlider();
        slider.setMajorTickSpacing(20);
        slider.setMinorTickSpacing(5);
        slider.setPaintTicks(true);
        slider.setPaintLabels(true);
    
        frame.setLayout(new GridLayout(2, 1));
        frame.add(slider);
        frame.pack();
        frame.setSize(400, 200);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
}</pre>
</div></div>
</div></div>



<p><strong>Sortie:</strong></p>



<figure class="wp-block-image size-large"><img src="https://1.bp.blogspot.com/-SB1jI2-0qFs/XrG575B6o1I/AAAAAAAAIso/IqyfhFM87-4Cdwndg6_9JeHrmcgmsc1iwCNcBGAsYHQ/s1600/out.png" alt=""/></figure>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
