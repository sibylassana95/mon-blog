<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>python &#8211; SIBY INFORMATIQUE</title>
	<atom:link href="https://sibylassana95.github.io/mon-blog/tag/python/feed/" rel="self" type="application/rss+xml" />
	<link>https://sibylassana95.github.io/mon-blog</link>
	<description>Astuce - Cours - Actualité</description>
	<lastBuildDate>Tue, 21 Jun 2022 03:03:39 +0000</lastBuildDate>
	<language>fr-FR</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.0</generator>
	<item>
		<title>Le gestionnaire des packages pip</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/18/le-gestionnaire-des-packages-pip/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Sat, 18 Jun 2022 16:24:11 +0000</pubDate>
				<category><![CDATA[Python]]></category>
		<category><![CDATA[python]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=180</guid>

					<description><![CDATA[1 &#8211; A propos de l&#8217;utilitaire pip pip&#160;est un&#160;système&#160;de&#160;gestion de packages&#160;standard utilisé pour installer et gérer des packages logiciels: modules et librairies Python. De nombreux packages peuvent être trouvés dans la source par défaut des packages et de leurs dépendances. La plupart des distributions de Python sont livrées avec pip préinstallé. Python 2.7 et versions&#8230;]]></description>
										<content:encoded><![CDATA[<div class="wp-block-image">
<figure class="aligncenter"><img src="https://www.tresfacile.net/wp-content/uploads/2020/04/gestionnaire-packages-pip-package-management-pip-utilitie.png" alt="" class="wp-image-6866"/></figure></div>


<h2>1 &#8211; A propos de l&#8217;utilitaire pip</h2>



<p><strong>pip&nbsp;</strong>est un<strong>&nbsp;système&nbsp;</strong>de<strong>&nbsp;gestion de packages</strong>&nbsp;standard utilisé pour installer et gérer des packages logiciels: modules et librairies Python. De nombreux packages peuvent être trouvés dans la source par défaut des packages et de leurs dépendances. La plupart des distributions de Python sont livrées avec pip préinstallé. Python 2.7 et versions ultérieures sur la série python2 et Python 3.4 et versions ultérieures incluent par défaut pip ou pip3 pour Python 3.</p>



<h2>2 &#8211; Installer des logiciels en ligne de commande avec pip</h2>



<p>Un avantage majeur de pip est la facilité de son interface de ligne de commande, ce qui rend l&#8217;installation des packages logiciels Python aussi simple que l&#8217;émission d&#8217;une commande:</p>



<span id="more-180"></span>



<pre class="wp-block-code"><code>pip installe nom-du-package</code></pre>



<h4>Exemple</h4>


<div class="wp-block-image">
<figure class="aligncenter"><img src="https://www.tresfacile.net/wp-content/uploads/2020/04/pip-nstall-pillow.png" alt="" class="wp-image-6863"/></figure></div>


<h4>Connaitre la version de pip</h4>



<pre class="wp-block-code"><code>pip --version</code></pre>



<p>Les utilisateurs peuvent également supprimer facilement un package déjà installé:</p>



<pre class="wp-block-code"><code>pip uninstalle nom-du-package</code></pre>



<p>Plus important encore, pip a une fonctionnalité pour gérer les listes complètes des packages et les numéros de version correspondants, possible via un fichier &#8220;requirements&#8221;. Cela permet la recréation efficace d&#8217;un groupe entier de packages dans un environnement séparé (par exemple un autre ordinateur) ou un environnement virtuel. Ceci peut être réalisé avec un fichier correctement formaté et la commande suivante, où requirements.txt est le nom du fichier:</p>



<pre class="wp-block-code"><code>pip install -r requirements.txt</code></pre>



<h2>2 &#8211; Principales commandes de l&#8217;utilitaire pip</h2>



<h3>2.1 &#8211; Obtenir de l&#8217;aide sur l&#8217;utilitaire pip</h3>



<pre class="wp-block-code"><code>pip help</code></pre>



<h3>2.2 &#8211; Installation des dependances</h3>



<pre class="wp-block-code"><code>pip install request</code></pre>



<h3>2.3 &#8211; Mettre à jour l&#8217;utilitaire pip</h3>



<pre class="wp-block-code"><code>python -m pip install --upgrade pip</code></pre>



<h3>2.4 &#8211; Voir la liste des packages installés</h3>



<pre class="wp-block-code"><code>pip list</code></pre>



<h3>2.5 &#8211; Voir les informations sur un package installé</h3>



<pre class="wp-block-code"><code>pip show nom_du_package</code></pre>



<h3>2.6 &#8211; Rechercher un package sur Pypi</h3>



<pre class="wp-block-code"><code>pip search nom_du_package</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Les exceptions en Python ( Try Except )</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/18/les-exceptions-en-python-try-except/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Sat, 18 Jun 2022 16:22:34 +0000</pubDate>
				<category><![CDATA[Python]]></category>
		<category><![CDATA[python]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=178</guid>

					<description><![CDATA[1 Étude d&#8217;un exemple Considérons le code suivant qui permet de calculer le quotient de deux nombres a et b: Si vous exécutez le code ci-dessus en donnant&#160;a = 6&#160;et&#160;b = 3, le programme renvoie : Le quotient de a par b est : a/b = 2.0 L&#8217;exécution ne rencontre aucun problème!&#160; Mais si l&#8217;utilisateur&#8230;]]></description>
										<content:encoded><![CDATA[
<h2>1 Étude d&#8217;un exemple</h2>



<p>Considérons le code suivant qui permet de calculer le quotient de deux nombres a et b:</p>



<pre class="wp-block-code"><code>a = int(input("Tapez la valeur de a : ")) 
b = int(input("Tapez la valeur de b : ")) 
print("Le quotient de a par b est : a/b = " , a/b)</code></pre>



<p>Si vous exécutez le code ci-dessus en donnant&nbsp;<strong>a = 6</strong>&nbsp;et&nbsp;<strong>b = 3</strong>, le programme renvoie :</p>



<span id="more-178"></span>



<p><em><strong>Le quotient de a par b est : a/b = 2.0</strong></em></p>



<p>L&#8217;exécution ne rencontre aucun problème!&nbsp; Mais si l&#8217;utilisateur donne&nbsp;<strong>a = 6&nbsp;</strong>et<strong>&nbsp;b = 0</strong>&nbsp;le programme renvoie le message d&#8217;erreur :</p>



<p><strong>builtins.ZeroDivisionError: division by zero.</strong></p>



<p>En plus l’interpréteur python arrête l&#8217;exécution du code !</p>



<p>Afin d’éviter ce message d&#8217;erreur, et continuez à exécuter la suite du code, on utilise la<strong>&nbsp;structure Try &#8230; except</strong></p>



<ol><li><strong>Le bloc try</strong>&nbsp;permet de tester un bloc de code s&#8217;il contient des erreurs ou non et ne l&#8217;exécute que s&#8217;il ne contient aucune erreur! Dans le cas contraire le programme ignore la totalité du code dans ce bloc et passe au bloc suivant except.</li><li><strong>Le bloc except</strong>, vous permet de gérer l&#8217;erreur.</li><li><strong>Le bloc finally</strong>, vous permet d&#8217;exécuter du code, quel que soit le résultat des blocs&nbsp;<strong>try&nbsp;</strong>et<strong>&nbsp;except.</strong></li></ol>



<h2>2 &#8211; Gestion des exceptions</h2>



<p>Lorsqu&#8217;une erreur se produit, ou exception comme nous l&#8217;appelons, Python s&#8217;arrête normalement et génère un message d&#8217;erreur.</p>



<p>Ces exceptions peuvent être gérées à l&#8217;aide de l&#8217;<strong>instruction try:</strong></p>



<pre class="wp-block-code"><code>a = int(input("Tapez la valeur de a : "))
b = int(input("Tapez la valeur de b : "))
try:
    print("Le quotient de a par b est : a/b = " , a/b)
except:
    print("Veuillez choisir une valeur b non nulle !")</code></pre>



<p>Dans ce cas si vous donnez&nbsp;<strong>a = 6</strong>&nbsp;et<strong>&nbsp;b = 0</strong>, le programme ignore le code du<strong>&nbsp;bloc try</strong>&nbsp;après avoir détecté une erreur et passe automatiquement au code du&nbsp;<strong>bloc except</strong>&nbsp;et renvoie donc:</p>



<p><em><strong>Veuillez choisir une valeur b non nulle !</strong></em></p>



<h2>3 &#8211; Exception utilisant l&#8217;instruction raise</h2>



<pre class="wp-block-code"><code>try:
    age = int(input("Veuille saisir votre age"))  
    if age &lt; 18:  
        raise ValueError
    else:  
        print("age valide")  
except :  
    print("age non valide !")</code></pre>



<h2>4 &#8211; L&#8217;instruction finally</h2>



<p>L&#8217;instruction&nbsp;<strong>finally</strong>&nbsp;est utilisée pour exécuter des instructions quelque soit les erreurs générées ou non. Dans tous les cas (présence d&#8217;erreurs ou non ! ) l&#8217;instruction déclarée dans le block finally sera executée.</p>



<p><strong>Syntaxe:</strong></p>



<pre class="wp-block-code"><code>try:
    # bloc de code pouvant probablement lever une exeption
finally:
    # bloc de code qui sera toujours exécuté</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Héritage en langage Python</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/18/heritage-en-langage-python/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Sat, 18 Jun 2022 16:21:05 +0000</pubDate>
				<category><![CDATA[Python]]></category>
		<category><![CDATA[python]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=176</guid>

					<description><![CDATA[1 &#8211; Notion d&#8217;héritage et classe parent Pour éviter de recopier le code d&#8217;une classe, on utilise la méthode d&#8217;héritage. La méthode d&#8217;héritage consiste à créer à partir d&#8217;une&#160;classe parent&#160;ou&#160;(classe mère)&#160;une autre classe appelé&#160;classe fille&#160;ou&#160;(classe enfant)&#160;qui&#160;hérite toutes les méthodes et propriétés de la classe mère. Pour simplifier l&#8217;acquisition pour les apprenants débutant, nous allons traiter&#8230;]]></description>
										<content:encoded><![CDATA[
<h2>1 &#8211; Notion d&#8217;héritage et classe parent</h2>



<p>Pour éviter de recopier le code d&#8217;une classe, on utilise la méthode d&#8217;<strong>héritage</strong>. La méthode d&#8217;héritage consiste à créer à partir d&#8217;une&nbsp;<strong>classe parent&nbsp;</strong>ou<strong>&nbsp;(classe mère)</strong>&nbsp;une autre classe appelé&nbsp;<strong>classe fille&nbsp;</strong>ou<strong>&nbsp;(classe enfant)</strong>&nbsp;qui<em>&nbsp;hérite toutes les méthodes et propriétés de la classe mère</em>. Pour simplifier l&#8217;acquisition pour les apprenants débutant, nous allons traiter ce concept sur des exemples simples:</p>



<span id="more-176"></span>



<h2>2 &#8211; Exemples d&#8217;héritages en Python</h2>



<h3>Classe mère:</h3>



<pre class="wp-block-code"><code>#-*- coding: utf-8 -*- 
class Personne:     
     def __init__(self,nom,age):         
         self.nom = nom         
         self.age=age</code></pre>



<pre class="wp-block-code"><code>class classe_fille(classe_mère)</code></pre>



<p>Qui veut dire que la&nbsp;<strong>classe classe_fille</strong>&nbsp;hérite de la<strong>&nbsp;calsse classe_mère</strong>.</p>



<p>Exemple pour notre cas de la<strong>&nbsp;classe fille Student</strong>&nbsp;qui hérite de la<strong>&nbsp;classe mère Personne</strong>:</p>



<pre class="wp-block-code"><code>class Student(Personne):</code></pre>



<p>L&#8217;<strong>héritage</strong>&nbsp;des&nbsp;<strong>attributs nom</strong>&nbsp;et<strong>&nbsp;age</strong>&nbsp;se fait via la commande:</p>



<pre class="wp-block-code"><code>Personne.__init__(self,nom,age)</code></pre>



<p>Code de la&nbsp;<strong>classe fille Student</strong>:</p>



<pre class="wp-block-code"><code>#-*- coding: utf-8 -*-
class Student(Personne): 
    # définition des attributs des attributs    
    def __init__(self,nom,age,filiere):
        # héritage des attributs depuis la classe mère Personne        
        Personne.__init__(self,nom,age)         
        # ajout d'un nouvel attribut filiere à la classe fille
        self.filiere = filiere</code></pre>



<h3>Exemple: (complet )</h3>



<pre class="wp-block-code"><code>#-*- coding: utf-8 -*-
class Personne:     
     def __init__(self,nom,age):         
         self.nom = nom         
         self.age=age
# La classe fille Student hérite de la classe mère Personne
class Student(Personne): 
    # définition des attributs des attributs    
    def __init__(self,nom,age,filiere):
        # héritage des attributs depuis la classe mère Personne        
        Personne.__init__(self,nom,age)         
        # ajout d'un nouvel attribut filiere à la classe fille
        self.filiere = filiere 
Stud = Student("Albert",27,"math") 
print("Le nom de l'étudiant  est : " ,Stud.nom) 
print("L'age de l'étudiant  est : " ,Stud.age) 
print("La filière de l'étudiant  est : " ,Stud.filiere)</code></pre>



<p><strong>Ce qui affiche après exécution:</strong></p>



<p><em>Le nom de l&#8217;étudiant est :<strong>&nbsp;Albert</strong></em><br><em>L&#8217;age de l&#8217;étudiant est :<strong>&nbsp;27</strong></em><br><em>La filière de l&#8217;étudiant est :&nbsp;<strong>math</strong></em></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Programmation orientée objet POO et classes en Python</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/18/programmation-orientee-objet-poo-et-classes-en-python/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Sat, 18 Jun 2022 16:19:55 +0000</pubDate>
				<category><![CDATA[Python]]></category>
		<category><![CDATA[python]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=174</guid>

					<description><![CDATA[1 &#8211;&#160; Le concept de POO en Python La&#160;programmation orientée objet, ou&#160;POO, est un&#160;paradigme&#160;de&#160;programmation&#160;qui permet de structurer les programmes de manière à ce que les propriétés et les comportements soient regroupés dans des objets à part. Par exemple, un objet peut représenter une personne avec un nom, un âge, une adresse, etc., avec des comportements&#8230;]]></description>
										<content:encoded><![CDATA[
<h2>1 &#8211;&nbsp; Le concept de POO en Python</h2>



<p>La&nbsp;<strong>programmation orientée objet</strong>, ou&nbsp;<strong>POO</strong>, est un&nbsp;<strong>paradigme</strong>&nbsp;de&nbsp;<strong>programmation</strong>&nbsp;qui permet de structurer les programmes de manière à ce que les propriétés et les comportements soient regroupés dans des objets à part.</p>



<p>Par exemple, un objet peut représenter une personne avec un nom, un âge, une adresse, etc., avec des comportements tels que marcher, parler, respirer et courir.</p>



<p>En d&#8217;autres termes, la programmation orientée objet est une approche permettant de modéliser des éléments concrets du monde réel tels que les voitures, ainsi que des relations entre des entités telles que les entreprises et les employés, les étudiants et les enseignants, etc. La modélisation POO modélise des entités réelles sous la forme d&#8217;objets logiciels certaines données qui leur sont associées et peuvent remplir certaines fonctions.</p>



<span id="more-174"></span>



<p>La programmation orienté objet est un type de programmation basée sur la création des classes et des objets via une méthode appelée instanciation. Une classe est un prototype (modèle) codé en un langage de programmation dont le but de créer des objets dotés d&#8217;un ensemble de méthodes et attributs qui caractérisent n&#8217;importe quel objet de la classe. Les attributs sont des types de données (variables de classe et variables d&#8217;instance) et des méthodes, accessibles via la concaténation par points.En programmation orientée objet, la déclaration d&#8217;une classe regroupe des méthodes et propriétés (attributs) communs à un ensemble d&#8217;objets. Ainsi on pourrait dire qu&#8217;une classe représente une catégorie d&#8217;objets. Elle apparaît aussi comme une usine permettant de créer des objets ayant un ensemble d&#8217;atributs et méthodes communes.</p>



<h2>2 &#8211;&nbsp; Les classes en Python</h2>



<p>Pour créer une classe en Python, on utilise l&#8217;instruction :</p>



<pre class="wp-block-code"><code>class nom_de_la_classe</code></pre>



<p>On crée ensuite une méthode qui permet de construire les objets, appelé constructeur via l&#8217;instruction :</p>



<pre class="wp-block-code"><code>def __init__(self):</code></pre>



<h3>Exemple. classe Personne</h3>



<pre class="wp-block-code"><code>class Personne:     
    def __init__(self,nom,age):         
       self.nom = nom         
       self.age = age 
P = Personne("Albert",27) 
print("Le nom de la prsonne est : " , P.nom) 
print("L'age de la personne est : " , P.age, " ans")
# affiche : Le nom de la prsonne est : Albert  
#           L'age de la personne est : 27 ans</code></pre>



<h3>Exemple: classe rectangle</h3>



<pre class="wp-block-code"><code>class Rectangle:     
    def __init__(self,L,l):         
       self.Longueur=L         
      self.Largeur=l        
monRectangle=Rectangle(7,5) 
print("La longueur de mon rectangle est : ",monRectangle.Longueur) 
print("La largeur de mon rectangle est : ",monRectangle.Largeur)</code></pre>



<p><strong>Ce qui affiche à l&#8217;exécution :</strong></p>



<p><em>La longueur de mon rectangle est : 7</em><br><em>La largeur de mon rectangle est : 5</em></p>



<p>On peut aussi améliorer la classe en ajoutant des méthodes permettant d&#8217;effectuer différentes tâches.</p>



<h2>3 &#8211; Les méthodes d&#8217;instance en Python</h2>



<p>Une&nbsp;<strong>méthode d&#8217;instance</strong>&nbsp;est une&nbsp;<strong>fonction</strong>&nbsp;ou&nbsp;<strong>procédure</strong>&nbsp;nommée au sein de la classe, permettant de définir des propriétés ou comportements des objets d&#8217;instances.</p>



<h3>Exemple. ajout de méthode qui calcule la surface du rectangle</h3>



<pre class="wp-block-code"><code>class Rectangle:     
    def __init__(self,L,l):         
        self.Longueur=L         
        self.Largeur=l              

    # méthode qui calcule la surface         
    def surface(self):         
        return self.Longueur*self.Largeur      

# création d'un rectangle de longueur 7 et de largeur 5 
monRectangle = Rectangle(7,5)
print("La surface de mon rectangle est : ", monRectangle.surface())</code></pre>



<p>Ce qui affiche après exécution :</p>



<p><em>La surface de mon rectangle est : 35</em></p>



<h2>4 &#8211; Les méthodes statiques</h2>



<p>Une méthode statique est une méthode de classe ayant la propriété d&#8217;être exécutée sans passer par l&#8217;instanciation. Une méthode statique est déclarée en ajoutant l&#8217;annotation :&nbsp;<strong>@staticmethod</strong></p>



<h3>Exemple. méthode statique</h3>



<pre class="wp-block-code"><code># -*- coding: utf-8 -*- 
class myClass:     
    def __init__(self):         
       pass              
    # création d'une méthode statique     
   @staticmethod     
   def myStaticMethod():         
       print("Voici un exmple de méthode statique en Python")          

myClass.myStaticMethod()</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Les ensembles en Python</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/18/les-ensembles-en-python/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Sat, 18 Jun 2022 16:18:15 +0000</pubDate>
				<category><![CDATA[Python]]></category>
		<category><![CDATA[python]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=172</guid>

					<description><![CDATA[1 &#8211; Définir un ensemble en Python Un ensemble en Python ( Python set) est une collection non&#160;ordonnée et non indexée. En Python, les ensembles sont écrits&#160; avec des accolades&#160;{&#8230;.}. Remarque Les ensembles&#160;ne sont pas ordonnés, les éléments apparaitront donc dans un ordre aléatoire. 2 &#8211; Accès aux éléments d&#8217;un ensemble Python Vous ne pouvez&#8230;]]></description>
										<content:encoded><![CDATA[
<h2>1 &#8211; Définir un ensemble en Python</h2>



<p>Un ensemble en Python ( Python set) est une collection non&nbsp;ordonnée et non indexée. En Python, les ensembles sont écrits&nbsp; avec des accolades&nbsp;<strong>{&#8230;.}</strong>.</p>



<pre class="wp-block-code"><code>mySet = {"Stylo", "Crayon", "Gomme"}
print(mySet)
# Affiche  : {'Gomme', 'Crayon', 'Stylo'}</code></pre>



<h3>Remarque</h3>



<p>Les ensembles&nbsp;<strong>ne sont pas ordonnés</strong>, les éléments apparaitront donc dans un ordre aléatoire.</p>



<span id="more-172"></span>



<h2>2 &#8211; Accès aux éléments d&#8217;un ensemble Python</h2>



<p>Vous ne pouvez pas accéder aux éléments d&#8217;un ensemble en faisant référence à un index, car les ensembles ne sont pas ordonnés, les éléments n&#8217;ont pas d&#8217;index. Mais vous pouvez parcourir les éléments de l&#8217;ensemble à l&#8217;aide d&#8217;une boucle for ou demander si une valeur spécifiée est présente dans un ensemble à l&#8217;aide du<strong>&nbsp;mot clé in</strong>.</p>



<h3>Exemple: affichage des éléments d&#8217;un ensemble</h3>



<pre class="wp-block-code"><code>mySet = {"Stylo", "Crayon", "Gomme"} 
for x in mySet:     
    print(x)</code></pre>



<p><em>Ce qui affiche</em>&nbsp;:<br><em>Crayon</em><br><em>Gomme</em><br><em>Stylo</em></p>



<p>Vous remarquez que chaque fois que vous faite une nouvelle exécution du programme, il y a un ordre d&#8217;affichage différent. Ce qui veut dire que l&#8217;ordre dans les ensembles Python n&#8217;a aucune importance !</p>



<h3>Exemple: vérification d&#8217;appartenance d&#8217;un élément</h3>



<pre class="wp-block-code"><code>mySet = {"Stylo", "Crayon", "Gomme"} 
print("Crayon" in mySet) # affiche : True
print("Cahier" in mySet) # affiche : False</code></pre>



<h2>3 &#8211; Longueur ou cardinal d&#8217;un ensemble Python</h2>



<p>Pour connaitre la&nbsp;<strong>longueur (cardinal)</strong>&nbsp;d&#8217;un ensemble Python, on utilise la<strong>&nbsp;méthode len()</strong></p>



<h3>Exemple: longueur d&#8217;un ensemble python</h3>



<pre class="wp-block-code"><code>mySet = {"Stylo", "Crayon", "Gomme"}
cardinal = len(mySet)
print("card(mySet) = ", cardinal)
# affiche card(mySet) =  3</code></pre>



<h2>4 &#8211; Opérations : ajouter, supprimer ou mettre à jour un ensemble Python</h2>



<h3>4.1 Ajouter un ou plusieurs éléments à un ensemble Python</h3>



<p>&#8211; Pour ajoutez un élément à un ensemble Python, on utilise la méthode add():</p>



<h3>Exemple: ajout d&#8217;un élément à un ensemble</h3>



<pre class="wp-block-code"><code>mySet = {"Stylo", "Crayon", "Gomme"}
mySet.add ("Cahier")
print(mySet)</code></pre>



<p>&#8211; On peut aussi ajouter plusieurs éléments en même temps, mais cette fois ci avec la méthode&nbsp;<strong>update():</strong></p>



<h3>Exemple : ajouter plusieurs éléments</h3>



<pre class="wp-block-code"><code>mySet = {"Stylo", "Crayon", "Gomme"}
mySet.update (&#91;"Cahier", "Cartable", "Trousse"])
print(mySet)</code></pre>



<h3>4.2 Supprimer un élément d&#8217;un ensemble Python</h3>



<p>Pour supprimer un élément d&#8217;un ensemble Python, deux choix s&#8217;offrent à vous la méthode<strong>&nbsp;remove()</strong>&nbsp;ou la méthode&nbsp;<strong>discard()</strong></p>



<h3>Exemple: supprimer&nbsp;<strong>&#8220;Crayon&#8221;</strong>&nbsp;par la méthode&nbsp;<strong>remove()</strong></h3>



<pre class="wp-block-code"><code>mySet = {"Stylo", "Crayon", "Gomme"}
mySet.remove("Crayon")
print(mySet) # affiche {'Gomme', 'Stylo'}</code></pre>



<p><strong>Remarque:</strong>&nbsp;Si l&#8217;élément à supprimer n&#8217;existe pas,<em>&nbsp;remove() générera une erreur.</em></p>



<h3>Exemple: supprimer &#8220;Crayon&#8221; par la méthode discard():</h3>



<pre class="wp-block-code"><code>mySet = {"Stylo", "Crayon", "Gomme"}
mySet.discard("Crayon")
print(mySet) # affiche {'Gomme', 'Stylo'}</code></pre>



<p><strong>Remarque:</strong>&nbsp;Contrairement à la méthode&nbsp;<strong>remove()</strong>, la méthode&nbsp;<strong>discard()</strong>&nbsp;ne génère aucune erreur lorsque l&#8217;élément à supprimer n&#8217;existe pas! L&#8217;instruction de suppression sera simplement ignorée !</p>



<p><strong>Remarque:</strong>&nbsp;vous pouvez également utiliser la méthode pop() pour supprimer un élément, mais cette méthode supprimera le dernier élément. Rappelez-vous que les ensembles ne sont pas ordonnés et vous ne saurez pas quel élément sera supprimé. La suppression est totalement aléatoire !</p>



<h3>4.3 Vider un ensemble Python</h3>



<p>&#8211; Pour vider ensemble Python, on se sert de la<strong>&nbsp;méthode clear()</strong></p>



<h3>Exemple: vider un ensemble Python</h3>



<pre class="wp-block-code"><code>mySet = {"Stylo", "Crayon", "Gomme"}
mySet.clear()
print(mySet) # affiche set{} qui veut dire un ensemble vide</code></pre>



<h3>4.4 Supprimer un ensemble</h3>



<p>Pour supprimer un ensemble Python, on utilise la<strong>&nbsp;commande del</strong></p>



<p>Exemple: supprimer un ensemble</p>



<pre class="wp-block-code"><code>mySet = {"Stylo", "Crayon", "Gomme"}
del mySet
print(mySet) 
# affiche le message d'erreur: builtins.NameError: name 'mySet' is not defined </code></pre>



<h3 id="magicparlabel-946">5&nbsp;Récapitulatif des méthodes associées à un ensemble Python</h3>



<ol id="magicparlabel-947"><li><strong>add() :&nbsp;</strong>ajoute un élément à l&#8217;ensemble</li><li><strong>clear()</strong>&nbsp;: supprime tous les éléments de l&#8217;ensemble</li><li><strong>copy()</strong>&nbsp;: retourne une copie de l&#8217;ensemble</li><li><strong>difference ()</strong>&nbsp;: retourne un ensemble contenant la différence entre deux ensembles ou plus.</li><li><strong>difference_update() :&nbsp;</strong>supprime les éléments de cet ensemble qui sont également inclus dans un autre ensemble spécifié</li><li><strong>discard() :</strong>&nbsp;supprimer l&#8217;élément spécifié</li><li><strong>intersection() :</strong>&nbsp;retourne un ensemble, qui est l&#8217;intersection de deux autres ensembles.</li><li><strong>intersection_update() :</strong>&nbsp;supprime les éléments de cet ensemble qui ne sont pas présents dans d&#8217;autres ensembles spécifiés.</li><li><strong>isdisjoint() :</strong>&nbsp;indique si deux ensembles ont une intersection ou non.</li><li><strong>issubset() :</strong>&nbsp;indique si un autre jeu contient ce jeu ou non.</li><li><strong>issuperset() :</strong>&nbsp;indique si cet ensemble contient un autre ensemble ou non.</li><li><strong>pop() :&nbsp;</strong>supprime un élément de l&#8217;ensemble</li><li><strong>remove() :</strong>&nbsp;supprime l&#8217;élément spécifié</li><li><strong>symmetric_difference() :</strong>&nbsp;retourne un ensemble avec les différences symétriques de deux ensembles</li><li><strong>symmetric_difference_update() :</strong>&nbsp;insère les différences symétriques de cet ensemble et d&#8217;un autre</li><li><strong>union() :&nbsp;</strong>retourne un ensemble contenant l&#8217;union des ensembles</li><li><strong>update() :</strong>&nbsp;met à jour l&#8217;ensemble avec l&#8217;union de cet ensemble et d&#8217;autres</li></ol>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Les dictionnaires en langage Python</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/18/les-dictionnaires-en-langage-python/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Sat, 18 Jun 2022 16:16:51 +0000</pubDate>
				<category><![CDATA[Python]]></category>
		<category><![CDATA[python]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=170</guid>

					<description><![CDATA[1 &#8211; Définir un dictionnaire en Python Un dictionnaire est une implémentation par Python d’une structure de données semblable à un tableau associatif. Un dictionnaire consiste en une collection de paires clé-valeur. Chaque paire clé-valeur fait attacher la clé à sa valeur associée. On peut définir un dictionnaire en entourant des accolades&#160;{ }&#160;une liste de&#8230;]]></description>
										<content:encoded><![CDATA[
<h2>1 &#8211; Définir un dictionnaire en Python</h2>



<p>Un dictionnaire est une implémentation par Python d’une structure de données semblable à un tableau associatif. Un dictionnaire consiste en une collection de paires clé-valeur. Chaque paire clé-valeur fait attacher la clé à sa valeur associée.</p>



<p>On peut définir un dictionnaire en entourant des accolades&nbsp;<strong>{ }</strong>&nbsp;une liste de paires<strong>&nbsp;clé-valeur</strong>&nbsp;séparées par des virgules.</p>



<h3>Syntaxe :</h3>



<pre class="wp-block-code"><code>dic = {key1: valeur1, key2: valeur2, key3: valeur3, ...}</code></pre>



<p>Pour accéder à une valeur à partir du dictionnaire, on utilise le nom du dictionnaire suivi de la clé correspondante entre crochets:</p>



<span id="more-170"></span>



<pre class="wp-block-code"><code>dic = {key1: valeur1, key2: valeur2, key3: valeur3, ...}
print(dic&#91;key1]) # affiche valeur1</code></pre>



<h3>Exemple : Annuaire téléphonique</h3>



<pre class="wp-block-code"><code>phoneBook = {"Majid":"0556683531", "Tomas":"0537773332", "Bernard":"0668793338", "Hafid":"066445566"}
print(phoneBook&#91;"Majid"]) # affiche 0556683531</code></pre>



<h2>2 &#8211; Parcourir les valeurs et les clés d&#8217;un dictionnaire Python</h2>



<p>Un dictionnaire en Python est doté d&#8217;une&nbsp;<strong>méthode</strong>&nbsp;nommée&nbsp;<strong>values()</strong>&nbsp;qui permet de parcourir&nbsp;<strong>ses valeurs</strong>, et d&#8217;une autre nommée<strong>&nbsp;keys()</strong>&nbsp;permettant de parcourir&nbsp;<strong>ses clés</strong>.</p>



<h3>Exemple : parcourt des valeurs d&#8217;un dictionnaire</h3>



<pre class="wp-block-code"><code>phoneBook={"Majid":"0556633558","Tomas":"0587958414","Bernard":"0669584758"} 
for valeur in phoneBook.values():     
    print(valeur)</code></pre>



<h3>Exemple : parcourt des clés d&#8217;un dictionnaire</h3>



<pre class="wp-block-code"><code>phoneBook={"Majid":"0556633558","Tomas":"0587958414","Bernard":"0669584758"} 
for key in phoneBook.keys():     
    print(key)</code></pre>



<h3>Remarque :</h3>



<p>On peut aussi parcourir les clés et les valeurs en même temps en passant à la méthode&nbsp;<strong>items()</strong></p>



<h3>Exemple: parcourt des clés et des valeurs</h3>



<pre class="wp-block-code"><code>phoneBook={"Majid":"0556633558","Tomas":"0587958414","Bernard":"0669584758"} 
for key , valeur in phoneBook.items():     
    print(key, valeur)</code></pre>



<h2>3 &#8211; Mettre à jour, ajouter ou supprimer des éléments d&#8217;un dictionnaire</h2>



<h3>3.1 Mettre à jour un élément du dictionnaire</h3>



<p>On peut mettre à jour un élément du dictionnaire directement en affectant une valeur à une clé:</p>



<h3>Exemple: gestionnaire d&#8217;un stock</h3>



<pre class="wp-block-code"><code>stock={"Laptop":15, "Imprimante":35,"Tablette":27}

#modification de la valeur associée à la clé "Imprimante"
stock&#91;"Imprimante"]=42
print(stock)
# affiche : {'Laptop': 15, 'Imprimante': 42, 'Tablette': 27}</code></pre>



<h3>3.2 &#8211; Ajouter un élément au dictionnaire</h3>



<p>Dans le cas d&#8217;une clé inexistante, la même méthode cité ci-dessus, permet d&#8217;ajouter des éléments au dictionnaire:</p>



<h3>Exemple: Ajouter un élément au stock</h3>



<pre class="wp-block-code"><code>stock={"Laptop":15, "Imprimante":35,"Tablette":27}

# Ajout de l'élément "Ipad":18
stock&#91;"Ipad"]=18
print(stock)
# affiche : {'Laptop': 15, 'Imprimante': 35, 'Tablette': 27, 'Ipad':18}</code></pre>



<h3>3.3 &#8211; Supprimer un élément du dictionnaire</h3>



<p>On peut supprimer un élément du dictionnaire en indiquant sa clé dans la méthode&nbsp;<strong>pop()</strong></p>



<h3>Exemple: suppression d&#8217;un élément du dictionnaire</h3>



<pre class="wp-block-code"><code>stock={'Laptop': 15, 'Imprimante': 35, 'Tablette': 27, 'Ipad':22}

# Suppression de l'élément "Imprimante": 35
stock.pop("Imprimante")
print(stock)
# affiche : {'Laptop': 15, 'Tablette': 27, 'Ipad':22}</code></pre>



<p>Un dictionnaire est doté d&#8217;une autre méthode :&nbsp;<strong>popitem()</strong>&nbsp;qui permet de supprimer le dernier élément</p>



<h3>Exemple: Suppression du dernier élément</h3>



<pre class="wp-block-code"><code>stock={'Laptop': 15, 'Imprimante': 35, 'Tablette': 27, 'Ipad':22}

# Suppression du dernier élément 
stock.popitem()
print(stock)
# affiche : {'Laptop': 15, 'Imprimante': 35, 'Tablette': 27}</code></pre>



<h3>3.4 &#8211; Vider un dictionnaire</h3>



<p>Un dictionnaire Python peut être vider à l&#8217;aide de la méthode<strong>&nbsp;clear()</strong></p>



<h3>Exemple: vider un dictionnaire</h3>



<pre class="wp-block-code"><code>stock={'Laptop': 15, 'Imprimante': 35, 'Tablette': 27, 'Ipad':22}

# vider le dictionnaire 
stock.clear()
print(stock)
# affiche un dictionnaire vide : {}</code></pre>



<h2>4 &#8211; Récapitulatif des méthodes associées à un dictionnaire</h2>



<p>Voici un récapitulatif des principales méthodes associées à un objet dictionnaire:</p>



<ol><li><strong>clear() :</strong>&nbsp;supprime tous les éléments du dictionnaire.</li><li><strong>copy() :</strong>&nbsp;retourne une copie superficielle du dictionnaire.</li><li><strong>fromkeys(seq [, v]) :</strong>&nbsp;retourne un nouveau dictionnaire avec les clés de seq et une valeur égale à v (la valeur par défaut est None).</li><li><strong>get(key [, d]) :</strong>&nbsp;retourne la valeur de key. Si la clé ne quitte pas, retourne d (la valeur par défaut est Aucune).</li><li><strong>items() :</strong>&nbsp;retourne une nouvelle vue des éléments du dictionnaire (clé, valeur).</li><li><strong>keys() :</strong>&nbsp;retourne une nouvelle vue des clés du dictionnaire.</li><li><strong>pop(key [, d]) :</strong>&nbsp;supprime l&#8217;élément avec key et renvoie sa valeur ou d si key n&#8217;est pas trouvé. Si d n&#8217;est pas fourni et que la clé est introuvable, soulève KeyError.</li><li><strong>popitem() :</strong>&nbsp;supprimer et retourner un élément arbitraire (clé, valeur). Lève KeyError si le dictionnaire est vide.</li><li><strong>setdefault(key [, d]) :</strong>&nbsp;si key est dans le dictionnaire, retourne sa valeur. Sinon, insérez la clé avec la valeur d et renvoyez d (la valeur par défaut est Aucune).</li><li><strong>update([other]) :</strong>&nbsp;met à jour le dictionnaire avec les paires clé / valeur des autres clés existantes.</li><li><strong>values() :</strong>&nbsp;retourne une nouvelle vue des valeurs du dictionnaire</li></ol>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Les tuples en langage Python</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/18/les-tuples-en-langage-python/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Sat, 18 Jun 2022 16:15:06 +0000</pubDate>
				<category><![CDATA[Python]]></category>
		<category><![CDATA[python]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=168</guid>

					<description><![CDATA[1 &#8211; Définir un tuple en Python Un&#160;tuple&#160;est une&#160;collection ordonnée&#160;et&#160;non modifiable&#160;(n-uplets en mathématiques). En Python, les tuples sont écrits avec des parenthèses. Exemple. Création d&#8217;un tuple: 2 &#8211; Accéder aux élément d&#8217;un tuple Vous pouvez accéder aux éléments d&#8217;un tuple en vous référant au numéro d’index, entre crochets: Exemple. Accéder à l&#8217;élément qui se trouve&#8230;]]></description>
										<content:encoded><![CDATA[
<h2>1 &#8211; Définir un tuple en Python</h2>



<p>Un&nbsp;<strong>tuple</strong>&nbsp;est une&nbsp;<strong>collection ordonnée</strong>&nbsp;et&nbsp;<strong>non modifiable</strong>&nbsp;(n-uplets en mathématiques). En Python, les tuples sont écrits avec des parenthèses.</p>



<h3>Exemple. Création d&#8217;un tuple:</h3>



<pre class="wp-block-code"><code>myTtuple = ("cartable", "cahier", "livre")
print(myTuple)
# Affiche : ('cartable', 'cahier', 'livre')</code></pre>



<h2>2 &#8211; Accéder aux élément d&#8217;un tuple</h2>



<p>Vous pouvez accéder aux éléments d&#8217;un tuple en vous référant au numéro d’index, entre crochets:</p>



<span id="more-168"></span>



<h3>Exemple. Accéder à l&#8217;élément qui se trouve en position 1:</h3>



<pre class="wp-block-code"><code>myTuple = ("cartable", "cahier", "livre")
print(myTuple&#91;1])
# Affiche : cahier</code></pre>



<h3>Remarque</h3>



<p>Une fois un tuple est créé, vous ne pouvez pas modifier ses valeurs. Les tuples sont immuables.</p>



<h2>3 &#8211; Boucle à travers un tuple</h2>



<p>Vous pouvez parcourir les éléments d&#8217;un tuple en utilisant une boucle for.</p>



<h3>Exemple. Parcourez les éléments et imprimez les valeurs:</h3>



<pre class="wp-block-code"><code>myTuple = ("cartable", "cahier", "livre")
for x in myTuple:   
print (x)
# Affiche tous les éléments du tuple.</code></pre>



<h2>4 &#8211; Vérifier si un élément existe dans un tuple</h2>



<p>Pour déterminer si un élément spécifié est présent dans un tuple, utilisez le mot-clé in:</p>



<p>Exemple. Vérifiez si &#8220;cartable&#8221; est présent dans le tuple:</p>



<pre class="wp-block-code"><code>myTuple = ("cartable", "cahier", "livre") 
if("cartable" in myTuple):     
    print("Oui, 'cartable' est dans  myTuple")</code></pre>



<h2>5 &#8211; Longueur d&#8217;un tuple</h2>



<p>La longueur d&#8217;un tuple désigne le nombre d&#8217;éléments qui le compose. Pour déterminer la longueur d&#8217;un tuple en Python, on utilise la méthode len():</p>



<h3>Exemple. nombre d&#8217;éléments d&#8217;un tuple:</h3>



<pre class="wp-block-code"><code>myTuple = ("cartable", "cahier", "livre")
print(len(myTuple))
# Affiche 3</code></pre>



<h2>6 &#8211; Ajout ou suppression d&#8217;éléments impossible à un tuple</h2>



<h3>Remarque</h3>



<p>Une fois qu&#8217;un tuple est créé, on ne peut lui ajouter d&#8217;éléments. Les tuples sont immuables.</p>



<h3>Exemple. Ajout d&#8217;éléments impossible à un tuple:</h3>



<pre class="wp-block-code"><code>myTuple = ("cartable", "cahier", "livre")
myTuple &#91;3] = "Stylo" # Ceci provoquera une erreur !</code></pre>



<h2>7 &#8211; Suppression d&#8217;un tuple</h2>



<p>Les tuples ne sont pas modifiables, vous ne pouvez donc pas en supprimer d&#8217;éléments, mais vous pouvez supprimer complètement le tuple à l&#8217;aide du mot clé del:</p>



<h3>Exemple. Supprimer complètement un tuple:</h3>



<pre class="wp-block-code"><code>myTuple = ("cartable", "cahier", "livre")
del myTuple
print(myTuple) #cela générera une erreur car le tuple n'existe plus</code></pre>



<h2>8 &#8211; Création d&#8217;un tuple en utilisant le constructeur tuple()</h2>



<p>Il existe une autre méthode pour créer un tuple qui consiste à utiliser le constructeur tuple().</p>



<h3>Exemple. Création d&#8217;un tuple en utilisant le constructeur tuple() :</h3>



<pre class="wp-block-code"><code>myTuple = tuple (("cartable", "cahier", "livre"))
# notez les doubles parenthèses rondes
print(myTuple)</code></pre>



<h2>9 &#8211; Méthodes associées à un tuple</h2>



<ol><li><strong>count ()&nbsp; :</strong>&nbsp;retourne le nombre de fois qu&#8217;une valeur spécifiée apparaît dans un tuple.</li><li><strong>index ()&nbsp; :</strong>&nbsp;recherche dans le tuple une valeur spécifiée et renvoie la position de l&#8217;endroit où il a été trouvé.</li></ol>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Les Listes En Langage Python</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/18/le-listes-en-langage-python/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Sat, 18 Jun 2022 16:12:43 +0000</pubDate>
				<category><![CDATA[Python]]></category>
		<category><![CDATA[python]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=166</guid>

					<description><![CDATA[1 &#8211; Création d&#8217;une liste en Python Une liste&#160; en Python est&#160; un type de données&#160; ordonnée et modifiable qui fait partie des collections . En Python, les listes sont écrites entre crochets. Exemple 2 &#8211; Accès aux éléments d&#8217;une liste. Vous accédez aux éléments d&#8217;une liste Python,&#160; en vous référant au numéro d&#8217;index: Exemple&#8230;]]></description>
										<content:encoded><![CDATA[
<h2>1 &#8211; Création d&#8217;une liste en Python</h2>



<p>Une liste&nbsp; en Python est&nbsp; un type de données&nbsp; ordonnée et modifiable qui fait partie des collections . En Python, les listes sont écrites entre crochets.</p>



<h3>Exemple</h3>



<pre class="wp-block-code"><code>#Création d'une liste
myList = &#91;"Python", "Java", "PHP"]
// Affichage de la liste
print (myList)</code></pre>



<h2>2 &#8211; Accès aux éléments d&#8217;une liste.</h2>



<p>Vous accédez aux éléments d&#8217;une liste Python,&nbsp; en vous référant au numéro d&#8217;index:</p>



<span id="more-166"></span>



<h3>Exemple</h3>



<pre class="wp-block-code"><code>Imprimer le 3ème élément de la liste:
myList = &#91;"Python", "Java", "PHP"]
print(myList&#91;2]) # Affiche 'PHP'</code></pre>



<h2>3 &#8211; Changer la valeur d&#8217;un élément de la liste</h2>



<p>Pour modifier la valeur d&#8217;un élément spécifique, reportez-vous au numéro d&#8217;index:</p>



<h3>Exemple</h3>



<p>Changer le deuxième élément:</p>



<pre class="wp-block-code"><code>myList = &#91;"Python", "Java", "PHP"]
myList&#91;1]="Oracle"
print(myList) #Affiche : &#91;'Python','Oracle','PHP']</code></pre>



<h2>4 &#8211; Parcourir les éléments d&#8217;une liste Python</h2>



<p>Vous pouvez parcourir les éléments d&#8217;une liste en Python, en utilisant une boucle for:</p>



<h3>Exemple</h3>



<pre class="wp-block-code"><code>#Imprimer tous les éléments de la liste, un par un:
myList = &#91;"Python", "Java", "PHP"]
for x in myList:
     print(x) # Affiche tous les éléments de la liste un par un.</code></pre>



<h2>5 &#8211; Longueur d&#8217;une liste Python</h2>



<p>Pour déterminer le nombre d&#8217;éléments d&#8217;une liste, utilisez la méthode len():</p>



<h3>Exemple</h3>



<pre class="wp-block-code"><code>#Imprimer le nombre d'éléments de la liste:
myList = &#91;"Python", "Java", "PHP"]
print ("La longueur de ma liste est" ,len (myList)) #Affiche : La longueur de ma liste est 3</code></pre>



<h2>6 &#8211; Ajouter des ou supprimer des éléments à la liste</h2>



<p><strong>6.1 &#8211; Ajouter un un élément à une liste Python</strong></p>



<p>Pour ajouter un élément à la fin de la liste, utilisez la méthode<strong>&nbsp;append():</strong></p>



<h3>Exemple</h3>



<pre class="wp-block-code"><code>#ajouter un élément à la liste avec la méthode append() :
myList = &#91;"Python", "Java", "PHP"]
myList.append ("Oracle")
print (myList) #Affiche : &#91;"Python", "Java", "PHP", "Oracle"]</code></pre>



<p>Pour ajouter un élément à l&#8217;index spécifié, utilisez la méthode&nbsp;<strong>insert():</strong></p>



<h2>Exemple</h2>



<pre class="wp-block-code"><code>#Insérer un élément en deuxième position:
myList = &#91;"Python", "Java", "PHP"]
myList.insert (1, "C++")
print (myList) # Affiche : &#91;"Python", "C++" "Java", "PHP"]</code></pre>



<ul><li>Il existe plusieurs méthodes pour supprimer des éléments d&#8217;une liste:</li><li>La méthode&nbsp;<strong>remove()</strong>&nbsp;supprime un élément spécifié.</li><li>La méthode&nbsp;<strong>pop()</strong>&nbsp;supprime un élément en spécifiant son index (ou le dernier élément si aucun index n&#8217;est spécifié)</li><li>Le mot clé&nbsp;<strong>del</strong>&nbsp; supprime l&#8217;élément à l&#8217;index spécifié( del permet également de supprimer complètement&nbsp; la liste)</li><li>La méthode<strong>&nbsp;clear()</strong>&nbsp;vide la liste:</li></ul>



<h3>Exemple</h3>



<pre class="wp-block-code"><code>#suppression d'un élément spécifié avec la méthode remove()
myList = &#91;"Python", "Java", "PHP"]
myList.remove ("Java")
print (myList) #Affiche: &#91;"Python", "PHP"]</code></pre>



<h3>Exemple</h3>



<pre class="wp-block-code"><code>#Suppression d'un élément d'index spécifié avec la méthode pop()
myList = &#91;"Python", "Java", "PHP"]
myList.pop(0)
print (myList) #Affiche : &#91;"Java", "PHP"]</code></pre>



<h3>Exemple</h3>



<pre class="wp-block-code"><code>#suppression d'élément à un index spécifié avec la méthode del :
myList = &#91;"Python", "Java", "PHP"]
del myList&#91;1]
print (myList) #Affiche : &#91;"Python", "PHP"]</code></pre>



<p>Le mot clé<strong>&nbsp;del</strong>&nbsp;peut également&nbsp;<strong>supprimer</strong>&nbsp;complètement la liste:</p>



<h3>Exemple</h3>



<pre class="wp-block-code"><code>myList = &#91;"Python", "Java", "PHP"]
del myList
print (myList) #cela causera une erreur car "myList" n'existe plus.</code></pre>



<h3>Exemple</h3>



<pre class="wp-block-code"><code>myList = &#91;"Python", "Java", "PHP"]
myList.clear ()
print (myList) #cela causera une erreur car "myList" n'existe plus.</code></pre>



<h2>7 &#8211; Les différente méthodes destinées aux listes Python</h2>



<p>Python a un ensemble de méthodes intégrées que vous pouvez utiliser sur des listes.</p>



<p><strong>append()</strong>&nbsp; &nbsp;Ajoute un élément à la fin de la liste<br><strong>clear()</strong>&nbsp; &nbsp;Supprime tous les éléments de la liste<br><strong>copy()</strong>&nbsp; &nbsp;Retourne une copie de la liste<br><strong>count()</strong>&nbsp; &nbsp;Retourne le nombre d&#8217;éléments avec la valeur spécifiée<br><strong>extend()</strong>&nbsp; &nbsp;Ajoute les éléments d&#8217;une liste (ou de tout élément itérable) à la fin de la liste actuelle<br><strong>index()</strong>&nbsp; &nbsp;Retourne l&#8217;index du premier élément avec la valeur spécifiée.<br><strong>insert()</strong>&nbsp; &nbsp;Ajoute un élément à la position spécifiée<br><strong>pop()</strong>&nbsp; &nbsp;Supprime l&#8217;élément à la position spécifiée<br><strong>remove()</strong>&nbsp; &nbsp;Supprime l&#8217;élément avec la valeur spécifiée<br><strong>reverse()</strong>&nbsp; &nbsp;Inverse l&#8217;ordre de la liste<br><strong>sort()</strong>&nbsp; &nbsp;Trie la liste</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Formatage des chaines de caractères en Python</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/18/formatage-des-chaines-de-caracteres-en-python/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Sat, 18 Jun 2022 16:11:12 +0000</pubDate>
				<category><![CDATA[Python]]></category>
		<category><![CDATA[python]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=164</guid>

					<description><![CDATA[1 &#8211; La méthode String format() en Python Un exemple de méthode de formatage simple qui formate la chaîne à l&#8217;aide d&#8217;un délimiteur de position. Exemple: Ce qui affiche après exécution:Je m&#8217;appelle Albert je suis enseignant de mathématiques Remarque on peux changer l&#8217;ordre à condition de mettre des indices. Exemple: échanger d&#8217;ordre 2 &#8211; La&#8230;]]></description>
										<content:encoded><![CDATA[<div class="wp-block-image">
<figure class="aligncenter"><img src="https://www.tresfacile.net/wp-content/uploads/2020/03/python-string-formatting-formatage-string-python.png" alt="" class="wp-image-6732"/></figure></div>


<h2>1 &#8211; La méthode String format() en Python</h2>



<p>Un exemple de méthode de formatage simple qui formate la chaîne à l&#8217;aide d&#8217;un délimiteur de position.</p>



<h4>Exemple:</h4>



<pre class="wp-block-code"><code>nom = "Albert"
job = "enseignant"
s = "Je m'appelle {} je suis {} de mathématiques".format(nom,job)
print(s)</code></pre>



<p>Ce qui affiche après exécution:<br><em>Je m&#8217;appelle Albert je suis enseignant de mathématiques</em></p>



<h4>Remarque</h4>



<p>on peux changer l&#8217;ordre à condition de mettre des indices.</p>



<span id="more-164"></span>



<h4>Exemple: échanger d&#8217;ordre</h4>



<pre class="wp-block-code"><code># -*- coding: utf-8 -*-
nom = "Albert"
job = "enseignant"
s = "Je m'appelle {1} je suis {0} de mathématiques".format(job,nom)
print(s)</code></pre>



<h2>2 &#8211; La méthode format() avec conversion du type de donnée.</h2>



<p>La méthode&nbsp;<strong>format</strong>() peut jouer aussi le rôle d&#8217;un&nbsp;<strong>convertisseur&nbsp;</strong>de<strong>&nbsp;données</strong>&nbsp;d&#8217;un type à un autre à. Il suffit pour cela de choisir le type auquel on veux convertir et le mettre au sein des accolades:</p>



<h4>Exemple:</h4>



<pre class="wp-block-code"><code># -*- coding: utf-8 -*-
var = 26
print("La valeur décimale est : {0:d}".format(var))
print("La valeur hexadecimale est : {0:x}".format(var))
print("La valeur octale est : {0:o}".format(var))
print("La valeur binaire est : {0:b}".format(var))</code></pre>



<p>Ce qui affiche après exécution:<br><em>La valeur décimale est : 26</em><br><em>La valeur hexadecimale est : 1a</em><br><em>La valeur octale est : 32</em><br><em>La valeur binaire est : 11010</em></p>



<h2>3 &#8211; Formatage à l&#8217;aide du symbole %</h2>



<p>Exemple: formatage à l&#8217;aide du symbole %</p>



<pre class="wp-block-code"><code># -*- coding: utf-8 -*-
nom = "Albert"
job = "enseignant"
"Je m'appelle %s je suis %s de mathématiques" % (nom,job)</code></pre>



<p>Ce qui affiche à l&#8217;exécution:<br><em>Je m&#8217;appelle Albert je suis enseignant de mathématiques</em></p>



<h4>NB:</h4>



<p><strong>%s</strong>&nbsp;veut dire &#8216;la&nbsp;<strong>conversion</strong>&nbsp;de la&nbsp;<strong>variable</strong>&nbsp;en<strong>&nbsp;string</strong>&#8216;. Ainsi, il y a d’autres syntaxe pour les différents types de variables:</p>



<ol><li><strong>%d</strong>&nbsp;pour convertir la variable en<strong>&nbsp;int().</strong></li><li><strong>%f</strong>&nbsp;pour convertir la variable en<strong>&nbsp;float().</strong></li><li><strong>%x</strong>&nbsp;pour convertir la variable en&nbsp;<strong>hex()</strong></li><li>etc</li></ol>



<h4>Exemple:</h4>



<pre class="wp-block-code"><code># -*- coding: utf-8 -*-
nom = "Albert"
job = "enseignant"
age = 30
s = "Je m'appelle %s je suis un %s de mathématiques. J'ai %f ans" % (nom,job,age)
print(s)</code></pre>



<p>Cette fois-ci à l&#8217;exécution, on constate réellement la conversion de la variable <strong>age</strong> en<strong> flot</strong>:<br><em>Je m&#8217;appelle Albert je suis enseignant de mathématiques. J&#8217;ai 30.000000 an</em>s</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Les boucles While, for en Python</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/18/les-boucles-while-for-en-python/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Sat, 18 Jun 2022 04:40:11 +0000</pubDate>
				<category><![CDATA[Python]]></category>
		<category><![CDATA[python]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=150</guid>

					<description><![CDATA[1 &#8211; La structure répétitive For &#8230; Sytaxe: Exemple. affichage des 10 premiers nombres Remarque&#160;. Noter que dans la&#160;boucle for&#160;i&#160;in range(1,n)&#160;le dernier qui est&#160;n&#160;n&#8217;est pas inclus ! Cela veut dire que la boucle s&#8217;arrête à l&#8217;ordre&#160;n-1. 2- La structure répétitive While La structure while permet d&#8217;exécuter un ensemble d&#8217;instructions tant qu&#8217;une condition est réalisée et&#8230;]]></description>
										<content:encoded><![CDATA[
<h2>1 &#8211; La structure répétitive For &#8230;</h2>



<p><strong>Sytaxe</strong>:</p>



<pre class="wp-block-code"><code># -*- coding: utf-8 -*-
for compteur in range(début_compteur, fin_compteur):
    instructions...</code></pre>



<h3>Exemple. affichage des 10 premiers nombres</h3>



<pre class="wp-block-code"><code># -*- coding: utf-8 -*-
for i in range(1,11):
    print(i)
#affiche les 10 premiers nombres 1 , 2 , ..., 10</code></pre>



<span id="more-150"></span>



<p><strong>Remarque</strong>&nbsp;. Noter que dans la&nbsp;<strong>boucle for&nbsp;i&nbsp;in range(1,n)</strong>&nbsp;le dernier qui est&nbsp;<strong>n</strong>&nbsp;n&#8217;est pas inclus ! Cela veut dire que la boucle s&#8217;arrête à l&#8217;ordre&nbsp;<strong>n-1</strong>.</p>



<h2>2- La structure répétitive While</h2>



<p><br><br><br><br>La structure while permet d&#8217;exécuter un ensemble d&#8217;instructions tant qu&#8217;une condition est réalisée et que l&#8217;exécution s&#8217;arrête lorsque la condition n&#8217;est plus satisfaite.</p>



<p><strong>Sytaxe</strong>:</p>



<pre class="wp-block-code"><code>while ( condition ):
      intructions...</code></pre>



<p><strong>Exemple</strong>. affichage des 10 premiers entiers avec la boucle while</p>



<pre class="wp-block-code"><code>i = 1
while (i &lt; = 10):
      print(i)
      i = i + 1</code></pre>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
