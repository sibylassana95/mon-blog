<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Java &#8211; SIBY INFORMATIQUE</title>
	<atom:link href="https://sibylassana95.github.io/mon-blog/category/java/feed/" rel="self" type="application/rss+xml" />
	<link>https://sibylassana95.github.io/mon-blog</link>
	<description>Astuce - Cours - Actualité</description>
	<lastBuildDate>Tue, 21 Jun 2022 03:00:13 +0000</lastBuildDate>
	<language>fr-FR</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.0</generator>

<image>
	<url>https://sibylassana95.github.io/mon-blog/wp-content/uploads/2022/06/cropped-sibyglobal-32x32.jpg</url>
	<title>Java &#8211; SIBY INFORMATIQUE</title>
	<link>https://sibylassana95.github.io/mon-blog</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>Java IO- Gestion des fichiers en Java</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/18/java-io-gestion-des-fichiers-en-java/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Sat, 18 Jun 2022 18:13:54 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[java]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=312</guid>

					<description><![CDATA[1 &#8211; La classe File Java La&#160;classe File Java&#160; permet de gérer les fichiers, les noms de chemins de fichiers et de répertoires de manière abstraite. Cette classe est utilisée pour la création de fichiers et de répertoires, la recherche de fichiers, la suppression de fichiers, etc. Nous verrons plus loin dans les&#160; prochains tutoriels&#8230;]]></description>
										<content:encoded><![CDATA[<div class="wp-block-image">
<figure class="aligncenter"><img src="https://www.tresfacile.net/wp-content/uploads/2018/12/Gestion-des-fichier-en-java-io.png" alt="" class="wp-image-5678"/></figure></div>


<h2>1 &#8211; La classe File Java</h2>



<p>La&nbsp;<strong>classe File Java</strong>&nbsp; permet de gérer les fichiers, les noms de chemins de fichiers et de répertoires de manière abstraite. Cette classe est utilisée pour la création de fichiers et de répertoires, la recherche de fichiers, la suppression de fichiers, etc. Nous verrons plus loin dans les&nbsp; prochains tutoriels que de nombreuses méthodes sont associées à cette classe.</p>



<span id="more-312"></span>



<p>Dans ce tutoriel, nous verrons comment créer un fichier en Java à l&rsquo;aide de&nbsp; la classe<em><strong>&nbsp;File</strong></em>&nbsp;et la méthode&nbsp;&nbsp;<em><strong>createNewFile()</strong></em>. Cette méthode crée un fichier vide, s’il n’existe pas à l’emplacement spécifié et renvoie&nbsp;<strong>true</strong>. Si le fichier est déjà présent, cette méthode renvoie<strong>&nbsp;false</strong>.</p>



<p><strong>IOException</strong>&nbsp;: Si une erreur d&rsquo;entrée / sortie survient lors de la création du fichier.<br><strong>SecurityException</strong>&nbsp;: Si un gestionnaire de sécurité existe et que sa méthode&nbsp;<em>SecurityManager.checkWrite (java.lang.String)</em>&nbsp;refuse l&rsquo;accès en écriture au fichier.</p>



<p>Pour faire simple, nous allons essayer de créer un&nbsp; simple fichier texte sur le bureau. Pour ce faire :</p>



<ol><li>On doit préalablement importer les bibliothèques&nbsp;<strong>File</strong>&nbsp;et<strong>&nbsp;IOException</strong>&nbsp;qui se trouvent dans le<strong>&nbsp;package java.io</strong></li><li>On fait une instanciation sur la&nbsp;<strong>classe File</strong>&nbsp;pour créer un nouveau&nbsp;<strong>objet myFile</strong>&nbsp;du type&nbsp;<strong>file</strong></li><li>On crée le fichier avec la méthode&nbsp;<strong>&nbsp;createNewFile() ( myFile.createNewFile() )</strong></li></ol>



<h2>2 &#8211; Création d&rsquo;un fichier avec la classe File Java</h2>



<p>Le code ci-dessous créerait un fichier txt nommé&nbsp;&nbsp;<strong>newfile.txt</strong>&nbsp;dans le<strong>&nbsp;bureau</strong>&nbsp;de l&rsquo;<strong>utilisateur acer</strong>. Vous pouvez modifier le chemin dans le code ci-dessous afin de créer le fichier dans un répertoire ou un lecteur différent.</p>



<pre class="wp-block-code"><code>import java.io.File;
import java.io.IOException;

public class NewFile
{
   public static void main( String&#91;] args )
   {
	   try {
		     File myFile = new File("C:/Users/acer/Desktop/newFile.txt");
		     /* Si le fichier est créé, alors la méthode createNewFile() renverrait 
		      true et  si le fichier est déjà présent il retournerait faux */
		     
	             boolean varF = myFile.createNewFile();
		     if (varF){
		          System.out.println("Fichier crée avec succés");
		     }
		     else{
		          System.out.println("Le fichier existe déjà");
		     }
	    	} catch (IOException e) {
	    		System.out.println("Exception Occurred:");
		        e.printStackTrace();
		  }

   }
}</code></pre>



<h2>3 &#8211; Ecrire dans un fichier existant à l&rsquo;aide de la classe&nbsp; FileWriter</h2>



<p>La classe FileWriter permet d&rsquo;ouvrir un flux d&rsquo;écriture sur un fichier via son constructeur&nbsp; :</p>



<pre class="wp-block-code"><code>FileWriter( String nom_du_fichier, boolean append )</code></pre>



<ol><li>Si la valeur du boolean append est mis à false, le contenu du fichier sera écrasé par le nouveau contenu</li><li>Si la valeur du boolean append est mis à true, le nouveau contenu sera ajouté à l&rsquo;ancien</li></ol>



<p><strong>Exemple</strong></p>



<pre class="wp-block-code"><code>	try
	{
	    String filename= "C:/Users/acer/Desktop/newFile.txt";
	    FileWriter fw = new FileWriter(filename,true); 
		//la valeur true entraine l'ajout du nouveau contenu à l'ancien
	    fw.write("Voici le contenu qui va être ajouté au fichier ");//appends the string to the file
	    fw.close();
	}
	catch(IOException ioe)
	{
	    System.err.println("IOException: " + ioe.getMessage());
	}
}</code></pre>



<h2>4 &#8211; Supprimer un fichier existant avec la méthode delete()</h2>



<p>Pour supprimer un fichier existant en Java, il suffit d&rsquo;instancier la classe&nbsp;<strong>FileWriter</strong>&nbsp;et pointer vers le fichier, et appliquer ensuite la méthode&nbsp;<strong>delete()</strong>&nbsp;à l&rsquo;objet :</p>



<pre class="wp-block-code"><code>String filename= "C:/Users/acer/Desktop/newFile.txt";
File myFile = new File(filename); 
myFile.delete();</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Connexion Java avec MySql Database</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/18/connxion-java-avec-mysql-database/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Sat, 18 Jun 2022 18:12:58 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[java]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=310</guid>

					<description><![CDATA[Nous allons vous présenter un guide complet&#160; étape par étape pour créer une connexion Java avec une base de donnée MySql en utilisant l&#8217;IDE Eclipse et le driver JBDC pour MySql. 1 &#8211; Créer un projet Eclipse Un projet dans Eclipse est essentiellement un dossier contenant tout le code source et d’autres fichiers nécessaires.construisez votre&#8230;]]></description>
										<content:encoded><![CDATA[
<figure class="wp-block-image"><img src="https://www.tresfacile.net/wp-content/uploads/2018/12/mysql-connector-java-mysql-jdbc-driver.png" alt=""/></figure>



<figure class="wp-block-image"><img src="http://www.tresfacile.net/wp-content/uploads/2018/12/mysql-connector-java-mysql-jdbc-driver.png" alt="mysql-connector-java-mysql-jdbc-driver" class="wp-image-5666"/></figure>



<p>Nous allons vous présenter un guide complet&nbsp; étape par étape pour créer une connexion Java avec une base de donnée MySql en utilisant l&rsquo;IDE Eclipse et le driver JBDC pour MySql.</p>



<span id="more-310"></span>



<h2>1 &#8211; Créer un projet Eclipse</h2>



<p>Un projet dans Eclipse est essentiellement un dossier contenant tout le code source et d’autres fichiers nécessaires.<br>construisez votre programme. Commençons par créer un projet pour votre programme.</p>



<p><em><strong>1. Ouvrez Eclipse</strong></em><br><em><strong>2. Dans le menu Fichier, sélectionnez&nbsp; New → Java Project</strong></em></p>


<div class="wp-block-image">
<figure class="aligncenter"><a href="http://www.tresfacile.net/wp-content/uploads/2018/12/1-mysql-java-jdbc-newJava-project.png"><img src="http://www.tresfacile.net/wp-content/uploads/2018/12/1-mysql-java-jdbc-newJava-project.png" alt="1-mysql-java-jdbc-newJava-project" class="wp-image-5620"/></a></figure></div>


<p><em><strong>3. Donnez un nom à votre projet, par exemple DBDemo.</strong></em><br>Vous pouvez utiliser les valeurs par défaut pour tous les autres paramètres. Notez le dossier du projet, vous devrez vous en souvenir plus tard.</p>


<div class="wp-block-image">
<figure class="aligncenter"><a href="http://www.tresfacile.net/wp-content/uploads/2018/12/2-demo-db-java-mysql-connector-jdbc.png"><img src="http://www.tresfacile.net/wp-content/uploads/2018/12/2-demo-db-java-mysql-connector-jdbc-300x290.png" alt="2-demo-db-java-mysql-connector-jdbc" class="wp-image-5621"/></a></figure></div>


<p>Cliquez ensuite sur le bouton Finish, pour créer le projet. Vous devriez à ce moment là voir un projet Java vide qui ressemble à ceux-ci :</p>


<div class="wp-block-image">
<figure class="aligncenter"><a href="http://www.tresfacile.net/wp-content/uploads/2018/12/3-demo-db-Java-mysql-connector-jdbc-driver-eclipse.png"><img src="http://www.tresfacile.net/wp-content/uploads/2018/12/3-demo-db-Java-mysql-connector-jdbc-driver-eclipse.png" alt="3-demo-db-Java-mysql-connector-jdbc-driver-eclipse" class="wp-image-5623"/></a></figure></div>


<p><em><strong>4 &#8211; Créer&nbsp; un package et une classe Java</strong></em></p>



<p>Choisissez depuis le menu&nbsp;&nbsp;<strong>File&nbsp; -&gt;New -&gt;package</strong></p>



<p>et puis donnez un nom à votre package&nbsp;&nbsp;<strong>demojdbc</strong>&nbsp;par exemple</p>



<p>Choisissez ensuite depuis le menu&nbsp;&nbsp;<strong>File&nbsp; -&gt;New -&gt;Class</strong></p>


<div class="wp-block-image">
<figure class="aligncenter"><a href="http://www.tresfacile.net/wp-content/uploads/2018/12/5-mysql-java-jdbc-newJava-class-1.png"><img src="http://www.tresfacile.net/wp-content/uploads/2018/12/5-mysql-java-jdbc-newJava-class-1.png" alt="5-mysql-java-jdbc-newJava-class" class="wp-image-5626"/></a></figure></div>


<p>Donnez ensuite un nom à la classe&nbsp;&nbsp;<strong>DemoJdbc</strong>&nbsp;par exemple. Vous obtenez un projet de ce type :</p>


<div class="wp-block-image">
<figure class="aligncenter"><a href="http://www.tresfacile.net/wp-content/uploads/2018/12/6-mysql-java-jdbc-newJava-class-1.png"><img src="http://www.tresfacile.net/wp-content/uploads/2018/12/6-mysql-java-jdbc-newJava-class-1-300x135.png" alt="6-mysql-java-jdbc-newJava-class" class="wp-image-5630"/></a></figure></div>


<h2>2 &#8211; Téléchargement et installation du driver JDBC pour mysql</h2>



<h3>2.1 &#8211; Téléchargement du driver JDBC pour mysql</h3>



<p>Pour pouvoir connecter Java avec mysql, il nécessaire, télécharger et installer mysql connector for Java. Ce dernier est téléchargeable depuis l&rsquo;adesse:&nbsp;&nbsp;<a href="https://dev.mysql.com/downloads/file/?id=480091">https://dev.mysql.com/downloads/file/?id=480091</a></p>


<div class="wp-block-image">
<figure class="aligncenter"><img src="http://www.tresfacile.net/wp-content/uploads/2018/12/downlod-mysql-connector-java-300x130.png" alt="downlod-mysql-connector-java" class="wp-image-5632"/></figure></div>


<p>Cette page, vous invite à créer un compte et à vous connecter. Mais vous pouvez surpasser cette étape en cliquent sur le lien en bas :</p>



<p><strong><a href="https://dev.mysql.com/get/Downloads/Connector-J/mysql-connector-java-5.1.47.zip">No thanks, just start my download</a></strong></p>



<p>Après avoir télécharger l&rsquo;archive, décompressez la et vous allez trouver à l&rsquo;intérieur un fichier jar nommé :&nbsp;<em><strong>mysql-connector-java-5.1.47-bin.jar :</strong></em></p>


<div class="wp-block-image">
<figure class="aligncenter"><a href="http://www.tresfacile.net/wp-content/uploads/2018/12/mysql-connector-jar-file-bin.png"><img src="http://www.tresfacile.net/wp-content/uploads/2018/12/mysql-connector-jar-file-bin.png" alt="mysql-connector-jar-file-bin" class="wp-image-5635"/></a></figure></div>


<p>Sélectionnez votre projet sur Eclipse, et cliquez sur&nbsp; le menu&nbsp;<strong>File&nbsp; -&gt;New -&gt; Folder,</strong>&nbsp;pour créez un nouveau dossier, donnez le un nom&nbsp;<strong>lib</strong>&nbsp; par exemple :</p>


<div class="wp-block-image">
<figure class="aligncenter"><a href="http://www.tresfacile.net/wp-content/uploads/2018/12/mysql-connector-jar-file-bin-lib-folder.png"><img src="http://www.tresfacile.net/wp-content/uploads/2018/12/mysql-connector-jar-file-bin-lib-folder-300x144.png" alt="mysql-connector-jar-file-bin-lib-folder" class="wp-image-5638"/></a></figure></div>


<p>Maintenant à l&rsquo;aide de la sourie, faite un&nbsp;<em><strong>click droit sur le dossier lib</strong></em>&nbsp;et pointez sur&nbsp;<em><strong>le menu import:</strong></em></p>


<div class="wp-block-image">
<figure class="aligncenter"><a href="http://www.tresfacile.net/wp-content/uploads/2018/12/mysql-connector-for-java-click-droit-import.png"><img src="http://www.tresfacile.net/wp-content/uploads/2018/12/mysql-connector-for-java-click-droit-import-300x162.png" alt="mysql-connector-for-java-click-droit-import" class="wp-image-5642"/></a></figure></div>


<p>Ensuite depuis le menu General, choisissez le sous menu File System:</p>


<div class="wp-block-image">
<figure class="aligncenter"><a href="http://www.tresfacile.net/wp-content/uploads/2018/12/mysql-connector-for-java-import-general-system-files.png"><img src="http://www.tresfacile.net/wp-content/uploads/2018/12/mysql-connector-for-java-import-general-system-files-300x238.png" alt="mysql-connector-for-java-import-general-system-files" class="wp-image-5643"/></a></figure></div>


<p>Continuez ensuite votre navigation jusqu&rsquo;à ce que vous trouviez le fichier&nbsp;&nbsp;<em><strong>mysql-connector-java-5.1.47-bin.jar</strong></em>&nbsp; , séléctionnez le et cliquez sur le bouton&nbsp;<em><strong>Finish:</strong></em></p>


<div class="wp-block-image">
<figure class="aligncenter"><a href="http://www.tresfacile.net/wp-content/uploads/2018/12/mysql-connector-java-jar-select.png"><img src="http://www.tresfacile.net/wp-content/uploads/2018/12/mysql-connector-java-jar-select-300x236.png" alt="mysql-connector-java-jar-select" class="wp-image-5645"/></a></figure></div>


<p>Le fichier est maintenant visible sur l&rsquo;explorateur de fichier d&rsquo;Eclipse :</p>


<div class="wp-block-image">
<figure class="aligncenter"><a href="http://www.tresfacile.net/wp-content/uploads/2018/12/mysql-connector-for-java-lib-jar.png"><img src="http://www.tresfacile.net/wp-content/uploads/2018/12/mysql-connector-for-java-lib-jar-300x158.png" alt="mysql-connector-for-java-lib-jar" class="wp-image-5648"/></a></figure></div>


<p>Veuillez ensuite informer Eclipse du fichier&nbsp; :&nbsp;<em><strong>mysql-connector-java-5.1.47-bin.jar</strong></em>, afin de le prendre en compte :</p>



<p>A l&rsquo;aide du bouton droit de la sourie sur le&nbsp;<em><strong>dossier lib</strong></em>&nbsp;de votre projet Eclipse, cliquez sur&nbsp;<em><strong>Properties&nbsp;&nbsp;</strong></em>et choisissez ensuite le menu&nbsp;<em><strong>Java Build Path:</strong></em></p>


<div class="wp-block-image">
<figure class="aligncenter"><a href="http://www.tresfacile.net/wp-content/uploads/2018/12/mysql-connector-for-java-library-add-jar.png"><img src="http://www.tresfacile.net/wp-content/uploads/2018/12/mysql-connector-for-java-library-add-jar-300x186.png" alt="mysql-connector-for-java-library-add-jar" class="wp-image-5650"/></a></figure></div>


<p>Sélectionnez ensuite l&rsquo;archive jar qui se trouve dans le dossier&nbsp; lib du projet Eclipse :</p>


<div class="wp-block-image">
<figure class="aligncenter"><a href="http://www.tresfacile.net/wp-content/uploads/2018/12/mysql-connector-java-jar-selection.png"><img src="http://www.tresfacile.net/wp-content/uploads/2018/12/mysql-connector-java-jar-selection-300x229.png" alt="mysql-connector-java-jar-selection" class="wp-image-5652"/></a></figure></div>


<p>Si les étapes sont correctement exécutés vous devriez voir l&rsquo;archive jar dans&nbsp;<em><strong>Referenced Librairies:</strong></em></p>


<div class="wp-block-image">
<figure class="aligncenter"><a href="http://www.tresfacile.net/wp-content/uploads/2018/12/mysql-connector-java-jar-referenced-librairies.png"><img src="http://www.tresfacile.net/wp-content/uploads/2018/12/mysql-connector-java-jar-referenced-librairies-300x176.png" alt="mysql-connector-java-jar-referenced-librairies" class="wp-image-5654"/></a></figure></div>


<h2>3 &#8211; Connexion de Java avec Mysql en utilisant le driver JDBC</h2>



<h3>3.1 &#8211; Lecture et affichage des données</h3>



<p>Afin de pouvoir créer un test de connexion&nbsp; de Java avec MySql, il va falloir installer un serveur MySql. Plusieurs choix s&rsquo;offrent à vous WampServer , xampp, EasyPHP&#8230;Nous vous recommandons pour cela d&rsquo;utiliser&nbsp;<a href="http://www.wampserver.com/">WampServer.</a></p>



<p>Voici un&nbsp;<a href="https://www.youtube.com/watch?v=Itypcitcs4Y&amp;list=PLh-rUZWaw76Fr1h-DQhlpd-cqIiwdJVlh" target="_blank" rel="noreferrer noopener">&nbsp;tutoriel&nbsp;</a>vidéo qui vous explique comment utiliser wampserver. Commencez par lancer votre serveur&nbsp; et&nbsp; créez ensuite une base de donnée, nommez la&nbsp;<em><strong>school</strong></em>&nbsp;par exemple et au sein de laquelle créer une table MySql comportant les champs :&nbsp;<em><strong>&nbsp;id,&nbsp; nom, email, age</strong></em>&#8230; nommez la&nbsp;<em><strong>students</strong></em>&nbsp;par exemple :</p>


<div class="wp-block-image">
<figure class="aligncenter"><img src="http://www.tresfacile.net/wp-content/uploads/2018/12/mysql-connector-for-java-base-de-donnees-mysql.png" alt="mysql-connector-for-java-base-de-donnees-mysql" class="wp-image-5658"/></figure></div>


<p>Maintenant, tout est près, vous pouvez&nbsp; donc commencer à communique le langage Java avec les bases de données MySql. Pour cela&nbsp; veuillez suivre les étapes suivantes :</p>



<p><strong>1 &#8211; Charger le driver mysql&nbsp;</strong></p>



<pre class="wp-block-code"><code>Class.forName("com.mysql.jdbc.Driver");</code></pre>



<p><strong>2 &#8211; Créer un objet connection en utilisant la classe Connection:</strong></p>



<pre class="wp-block-code"><code>Connection con=DriverManager.getConnection("jdbc:mysql://localhost/school","root","");</code></pre>



<p><strong>3 &#8211; Créer un&nbsp; état de connexion&nbsp;</strong></p>



<pre class="wp-block-code"><code>Statement stm=con.createStatement();</code></pre>



<p><strong>4 &#8211; Créer et exécuter une requete&nbsp; sql&nbsp; en utilisant la classe&nbsp; ResultSet&nbsp;</strong></p>



<pre class="wp-block-code"><code>ResultSet res=stm.executeQuery("select * from students");</code></pre>



<p><strong>5 &#8211; parcourir les données de la table res &nbsp; &nbsp;</strong></p>



<p>Les données sont maintenant récupérées sur l&rsquo;objet&nbsp;<em><strong>res</strong></em>&nbsp;pour accéder à la valeur d&rsquo;un champ on utilise les méthodes&nbsp;<strong>getInt(numéro de la colonne), getDouble(numéro de la colonne), getString(&nbsp;numéro de la colonne)&#8230;&nbsp;</strong>selon le type du champ de la table<strong>&nbsp;( int, double, String&#8230;).</strong></p>



<p><strong>Exemple pour la 2ème colonne</strong>&nbsp;qui contient les noms du type<em><strong>&nbsp;String</strong></em>&nbsp;on utilise la syntaxe :</p>



<pre class="wp-block-code"><code>res.getString(2);</code></pre>



<p>Et afin de parcourir les données successivement une après l&rsquo;autre du début de la sélection jusqu&rsquo;à la fin de la sélection, on utilise la boucle while :</p>



<pre class="wp-block-code"><code>while (res.next()){ 
	System.out.println("id :"+res.getInt(1)+"   nom : "+res.getString(2) 
//Cet exemple affiche les données de la 1ère colonne et les données de la 2ème colonne
}</code></pre>



<p><strong>6 &#8211; Fermer la connection</strong></p>



<pre class="wp-block-code"><code>con.close(); </code></pre>



<p>Finalement pour que le code fonctionne correctement sans aucun problème, il doit être encadré dans un&nbsp;<em><strong>try-catch</strong></em>:</p>



<p><strong>Exemple avec code complet</strong></p>



<pre class="wp-block-code"><code>import java.sql.*;
public class DemoJdbc {
	   public  static  void main (String&#91;] args) {
		    try{
		        // 1 - charger le driver mysql
		        Class.forName("com.mysql.jdbc.Driver");
		        // 2 - créer la connection
		        Connection con=DriverManager.getConnection("jdbc:mysql://localhost/school","root","");
		        // 3 - créer un état de connexion
		        Statement stm=con.createStatement();
		        // 4 - Créer et exécuter une requette
		        ResultSet res=stm.executeQuery("select * from students");
		        // 5 - parcour les données de la table res
		       while (res.next()){
		            System.out.println("id :"+res.getInt(1)+"   nom : "+res.getString(2) +"     Email : "+ res.getString(3));
		            System.out.println("-----------------------------------------------");
		        }  
		    //  6 - Fermer la connection
		      con.close();
		    // 7..traitement des exeption
		        }catch (Exception e) {
		            System.out.println("ERROR :"+e.getMessage());
		        }

		        }

}</code></pre>



<p><em><strong>Ce qui affiche après exécution :</strong></em></p>



<p>id :1 nom : David Email : david@gmail.com<br>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;<br>id :2 nom : Jessica Email : Jessica@gmail.com<br>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;<br>id :3 nom : Robert Email : robert@gmail.com<br>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;<br>id :4 nom : Alberto Email : Albert@gmail.com<br>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;<br>id :5 nom : Paul Email : Paul@gmail.com<br>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;<br>id :6 nom : Hilbert Email : Hilbert@gmail.com<br>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;<br>id :7 nom : Catherine Email : catherine@gmail.com<br>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;<br>id :8 nom : Jonathan Email : Jonathan@gmail.com<br>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;<br>id :9 nom : Orlando Email : orlando@gmail.com<br>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;<br>id :10 nom : Tobias Email : tobias@gmail.com<br>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;<br>id :11 nom : Martin Email : martin@gmail.com<br>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;<br>id :12 nom : Bernard Email : bernard@gmail.com<br>&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;</p>



<h3>3.2 &#8211; Insertion des donnée</h3>



<p>Pour insérer des données mysql avec Java, on procède de la même manière que précédemment avec une toute petite modification, oon remplace juste le code de sélection de la table par une requête d&rsquo;insertion des données:</p>



<pre class="wp-block-code"><code>String query = "INSERT INTO students (`name` , `email`) " + "VALUES ( 'Robert', 'robert@gmail.com')";
	   stm.executeUpdate(query);</code></pre>



<h4>Code final</h4>



<pre class="wp-block-code"><code>import java.sql.*;
public class AddStudents {

	public static void main(String&#91;] args) {
		try{
	        // 1 - charger le driver mysql
	        Class.forName("com.mysql.jdbc.Driver");
	        // 2 - créer la connection
	        //:3306/Peoples?autoReconnect=true&amp;useSSL=false
	        Connection con=DriverManager.getConnection("jdbc:mysql://localhost/mydatabase?&amp;useSSL=false","root","root");
	        // 3 - créer un état de connexion
	        Statement stm=con.createStatement();
	        // 4 - Créer et exécuter une requette
	        String query = "INSERT INTO students (`name` , `email`) " + "VALUES ( 'Robert', 'robert@gmail.com')";
	        stm.executeUpdate(query);
	        // 5 - parcourir les données de la table 
	       /* 
	       while (res.next()){
	            System.out.println("id :"+res.getInt(1)+"   nom : "+res.getString(2) +"     Email : "+ res.getString(3));
	            System.out.println("-----------------------------------------------");
	        } 
	        */ 
	    //  6 - Fermer la connection
	      con.close();
	    // 7..traitement des exeption
	        }catch (Exception e) {
	            System.out.println("ERROR :"+e.getMessage());
	        }

	}

}</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Interface graphique avec WindowBuilder</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/18/interface-graphique-avec-windowbuilder/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Sat, 18 Jun 2022 18:09:13 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[java]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=308</guid>

					<description><![CDATA[1 &#8211; Introduction Le plugin Eclipse WindowBuilder est un concepteur Java GUI visuel, puissant et facile à utiliser permettant la création d&#8217;applications GUI Java sans vous casser la tête à écrire du code pour afficher des objets graphiques&#160; simples comme fenêtres, bouton de commandes, champs de textes&#8230; Avec WindowBuilder, vous pouvez créer des fenêtres compliquées&#8230;]]></description>
										<content:encoded><![CDATA[
<h2>1 &#8211; Introduction</h2>



<p>Le plugin Eclipse WindowBuilder est un concepteur Java GUI visuel, puissant et facile à utiliser permettant la création d&rsquo;applications GUI Java sans vous casser la tête à écrire du code pour afficher des objets graphiques&nbsp; simples comme fenêtres, bouton de commandes, champs de textes&#8230; Avec WindowBuilder, vous pouvez créer des fenêtres compliquées en quelques minutes, il suffit d’utiliser le concepteur visuel et le code Java sera automatiquement&nbsp; généré pour vous. Vous pouvez facilement ajouter des contrôles à l&rsquo;aide de glisser-déposer,&nbsp; gérer les événements de vos contrôles, modifier diverses propriétés des contrôles à l&rsquo;aide d&rsquo;un éditeur de propriétés et bien plus encore. Le code généré ne nécessite aucune bibliothèque personnalisée supplémentaire pour compiler et exécuter: l&rsquo;ensemble du code généré peut être utilisé sans installer WindowBuilder.&nbsp;&nbsp;.</p>



<span id="more-308"></span>


<div class="wp-block-image">
<figure class="aligncenter"><img src="http://www.tresfacile.net/wp-content/uploads/2017/04/install-windowBuilder-eclipse-plugin.jpg" alt="Héritage visuel - créer des hiérarchies de composants visuels. Gestion des événements: ajoutez des gestionnaires d'événements à vos composants. Édition de menu - Créez et modifiez visuellement des menus, des éléments de menu et des menus contextuels." class="wp-image-4605"/></figure></div>


<ul><li>L&rsquo;éditeur est doté des principaux composants interface utilisateur (user interface ) suivants:<br>•&nbsp;&nbsp; &nbsp;Design View &#8211; la zone de présentation visuelle principale.<br>•&nbsp;&nbsp; &nbsp;Source View- code d&rsquo;écriture et analyse du code généré<br>•&nbsp;&nbsp; &nbsp;Structure View- composée de l&rsquo;arbre de composant et du volet Propriété.<br>&#8211; Component Tree- montre la relation hiérarchique entre tous les composants.<br>&#8211; Property Pane &#8211; affiche les propriétés et les événements des composants sélectionnés.<br>•&nbsp;&nbsp; &nbsp;Palette &#8211; permet un accès rapide aux composants spécifiques à une trousse d&rsquo;outils.<br>•&nbsp;&nbsp; &nbsp; ToolBar &#8211; permet d&rsquo;accéder aux commandes couramment utilisées.<br>•&nbsp;&nbsp; &nbsp; Context Menu &#8211; permet d&rsquo;accéder aux commandes couramment utilisées.</li></ul>



<h2>2 – Installation de WindowBuilder</h2>



<ol><li>Copiez le lien approprié pour votre version d&rsquo;Eclipse à partir de la colonne Site de mise à jour sur la page de téléchargement:</li><li>Depuis le menu Help d’Eclipse, choisissez&nbsp;&nbsp;<strong>Help &gt; Install new Software&#8230;<br>.</strong><img loading="lazy" src="http://www.tresfacile.net/wp-content/uploads/2017/04/1-install-windowBuilder-eclipse-plugin.png" alt="Installation de WindowBuilder Pro. Tous les téléchargements sont fournis selon les termes et conditions du contrat d'utilisation du logiciel Eclipse Foundation, sauf indication contraire." width="623" height="395" srcset="https://www.tresfacile.net/wp-content/uploads/2017/04/1-install-windowBuilder-eclipse-plugin.png 623w, https://www.tresfacile.net/wp-content/uploads/2017/04/1-install-windowBuilder-eclipse-plugin-300x190.png 300w"><br>.</li><li>Dans la fenêtre qui apparait cliquez sur&nbsp;<strong>le bouton Add<br>.<br></strong><img loading="lazy" src="http://www.tresfacile.net/wp-content/uploads/2017/04/2-install-windowBuilder-eclipse-select.png" alt="cliquez sur le bouton add pour installer WindowBuilder" width="683" height="488" srcset="https://www.tresfacile.net/wp-content/uploads/2017/04/2-install-windowBuilder-eclipse-select.png 806w, https://www.tresfacile.net/wp-content/uploads/2017/04/2-install-windowBuilder-eclipse-select-300x214.png 300w, https://www.tresfacile.net/wp-content/uploads/2017/04/2-install-windowBuilder-eclipse-select-768x549.png 768w"><br>.</li><li>Dans la boîte de dialogue apparue, dans le champ Name, saisissez un nom descriptif (comme « WindowBuilder Pro ») et collez le lien correct (voir étape 1) dans le champ Emplacement.&nbsp; Cliquez ensuite&nbsp; sur le bouton OK:&nbsp;.<img loading="lazy" src="http://www.tresfacile.net/wp-content/uploads/2017/04/3-install-windowBuilder-eclipse-dialog.png" alt="configurer windowBuilder" width="490" height="189" srcset="https://www.tresfacile.net/wp-content/uploads/2017/04/3-install-windowBuilder-eclipse-dialog.png 490w, https://www.tresfacile.net/wp-content/uploads/2017/04/3-install-windowBuilder-eclipse-dialog-300x116.png 300w"><br>.</li><li>&nbsp;Sélectionnez toutes les<strong>&nbsp;cases à cocher</strong>&nbsp;qui vont apparaître, puis cliquez sur&nbsp;<strong>Suivant</strong>&nbsp;pour installez WindowBuilder :<br>:<br><img loading="lazy" src="http://www.tresfacile.net/wp-content/uploads/2017/04/4-install-windowBuilder-eclipse-cochez.png" alt="graphique avec plugin Eclipse windowBuilder pro" width="683" height="556" srcset="https://www.tresfacile.net/wp-content/uploads/2017/04/4-install-windowBuilder-eclipse-cochez.png 750w, https://www.tresfacile.net/wp-content/uploads/2017/04/4-install-windowBuilder-eclipse-cochez-300x244.png 300w"><br>.</li></ol>



<h2>3 &#8211; Comment utiliser WindowBuilder ?</h2>



<p>Pour utiliser WindowBuilder :</p>



<ul><li>Tapez la combinaison de touche&nbsp;<strong>Ctrl + N</strong>&nbsp;et vous allez voir apparaitre la fenêtre suivante :</li></ul>


<div class="wp-block-image">
<figure class="aligncenter"><img src="http://www.tresfacile.net/wp-content/uploads/2017/04/5-new-windows-app-windowBuilder-pro.png" alt="5-new-windows-app-windowBuilder-pro" class="wp-image-4616"/></figure></div>


<ul><li>Choisissez ensuite comme type de projet&nbsp; :&nbsp;&nbsp;<strong>WindowBuilder&nbsp; -&gt; Application Window</strong></li></ul>


<div class="wp-block-image">
<figure class="aligncenter"><img src="http://www.tresfacile.net/wp-content/uploads/2017/04/6-first-windowBuilder-package.png" alt="6-first-windowBuilder-package" class="wp-image-4617"/></figure></div>


<ul><li>Après avoir cliquez sur le bouton&nbsp;&nbsp;<strong>Finish</strong>&nbsp;vous obtenez votre<strong>&nbsp;premier projet WindowBuilder</strong>&nbsp;:</li></ul>


<div class="wp-block-image">
<figure class="aligncenter"><img src="http://www.tresfacile.net/wp-content/uploads/2017/04/7-windowBuilder-design-view.png" alt="7-windowBuilder-design-view" class="wp-image-4618"/></figure></div>


<ul><li>Cliquez maintenant sur l&rsquo;onglet&nbsp;<strong>Design</strong>&nbsp; pour afficher la fenêtre crée automatiquement par WindowBuilder , ainsi que&nbsp; les autres outils graphiques WYSIWYG : Containers, Layouts, Compoasants Swing et Awt &#8230;</li></ul>


<div class="wp-block-image">
<figure class="aligncenter"><img src="http://www.tresfacile.net/wp-content/uploads/2017/04/8-outils-graphique-windowBuilder.png" alt="8-outils-graphique-windowBuilder" class="wp-image-4619"/></figure></div>]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>La liste JComboBox Java</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/18/la-liste-jcombobox-java/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Sat, 18 Jun 2022 18:08:30 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[java]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=306</guid>

					<description><![CDATA[1 &#8211; Création d&#8217;un JCombBox Java Etape 1&#160;: Avant de créer un JComboBox, il va falloire préalablement savoir qu&#8217;il s&#8217;agit d&#8217;un composant Swing.Pour cela, on doit impérativement créer une fenêtre dotée d&#8217;un JPanel en instanciant les classes&#160;JFrame&#160;et&#160;JPanel: Etape 2&#160;: Création des éléments qui vont constituer la JComboBox. Les éléments qui vont constituer la JComboBox, peuvent&#8230;]]></description>
										<content:encoded><![CDATA[
<h1>1 &#8211; Création d&rsquo;un JCombBox Java</h1>



<p><strong>Etape 1</strong>&nbsp;: Avant de créer un JComboBox, il va falloire préalablement savoir qu&rsquo;il s&rsquo;agit d&rsquo;un composant Swing.<br>Pour cela, on doit impérativement créer une fenêtre dotée d&rsquo;un JPanel en instanciant les classes&nbsp;<strong>JFrame</strong>&nbsp;et&nbsp;<strong>JPanel</strong>:</p>



<pre class="wp-block-code"><code> JFrame f=new JFrame();   
JPanel pan=new JPanel();
f.setContentPane(pan);    
pan.setLayout(null);    
f.setSize(250,200);</code></pre>



<span id="more-306"></span>



<p><strong>Etape 2</strong>&nbsp;: Création des éléments qui vont constituer la JComboBox. Les éléments qui vont constituer la JComboBox, peuvent être créer et organiser sur un tableau d&rsquo;objets</p>



<pre class="wp-block-code"><code>Object&#91;] elements = new Object&#91;]{"élément1", "élément2", "élément3"};</code></pre>


<div class="wp-block-image">
<figure class="aligncenter"><img src="http://www.tresfacile.net/wp-content/uploads/2018/07/2-JComboBox-Java-string-type-1.png" alt="" class="wp-image-5340"/></figure></div>


<h3>Exemple :</h3>



<pre class="wp-block-code"><code>import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;


public class ComboBox1 {


public static void main(String&#91;] args) { 

//- 1) --- création d'une fenêtre JFrame Java    
JFrame f=new JFrame();    
JPanel pan=new JPanel();    
f.setContentPane(pan);    
pan.setLayout(null);    
f.setSize(250,200);


//- 2) --- définir les élément de la liste 
JComboBoxObject&#91;] elements = new Object&#91;]{"Laptop HP", "Laptop Acer", "Laptop Azus"};    

//- 3) --- Création d'une nouvelle liste 
JComboBox JComboBox&lt;Object&gt; liste = new JComboBox(elements); 
liste.setBounds(10, 10, 120, 23); 
pan.add(liste);           
f.setVisible(true);</code></pre>



<h1>3 &#8211; Ajout d&rsquo;actions à la liste JComboBox</h1>



<p>Après avoir créer une liste&nbsp;<strong>JomboBox</strong>, on peut lui associer une action qui se declenche au moment de la séléction&nbsp;à l&rsquo;aide de la méthode&nbsp;<strong>addActionListener()</strong>. L&rsquo;action ne peut être ajouter que si la séléction est récupérée via&nbsp;la méthode<strong>&nbsp;getSelectedItem()</strong>.</p>



<pre class="wp-block-code"><code>//- 4) --- Ajout d'une action à la séléction
liste.addActionListener(new ActionListener() { 
public void actionPerformed(ActionEvent e) { 
e.getSource(); 

//- 5) --- récupération de la séléction sur une variable du type String
String s=(String) liste.getSelectedItem(); 
System.out.println("Vous avez séléctionné : "+s); 
} 
});</code></pre>



<p>On peut également afficher les résultats sur un&nbsp;<strong>JLabel</strong>&nbsp;:</p>



<h3>Exemple complet :</h3>



<pre class="wp-block-code"><code>import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

public class ComboBox2 {

	public static void main(String&#91;] args) {
		
//- 1) --- define new Window JFrame
		   JFrame f=new JFrame();
		   JPanel pan=new JPanel();
		   f.setContentPane(pan);
		   pan.setLayout(null);
		   f.setSize(400,300);

//- 2) --- Création des éléments de la JComboBox Java
Object&#91;] elements = new Object&#91;]{"Laptop HP", "Laptop Acer", "Laptop Azus"};

//- 3) --- Création d'une nouvelle liste JComboBox
	JComboBox&lt;String&gt; liste = new JComboBox(elements);
	liste.setBounds(10, 10, 120, 23);
		pan.add(liste);
		
//- 4) --- Création d'un  JLabel pour afficher les résultats de la séléction
		  JLabel label=new JLabel("View results here !");
		  pan.add(label);
		  label.setBounds(10,30,250,50);
		  
//- 5) --- appliquer une action listener à la liste  JComboBox
		liste.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				e.getSource();
				String s=(String) liste.getSelectedItem();
				label.setText("Vous avez séléctionné : "+s);
				}
		});
		 f.setVisible(true);

	}

}</code></pre>



<p>Ce qui affiche après exécution :</p>


<div class="wp-block-image">
<figure class="aligncenter"><img src="http://www.tresfacile.net/wp-content/uploads/2018/07/jcomb-box-get-selected-item.png" alt="" class="wp-image-5338"/></figure></div>]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>JMenu : Création des menus avec Java</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/18/jmenu-creation-des-menus-avec-java/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Sat, 18 Jun 2022 18:07:19 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[java]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=304</guid>

					<description><![CDATA[1 &#8211; La barre des menus JMenuBar Java Afin d&#8217;organiser les menus, Java est doté d&#8217;une barre susceptible d&#8217;être placée en haut de la fenêtre, permettant d&#8217;accueillir et organiser les menus Java. Pour cela le langage Java utilise une classe nommée JMenuBar est utilisée pour afficher la barre des menus dans la fenêtre JFrame.Pour créer&#8230;]]></description>
										<content:encoded><![CDATA[
<h1>1 &#8211; La barre des menus JMenuBar Java</h1>



<p>Afin d&rsquo;organiser les menus, Java est doté d&rsquo;une barre susceptible d&rsquo;être placée en haut de la fenêtre, permettant d&rsquo;accueillir et organiser les menus Java. Pour cela le langage Java utilise une classe nommée JMenuBar est utilisée pour afficher la barre des menus dans la fenêtre JFrame.<br>Pour créer une barre de menu, il suffit de créer une fenêtre dotée d’un panneau ( JPanel), d&rsquo;instancier la classe JMenuBar, et d’ajouter ensuite la barre de menu au JPanel.</p>



<span id="more-304"></span>



<h2>a) Création d’une fenêtre dotée d’un JPanel</h2>



<pre class="wp-block-code"><code>JFrame fen=new JFrame("Exemple de fenêtre avec menu"); 
JPanel panel=new JPanel(); 
panel.setLayout(null); 
fen.setSize(500, 400); 
fen.setContentPane(panel);</code></pre>



<h2>b. Création de la barre des menus avec la classe JMenuBar</h2>



<pre class="wp-block-code"><code>//création de la barre des menus
JMenuBar myMenuBar=new JMenuBar();
//Ajout de la barre de menus au JPanel
panel.add(myMenuBar)</code></pre>



<h1>2- La classe JMenu</h1>



<p>La classe JMenu permet via l’instanciation, de créer un menu. Nous allons à titre d’exemple l’utiliser pour créer un menu Fichier :</p>



<pre class="wp-block-code"><code>//Création du menu Fichier
JMenu menuFichier = new JMenu("Fichier");
//Ajout du menu à la barre des menus 
myMenuBar.add(menuFichier);</code></pre>



<h2>Code Complet</h2>



<pre class="wp-block-code"><code>import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JPanel;

public class MyJMenu {

	public static void main(String&#91;] args) {
		
			//création d'une fenêtre JFrame
			JFrame fen=new JFrame("Exemple de fenêtre avec menu");
			JPanel panel=new JPanel();
			//création d'un panneau (JPanel)
			panel.setLayout(null);
			fen.setSize(500, 400);
			fen.setContentPane(panel);
			
			//création de la barre des menus
			JMenuBar myMenuBar=new JMenuBar();

			//Ajout de la barre de menus au JPanel
			panel.add(myMenuBar);
			
			//Positionnement de la barre des menus avec la m"thode setBounds()
			myMenuBar.setBounds(0, 0, 500, 30);
			//Création du menu Fichier
			JMenu menuFichier = new JMenu("Fichier");

			//Ajout du menu à la barre des menus
			myMenuBar.add(menuFichier);
			fen.setVisible(true);
		}
	}</code></pre>



<p><strong>Voici un aperçu après exécution du code sur Eclipse</strong></p>


<div class="wp-block-image">
<figure class="aligncenter"><img src="http://www.tresfacile.net/wp-content/uploads/2018/07/JMenuBar-Java-JMenu-JMenuItem.png" alt="" class="wp-image-5319"/></figure></div>


<h1>3 – Création des sous menus avec la classe JMenuItem</h1>



<p>Pour créer un sous menu et l’ajouter à menu principal, il suffit d’instancier la classe&nbsp;<strong>JMenuItem</strong>&nbsp;et appliquer la&nbsp;<strong>méthode add()</strong>. La classe JMenuItem premet de créer des sous menus, ces sous menus peuvent être ajoutés au menu principal grâce à la méthode add(). Nous allons traiter un exemple simple qui permet d’insérer le menu&nbsp;<strong>« Nouveau »</strong>&nbsp;au menu principal&nbsp;<strong>« Fichier »</strong>&nbsp;:</p>



<pre class="wp-block-code"><code>//Ajout d'un sous menu "Nouveau"                      
JMenuItem menuNouveau = new JMenuItem("Nouveau");
//Ajout du sous menu "Nouveau" au menu principal Fichier                        
menuFichier.add(menuNouveau);</code></pre>



<p>On peut également via la même méthode, ajouter d&rsquo;autres sous menus :&nbsp;<strong>« Ouvrir »&nbsp; « Enregistrer »&nbsp; « Imprimer »</strong>&nbsp;<strong>&nbsp;« Quitter »&nbsp;</strong></p>



<h3>Exemple</h3>



<pre class="wp-block-code"><code>//Création des sous menus                     
			JMenuItem menuNouveau = new JMenuItem("Nouveau"); 
			JMenuItem menuOuvrir = new JMenuItem("Ouvrir"); 
			JMenuItem menuEnregistrer = new JMenuItem("Enregistrer");
			JMenuItem menuImprimer = new JMenuItem("Imprimer"); 
			JMenuItem menuQuitter = new JMenuItem("Quitter"); 
			
			//Ajout des sous menus au menu principal Fichier 
			menuFichier.add(menuNouveau);
			menuFichier.add(menuOuvrir);
			menuFichier.add(menuEnregistrer);
			menuFichier.add(menuImprimer);
			menuFichier.add(menuQuitter);</code></pre>



<p>Voici un aperçu de la fenêtre obtenue après exécution du code sur Eclipse</p>


<div class="wp-block-image">
<figure class="aligncenter"><img src="http://www.tresfacile.net/wp-content/uploads/2018/07/file-menu-java-jmenu-item.png" alt="" class="wp-image-5325"/></figure></div>


<h1>4 &#8211; Ajouter une action à un sous menu</h1>



<p>Dans le paragraphe précédent, vous avez apris à créer des menus et des sous menus, et rien d&rsquo;autre ! Mais quand vous cliquez&nbsp; sur l&rsquo;un de ces sous menus, il doit se produire une&nbsp;<strong>action</strong>&nbsp;ou un&nbsp;<strong>évenement</strong>&nbsp;: exemple nous allons voir comment associer l&rsquo;action qui permet de fermer la fenêtre au sous menu&nbsp;<strong>« Quitter »</strong>.&nbsp; Por cela nous allons utiliser la même méthode&nbsp; &nbsp;<strong>addActionListener( )</strong>&nbsp; que nous avons appliqué aux boutons de comandes, et au sein de cette dernière, nous devons appliquer la méthode<strong>&nbsp;dispose( )</strong>&nbsp; pour fermer la fenêtre :</p>



<pre class="wp-block-code"><code>menuQuitter.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					fen.dispose();
				}
			});</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Java JTextArea</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/18/java-jtextarea/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Sat, 18 Jun 2022 18:06:14 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[java]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=302</guid>

					<description><![CDATA[La classe&#160;JTextArea&#160;est une classe Java permettant de créer une zone de texte multiligne. Ell permet l&#8217;édition de plusieurs lignes de texte. Il s&#8217;agit d&#8217;une classe Java qui hérite de la classe&#160;JTextComponent 1 &#8211; Déclaration de classe JTextArea via l&#8217;héritage de JTextComponent 2 &#8211; Constructeur de classe &#38; description JTextArea ()Construit une nouvelle TextArea.JTextArea (Document doc)Construit&#8230;]]></description>
										<content:encoded><![CDATA[
<p>La classe&nbsp;<strong>JTextArea</strong>&nbsp;est une classe Java permettant de créer une zone de texte multiligne. Ell permet l&rsquo;édition de plusieurs lignes de texte. Il s&rsquo;agit d&rsquo;une classe Java qui hérite de la classe<strong>&nbsp;JTextComponent</strong></p>



<h2>1 &#8211; Déclaration de classe JTextArea via l&rsquo;héritage de JTextComponent</h2>



<pre class="wp-block-code"><code>public class JTextArea extends JTextComponent</code></pre>



<h2>2 &#8211; Constructeur de classe &amp; description</h2>



<span id="more-302"></span>



<p><strong>JTextArea ()</strong><br>Construit une nouvelle TextArea.<br><strong>JTextArea (Document doc)</strong><br>Construit un nouveau JTextArea avec le modèle de document donné, et par défaut pour tous les autres arguments (null, 0, 0).<br><strong>JTextArea (Document , String&nbsp; texte, lignes int, colonnes int)</strong><br>Construit un nouvel JTextArea avec le nombre spécifié de lignes et de colonnes, et le modèle donné.<br><strong>JTextArea (int rows, int columns)</strong><br>Construit une nouvelle TextArea vide avec le nombre de lignes et de colonnes spécifié.<br><strong>JTextArea (String texte)</strong><br>Construit une nouvelle TextArea avec le texte spécifié affiché.<br><strong>JTextArea (String texte , lignes int, colonnes int)</strong><br>Construit une nouvelle TextArea avec le texte et le nombre de lignes et de colonnes spécifiés.</p>



<h2>3 &#8211; Méthodes de classe &amp; description</h2>



<p><strong>void append (String str)</strong><br>Ajoute le texte donné à la fin du document.<br><strong>protected Document createDefaultModel ()</strong><br>Crée l&rsquo;implémentation par défaut du modèle à utiliser lors de la construction si aucune n&rsquo;est explicitement donnée.<br><strong>AccessibleContext getAccessibleContext ()</strong><br>Obtient le AccessibleContext associé à cette JTextArea.<br><strong>int getColumns ()</strong><br>Renvoie le nombre de colonnes dans TextArea.<br><strong>protected int getColumnWidth ()</strong><br>Obtient la largeur de colonne.<br><strong>int getLineCount ()</strong><br>Détermine le nombre de lignes contenues dans la zone.<br><strong>int getLineEndOffset (ligne int)</strong><br>Détermine le décalage de la fin de la ligne donnée.<br><strong>int getLineOfOffset (décalage int)</strong><br>Traduit un décalage dans le texte des composants en un numéro de ligne.<br><strong>int getLineStartOffset (ligne int)</strong><br>Détermine le décalage du début de la ligne donnée.<br><strong>boolean getLineWrap ()</strong><br>Obtient la politique de retour à la ligne de la zone de texte.<br><strong>Dimension getPreferredScrollableViewportSize ()</strong><br>Renvoie la taille préférée de la fenêtre si ce composant est incorporé dans un JScrollPane.<br><strong>Dimension getPreferredSize ()</strong><br>Renvoie la taille préférée de TextArea.<br><strong>protected int getRowHeight ()</strong><br>Définit la signification de la hauteur d&rsquo;une ligne.<br><strong>int getRows ()</strong><br>Renvoie le nombre de lignes dans TextArea.<br><strong>boolean getScrollableTracksViewportWidth()</strong><br>Renvoie true si une fenêtre doit toujours forcer la largeur de ce défilement pour correspondre à la largeur de la fenêtre.<br><strong>int getScrollableUnitIncrement (Rectangle visibleRect, orientation int, int direction)</strong><br>Les composants qui affichent des lignes logiques ou des colonnes doivent calculer l&rsquo;incrément de défilement qui va complètement exposer une nouvelle ligne ou une colonne, en fonction de la valeur de l&rsquo;orientation.<br><strong>int getTabSize ()</strong><br>Obtient le nombre de caractères utilisés pour développer les onglets.<br><strong>String getUIClassID ()</strong><br>Renvoie l&rsquo;ID de la classe pour l&rsquo;interface utilisateur.<br><strong>boolean getWrapStyleWord ()</strong><br>Obtient le style de retour utilisé si la zone de texte est en train d&rsquo;encapsuler des lignes.<br><strong>void Insert(String str, int pos)</strong><br>Insère le texte spécifié à la position spécifiée.<br><strong>protected String paramString ()</strong><br>Renvoie une représentation sous forme de chaîne de cette JTextArea.<br><strong>void replaceRange (Chaîne str, int début, int fin)</strong><br>Remplace le texte de la position de début à la fin indiquée par le nouveau texte spécifié.<br><strong>void setColumns (colonnes int)</strong><br>Définit le nombre de colonnes pour ce TextArea.<br><strong>void setFont (Police f)</strong><br>Définit la police actuelle.<br><strong>void setLineWrap (enveloppe booléenne)</strong><br>Définit la politique de retour à la ligne de la zone de texte.<br><strong>void setRows (int rangées)</strong><br>Définit le nombre de lignes pour cette TextArea.<br><strong>void setTabSize (taille int)</strong><br>Définit le nombre de caractères pour développer les onglets.<br><strong>void setWrapStyleWord (mot booléen)</strong><br>Définit le style d&rsquo;habillage utilisé, si la zone de texte est en train d&rsquo;encapsuler des lignes.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Graphique avec Java Swing</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/18/graphique-avec-java-swing/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Sat, 18 Jun 2022 18:05:39 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[java]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=300</guid>

					<description><![CDATA[1 &#8211; Introduction au Bibliothèque Graphique&#160; Java Swing Java Swing constitue l&#8217;une des plus récentes bibliothèque graphique et la plus utilisée pour le langage Java, Java Swing&#160; fait partie du package Java Foundation Classes (JFC) qui elle même fait partie de J2SE. 2 &#8211; Première Fenêtre avec Java Swing Dans ce tutoriel nous allons montrer&#8230;]]></description>
										<content:encoded><![CDATA[
<h2>1 &#8211; Introduction au Bibliothèque Graphique&nbsp; Java Swing</h2>



<p>Java Swing constitue l&rsquo;une des plus récentes bibliothèque graphique et la plus utilisée pour le langage Java, Java Swing&nbsp; fait partie du package Java Foundation Classes (JFC) qui elle même fait partie de J2SE.</p>



<h2>2 &#8211; Première Fenêtre avec Java Swing</h2>



<p>Dans ce tutoriel nous allons montrer comment créer une fenêtre avec la&nbsp;<strong>classe JFrame</strong>&nbsp;qui se trouve dans la bibliothèque&nbsp;&nbsp;<strong>Javax.Swing.</strong></p>



<p>Pour ce faire nous devons préalablement importer la bibliothèque&nbsp;<strong>javax.swing.JFrame;</strong>&nbsp;et faire ensuite l&rsquo;instanciation sur la<strong>&nbsp;classe JFrame&nbsp;</strong>pour créer une&nbsp;<strong>fenêtre.</strong></p>



<span id="more-300"></span>



<pre class="wp-block-code"><code>import javax.swing.JFrame;
public class maFenetre {
	
  public static void main(String&#91;] args) {
		JFrame f=new JFrame();
		}
}</code></pre>



<p>Ce qui n&rsquo;affiche rien après exécution bien sûr, puisqu&rsquo;on a pas invoquer la méthode&nbsp;<strong>setVisible( )</strong>&nbsp; qui permet de visualiser la fenêtre. On peut donc améliorer le code en ajoutant cette dernière et celle qui définit les dimensions de la façon suivante :</p>



<pre class="wp-block-code"><code>import javax.swing.JFrame;
public class maFenetre {
	
  public static void main(String&#91;] args) {
		JFrame f=new JFrame();
	    f.setVisible(true);
	    f.setTitle("Une Fenetre tout simplement");
	    f.setSize(400,200);
		}
}</code></pre>



<p>Ce qui affiche une fenêtre de taille 400 x 200 :</p>


<div class="wp-block-image">
<figure class="aligncenter"><img src="http://www.tresfacile.net/wp-content/uploads/2017/03/JFrame-fenetre-java-sans-heritage.jpg" alt="JFrame-fenetre-java-sans-heritage" class="wp-image-4293"/></figure></div>


<p>Afin de pouvoir améliorer la classe&nbsp;JFrame&nbsp;il vaut mieux créer une sous classe via l&rsquo;instruction&nbsp;extends&nbsp;!</p>



<pre class="wp-block-code"><code>import javax.swing.JFrame;
public class maFenetre extends JFrame{
	//création du constructeur
  public maFenetre(){
//Titre de la fenêtre
this.setTitle("Ma propre fenêtre");
  }
}</code></pre>



<p>Maintenant pour créer et afficher la fenêtre nous devons :</p>



<ol><li>Créer une&nbsp;<strong>méthode afficher( )</strong>&nbsp;permettant d&rsquo;afficher la fenêtre</li><li>Créer une&nbsp;<strong>méthode main( )</strong>&nbsp;pour instancier la classe&nbsp;<strong>maFenêtre</strong>&nbsp;et afficher l&rsquo;objet fenêtre</li></ol>



<pre class="wp-block-code"><code>import javax.swing.JFrame;
public class maFenetre extends JFrame{
	//création du constructeur
  public maFenetre(){
this.setTitle("Ma propre fenêtre");
  }
  //création de la fonction d'affichage
  public void afficher(){
	  this.setVisible(true);
  }
  public static void main(String&#91;] args) {
		maFenetre f=new maFenetre();
	    f.afficher();
		}
}</code></pre>



<p>En exécutant ce code vous obtenez une petite fenêtre de dimensions nulles, par ce qu&rsquo;on a pas préciser ses dimensions</p>


<div class="wp-block-image">
<figure class="aligncenter"><img src="http://www.tresfacile.net/wp-content/uploads/2017/03/premiere-fenetre-java-JFrame.jpg" alt="premiere-fenetre-java-JFrame" class="wp-image-4290"/></figure></div>


<p>Nous pouvons maintenant améliorer le code en ajoutant au constructeur, les dimensions de la fenêtre :</p>



<pre class="wp-block-code"><code>this.setSize(largeur en pixels , hauteur en pixel);</code></pre>



<h3>Exemple</h3>



<pre class="wp-block-code"><code>import javax.swing.JFrame;
public class maFenetre extends JFrame{
	//création du constructeur
  public maFenetre(){
// Titre de la fenêtre	  
this.setTitle("Ma propre fenêtre");
// dimensions de la fenêtre :
this.setSize(300, 200);
  }
  //création de la fonction d'affichage
  public void afficher(){
	  this.setVisible(true);
  }
  public static void main(String&#91;] args) {
		maFenetre f=new maFenetre();
	    f.afficher();
		}
}</code></pre>



<p>Ce qui affiche après exécution, une fenêtre de taille 300 x 200</p>


<div class="wp-block-image">
<figure class="aligncenter"><img src="http://www.tresfacile.net/wp-content/uploads/2017/03/java-swing-this-size.jpg" alt="java-swing-this-size" class="wp-image-4291"/></figure></div>


<h2>3 &#8211; Les conteneurs Java Swing ( Swing Containers )</h2>



<p>Les composants Swing dans lesquels sont incorporés&nbsp;<strong>les composants de la GUI</strong>&nbsp;comme par exemple :&nbsp;<strong>JFrame, JDialog, JPanel, JScrollPane</strong>&#8230;sont appelé les&nbsp;<strong>conteneurs Swing</strong>&nbsp;(&nbsp;<strong>Swing containers</strong>&nbsp;en anglais)</p>



<h2>4 &#8211; Les composants&nbsp; Java Swing</h2>



<p>Les composants de la bibliothèque Swing presque identiques à ceux de Awt :</p>



<ul><li>JButton</li><li>JLabel</li><li>JTextArea</li><li>JTextField</li><li>JRadioButton</li><li>JCheckBox</li><li>JPasswordField</li><li>JComboBox</li><li>JList</li><li>JScrollBar</li></ul>



<h2>5 &#8211; Ajout de composants Swing à la fenêtre</h2>



<h3>5 &#8211; 1 &#8211; Ajout d&rsquo;un bouton</h3>



<p>Avant d&rsquo;ajouter un bouton à une fenêtre il faut préalablement créer un panneau ( Panel ) en faisant une instanciation sur la classe JPanel&nbsp; et d&rsquo;associer le contenu de ce panel à la fenêtre via l&rsquo;instruction :</p>



<pre class="wp-block-code"><code>
fenêtre.setContentPane(panel);</code></pre>



<p>Voici le code :</p>



<pre class="wp-block-code"><code>JFrame f=new JFrame("Ma Fenêtre");
f.setSize(500, 400);
JPanel pan=new JPanel();
f.setContentPane(pan);</code></pre>



<p><strong>Explication :</strong>&nbsp;dans ce code on créer une fenêtre nommée&nbsp;<strong>f</strong>&nbsp;contenant un&nbsp;<strong>&nbsp;panel</strong>&nbsp;nommé&nbsp;<strong>pan</strong></p>



<p>A e moment là il est temps de créer un bouton à l&rsquo;aide d&rsquo;une instanciation sur la classe JButton :</p>



<pre class="wp-block-code"><code>JButton b=new JButton("Voici un Bouton");
</code></pre>



<p>Le bouton ne sera pas visible à ce moment là ! Il va falloir l&rsquo;<strong>ajouter</strong>&nbsp;à la fenêtre<strong>&nbsp;f</strong>&nbsp;l&rsquo;aide de la méthode :</p>



<pre class="wp-block-code"><code>f.getContentPane().add(b);</code></pre>



<p>Voici le code final :</p>



<pre class="wp-block-code"><code>import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
public class AppGaphique {
	public static void main(String&#91;] args) {
	JFrame f=new JFrame("Ma Fenêtre");
	f.setSize(500, 400);
	JPanel pan=new JPanel();
	f.setContentPane(pan);
	//ajout de bouton
	JButton b=new JButton("Voici un Bouton");
	f.getContentPane().add(b);
	f.setVisible(true);
	} }</code></pre>



<p>Ce qui affiche après exécution :</p>


<div class="wp-block-image">
<figure class="aligncenter"><img src="http://www.tresfacile.net/wp-content/uploads/2017/03/JButton-Java-Swing.png" alt="Java JButton La classe JButton sert à créer un bouton étiqueté qui a une implémentation indépendante de la plate-forme. L'application entraîne une action lorsque le bouton est poussé. Il hérite de la classe AbstractButton. Déclaration de classe JButton Voyons la déclaration de la classe javax.swing.JButton. Classe publique JButton étend les outils AbstractButton accessibles" class="wp-image-4506"/></figure></div>


<h3>Remarque</h3>



<p>On ajoute les autres composants&nbsp;<strong>Label, TextField</strong>&#8230; de la même façon en faisant une instanciation sur les classes&nbsp;<strong>JLabel, JTextField&#8230;</strong></p>



<h2>6 &#8211; Les événements Java Swing</h2>



<h3>Exemple avec&nbsp;<strong>ActionListener</strong>&nbsp;appliquer à<strong>&nbsp;JButton</strong></h3>



<pre class="wp-block-code"><code>monBouton.addActionListener(new ActionListener(){  
public void actionPerformed(ActionEvent e){  
   &#91;ensemble d'actions ici ]  
        }  
    });  </code></pre>



<h3>Exemple</h3>



<pre class="wp-block-code"><code>import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
public class AppGaphique {
	public static void main(String&#91;] args) {
	JFrame f=new JFrame("Ma Fenêtre");
	f.setSize(500, 400);
	JPanel pan=new JPanel();
	f.setContentPane(pan);
	//ajout de bouton
	JButton b=new JButton("Voici un Bouton");
	f.getContentPane().add(b);
	JLabel l=new JLabel("");
	f.getContentPane().add(l);
	f.setVisible(true);
	b.addActionListener(new ActionListener(){  
		public void actionPerformed(ActionEvent e){  
		            l.setText("J'ai cliqué sur le bouton");  }  
		    });  
	} 
}</code></pre>



<p>Ce qui affiche après exécution et après avoir cliqué sur le bouton :</p>


<div class="wp-block-image">
<figure class="aligncenter"><img src="http://www.tresfacile.net/wp-content/uploads/2017/03/Jbutton-action-listener.png" alt="EventListener interfaces allow you to define processing in response to user events generated by a component. A class must contain an auditory interface for each type of event to be processed: ActionListener: mouse click or press Enter ItemListener: Using a list or check box MouseMotionListener: mouse event WindowListener: Window Event" class="wp-image-4511"/></figure></div>


<h2>5 &#8211; Le composant JTable</h2>



<p><a></a>Dans cette partie, nous allons voir comment créer un tableau pour afficher des données tabulaires en utilisant la classe JTable au sein de&nbsp; la bibliothèque Java swing. La classe&nbsp;<strong>JTable</strong>&nbsp;représente le&nbsp;<strong>composant Swing table</strong>.&nbsp;<strong>JTable</strong>&nbsp;offre une fonctionnalité riche pour gérer l&rsquo;apparence et le comportement du composant table.&nbsp;&nbsp;<strong>JTable étend directement JComponent</strong>&nbsp;et<strong>&nbsp;implémente</strong>&nbsp;plusieurs&nbsp;<strong>interfaces</strong>&nbsp;d&rsquo;auditeurs de modèles telles que&nbsp;<strong>TableModelListener,&nbsp;&nbsp;TableColumnModelListener,&nbsp;&nbsp;ListSelectionListener</strong>&nbsp;&#8230; etc. JTable implémente également une interface défilable; par conséquent, le tableau est généralement placé dans un&nbsp;<strong>JScrollPane</strong>.</p>



<p>Chaque JTable comporte trois modèles&nbsp;:</p>



<ul><li>TableModel</li><li>TableColumnModel</li><li>ListSelectionModel.</li></ul>



<p><strong>TableModel</strong>&nbsp; :&nbsp; est utilisé pour spécifier comment les données de la table sont stockées et la récupération de ces données. Les données de JTable sont souvent en structure bidimensionnelle telle qu&rsquo;un tableau à deux dimensions ou un vecteur de vecteurs. TableModel est également utilisé pour spécifier comment les données peuvent être modifiées dans la table.</p>



<p><strong>TableColumnModel</strong>&nbsp; : est utilisé pour gérer tout TableColumn en terme de sélection de colonne, d&rsquo;ordre de colonne et de taille de marge.</p>



<p><strong>ListSelectionModel :</strong>&nbsp;permet au tableau d&rsquo;avoir un mode de sélection différent, tel qu&rsquo;un sélecteur unique, un intervalle unique et plusieurs sélections d&rsquo;intervalles.<br>Nous pouvons créer une table en utilisant ses constructeurs comme suit:</p>



<figure class="wp-block-table"><table><tbody><tr><td><strong>Constructeurs JTable</strong></td><td><strong>Description</strong></td></tr><tr><td><strong>JTable</strong>()</td><td>Création d&rsquo;une table vide</td></tr><tr><td><strong>JTable</strong>(int&nbsp;rows, int&nbsp;columns)</td><td>Création d&rsquo;une table avec des lignes et des colonnes avec cellules vides.</td></tr><tr><td><strong>JTable</strong>(Object[][]&nbsp;data, Object[]&nbsp;heading)</td><td>Création d&rsquo;une table avec les données spécifiées&nbsp; du tableau bidimensionnel et l&rsquo;en-tête de la colonne</td></tr><tr><td><strong>JTable</strong>(TableModel&nbsp;dm)</td><td>Création d&rsquo;une table avec le modèle&nbsp;TableModel</td></tr><tr><td><strong>JTable</strong>(TableModel&nbsp;dm, TableColumnModel&nbsp;cm)</td><td>Création d&rsquo;une table avec les modèles&nbsp;TableModel et TableColumnModel.</td></tr><tr><td><strong>JTable</strong>(TableModel&nbsp;dm,TableColumnModel&nbsp;cm, ListSelectionModel&nbsp;sm)</td><td>Créez une table avec les modèles&nbsp;TableModel, TableColumnModel, et ListSelectionModel.</td></tr><tr><td><strong>JTable</strong>(Vector&nbsp;data, Vector&nbsp;heading)</td><td>&nbsp;Création d&rsquo;une table avec vector of Vectors&nbsp;<em>data</em>&nbsp;et column headings&nbsp;<em>headin.</em></td></tr></tbody></table></figure>



<h3>Exemple</h3>



<p>Nous verrons ici un exemple d&rsquo;utilisation de&nbsp;<strong>JTable</strong>&nbsp;pour afficher les achats de matériels informatiques :</p>



<ul><li>Nous commençons par spécifier l&rsquo;en-tête de colonne dans le tableau des colonnes.</li><li>Nous utilisons ensuite&nbsp; des données de tableau bidimensionnel pour stocker des données.</li><li>Nous créons ensuite une instance de JTable en transmettant les données du tableau et l&rsquo;en-tête de colonne au constructeur.</li><li>Enfin, nous plaçons la table JScrollPane et l&rsquo;ajoutons au cadre principal.</li></ul>



<pre class="wp-block-code"><code>package JTableTest;

import javax.swing.*;
import java.awt.*;

public class MainClass {
 
	    public static void main(String&#91;] args) {
	        final JFrame frame = new JFrame("JTable Demo");
	        
        String&#91;] columns = {"id", "Matérièl Informatiques ", "Quantité"};

            Object&#91;]&#91;] data = {
        {1,"PC ","30"},
        {2,"Tabettes","45"},
        {3, "Imprimantes", "10"}
};          
	        
	        JTable table = new JTable(data, columns);
	        JScrollPane scrollPane = new JScrollPane(table);
	        JLabel lblHeading = new JLabel("Achat de matériels informatiques");
	        lblHeading.setFont(new Font("Arial",Font.TRUETYPE_FONT,20));
	        frame.getContentPane().setLayout(new BorderLayout());
	        frame.getContentPane().add(lblHeading,BorderLayout.PAGE_START);
	        frame.getContentPane().add(scrollPane,BorderLayout.CENTER);
	        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	        frame.setSize(450, 250);
	        frame.setVisible(true);
	    }
	}</code></pre>



<p>En exécutant le code ci-dessus vous obtenez la fenêtre suivante :</p>


<div class="wp-block-image">
<figure class="aligncenter"><img src="http://www.tresfacile.net/wp-content/uploads/2017/03/Modele-JTable-Java-Swing.png" alt="Modele-JTable-Java-Swing" class="wp-image-4708"/></figure></div>]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Les interface en Java</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/18/les-interface-en-java/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Sat, 18 Jun 2022 18:03:11 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[java]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=298</guid>

					<description><![CDATA[1 &#8211; Qu&#8217;est ce qu&#8217;une interface en Java ? Une interface du langage de programmation Java est un type abstrait utilisé pour spécifier un comportement que les classes doivent implémenter. Ils sont similaires aux protocoles. Les interfaces sont déclarées à l&#8217;aide du mot-clé interface et ne peuvent contenir que des déclarations de méthode et des&#8230;]]></description>
										<content:encoded><![CDATA[<div class="wp-block-image">
<figure class="aligncenter"><img src="http://www.tresfacile.net/wp-content/uploads/2018/12/Programmation-Java-debutant-1.png" alt="" class="wp-image-5562"/></figure></div>


<h2>1 &#8211; Qu&rsquo;est ce qu&rsquo;une interface en Java ?</h2>



<p>Une interface du langage de programmation Java est un type abstrait utilisé pour spécifier un comportement que les classes doivent implémenter. Ils sont similaires aux protocoles. Les interfaces sont déclarées à l&rsquo;aide du mot-clé interface et ne peuvent contenir que des déclarations de méthode et des déclarations de constante (variable declaratire déclarée à la fois statique et finale). Toutes les méthodes d&rsquo;une interface ne contiennent pas d&rsquo;implémentation (corps de méthodes) de toutes les versions antérieures à Java 11. À partir de Java 8, les méthodes par défaut et les méthodes statiques peuvent avoir une implémentation dans la définition d&rsquo;interface.</p>



<p>Les interfaces ne peuvent pas être instanciées, mais sont plutôt implémentées. Une classe qui implémente une interface doit implémenter toutes les méthodes non définies par défaut décrites dans l&rsquo;interface ou être une classe abstraite. Les références d&rsquo;objet en Java peuvent être spécifiées comme étant d&rsquo;un type d&rsquo;interface; dans chaque cas, ils doivent être nuls ou être liés à un objet qui implémente l&rsquo;interface.</p>



<p>L&rsquo;un des avantages de l&rsquo;utilisation des interfaces est qu&rsquo;elles simulent un héritage multiple. Toutes les classes en Java doivent avoir exactement une classe de base, la seule exception étant java.lang.Object (la classe racine du système de types Java); l&rsquo;héritage multiple de classes n&rsquo;est pas autorisé. Cependant, une interface peut hériter de plusieurs interfaces et une classe peut implémenter plusieurs interfaces.</p>



<h2>2 &#8211; Une interface est crée pour quelle raison ?</h2>



<p>Pour bien comprendre l&rsquo;utilité des interfaces en Java, prenons un exemple simple :</p>



<ul><li>On souhaite par exemple créer une&nbsp;<strong>classe Rectangle</strong>&nbsp;qui permet de générer un objet&nbsp;<strong>rectangle</strong></li><li>On souhaite aussi créer une&nbsp;<strong>classe triangle</strong>&nbsp;permettant de générer un objet&nbsp;<strong>triangle</strong></li><li>On souhaite créer une<strong>&nbsp;classe trapèze</strong>&nbsp;permettant de généer un objet&nbsp;<strong>trapèze</strong></li><li>&nbsp; &nbsp;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;&#8230;.</li></ul>



<p>Les objets&nbsp;<strong>rectangle, triangle</strong>&nbsp;et&nbsp;<strong>trapèze</strong>&nbsp; possèdent tous&nbsp;<strong>des propriétés communes</strong>&nbsp;comme :&nbsp;<strong>surface, perimètre, nombre de cotés</strong>&#8230; Et on souhaite créer un moyen qui permet de gérer ce processus c.a.d&nbsp;<strong>un triangle</strong>&nbsp;doit&nbsp;<strong>obligatoirement</strong>&nbsp;posséder une méthode qui&nbsp;<strong>calcule le périmètre</strong>&nbsp;et une<strong>&nbsp;méthode qui calcul la surface</strong>, faute de quoi le développeur&nbsp; rencontre un message d&rsquo;erreur lui indiquant qu&rsquo;il doit obligatoirement insérer les méthodes&nbsp;<strong>perimetre() et surface()</strong></p>



<p>C&rsquo;est à ce niveau là qu&rsquo;une interface intervient ! On doit créer une et appelons la par exemple interface polygone qui contient l&rsquo;ensemble des&nbsp; méthodes communes aux formes géométriques cités ci-dessus :</p>


<div class="wp-block-image">
<figure class="aligncenter"><img src="http://www.tresfacile.net/wp-content/uploads/2018/12/classrectangle-implement-interface-polygone-1.png" alt="" class="wp-image-5571"/></figure></div>


<h2>3 &#8211; Comment créer et utiliser une interface</h2>



<p>En pratique, la création et la declaration d&rsquo;une interface est semblable à une&nbsp;<strong>classe</strong>, à la différence que l&rsquo;on remplace le mot-clé&nbsp;<strong>class</strong>&nbsp;par<strong>&nbsp;interface</strong>.</p>



<pre class="wp-block-code"><code>public interface Polygone {
	public double périmètre();
	public int nombreCotes();
}</code></pre>



<p>Les classes&nbsp;&nbsp;<strong>rectangle, triangle</strong>&nbsp;et&nbsp;<strong>trapèze</strong>&nbsp;vont être maintenant declarées de la même façon comme celle de l&rsquo;héritage, à l a différence de remplacer le mot clé extends par implement:</p>



<p><em>Class Rectagle</em></p>



<pre class="wp-block-code"><code>public class Rectangle implements Polygone {
public double Longueur;
public double largeur;
public Rectangle(double L,double l){
	this.Longueur=L;
	this.largeur=l;
}

	public double périmètre(){
		return 2*(this.Longueur+this.largeur);
	}
    public int nombreCotes(){
		return 4;
	}

	public void afficher(){
 System.out.println("La périmètre du rectangle est : "+ this.périmètre());
	}
	public static void main(String&#91;] args) {
	Polygone R1=new Rectangle(7,4);
	Rectangle R2=new Rectangle(9,3);
	R1.afficher();
	R2.afficher();
	}
}</code></pre>



<p><em>Class Triangle</em></p>



<pre class="wp-block-code"><code>public class Triangle implements Polygone{
	public double coté1;
	public double coté2;
	public double coté3;
	//création du constructeur
	public Triangle(double c1,double c2,double c3){
		this.coté1=c1;
		this.coté2=c2;
		this.coté3=c3;
	}
	
	public double périmètre(){
		return this.coté1+this.coté2+this.coté3;
	}
	public int nombreCotes(){
		return 3;
	}
	public void afficher(){
    System.out.println("La périmètre du triangle est : "+ this.périmètre());	
	}
	public static void main(String&#91;] args) {
	Polygone T1=new Triangle(2,3,5);
	Triangle T2=new Triangle(4,4,5);
	T1.afficher();
	T2.afficher();

	}

}</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Classes et méthodes Java</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/18/classes-et-methodes-java/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Sat, 18 Jun 2022 18:00:37 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[java]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=295</guid>

					<description><![CDATA[&#160;&#8211; Notion d&#8217;objets et de classes 1 &#8211; 1 Exemple d&#8217;une classe prédéfinie : classe String Le but de la&#160; programmation orienté objet est de facilité la programmation en créant des classes qui à travers auxquelles on crée un nouveau objet chaque fois qu’on a besoin à l’aide de ce qu’on appelle l’instanciation. Exemple Ici&#8230;]]></description>
										<content:encoded><![CDATA[
<h2>&nbsp;&#8211; Notion d&rsquo;objets et de classes</h2>



<h3>1 &#8211; 1 Exemple d&rsquo;une classe prédéfinie : classe String</h3>



<p>Le but de la&nbsp; programmation orienté objet est de facilité la programmation en créant des classes qui à travers auxquelles on crée un nouveau objet chaque fois qu’on a besoin à l’aide de ce qu’on appelle l’instanciation.</p>



<h4>Exemple</h4>



<pre class="wp-block-code"><code>String myString=new String(" salut ");  </code></pre>



<span id="more-295"></span>



<p>Ici on crée un objet du type chaine de caractère nommé&nbsp;<strong>myString</strong>&nbsp;à l’aide du modèle&nbsp;<strong>String</strong>&nbsp;la méthode par laquelle on a crée l’objet :<strong>&nbsp;Objet monObjet=new Objet</strong>&nbsp;est appelé&nbsp;<strong>l’instanciation</strong><br>Un objet est doté des propriétés et méthodes qui fournissent des informations sur l’objet.</p>



<p>Exemple :</p>



<pre class="wp-block-code"><code>myString.length() ; </code></pre>



<p>qui fournit ici&nbsp;<strong>la longueur (length en anglais )</strong>&nbsp;de la chaine de caractères&nbsp;<strong>myString= « salut »</strong>&nbsp;qui est égale ici à 5.<br>Pour créer une classe en Java on utilise la syntaxe :</p>



<pre class="wp-block-code"><code>classe nom_classe{
//code de la classe  ici
}</code></pre>



<h2>2 &#8211; Les classes et les objets Java</h2>



<h3>2 &#8211; 1 Déclaration d&rsquo;une classe Java</h3>



<p>Pour bien faciliter l&rsquo;apprentissage nous allons traiter un exemple simple d&rsquo;une classe permettant de générer des objets voitures ayant tous la même marque et le même prix :</p>



<p><strong>Exemple</strong></p>



<pre class="wp-block-code"><code>class voiture{
String marque ;
double prix ;
}</code></pre>



<h3>2 &#8211; 2 Constructeur&nbsp; sans paramètres ( constructeur par défaut )</h3>



<p>Afin de pouvoir créer des objets pour une classe Java, il faut associer à cette dernière&nbsp;&nbsp;une&nbsp;<strong>méthode (fonction)</strong>qui porte&nbsp;le même nom que la classe&nbsp;appelé&nbsp;&nbsp;<strong>constructeur</strong>&nbsp;:</p>



<pre class="wp-block-code"><code>voiture(){
}</code></pre>



<p>Nous pouvons aussi attribuer des valeurs aux variables&nbsp;marque&nbsp;et&nbsp;prix&nbsp;:</p>



<pre class="wp-block-code"><code>class voiture {
	String marque="Renault";
	double prix=20000;
voiture(){
}</code></pre>



<p>Et maintenant pour créer un objet voiture il suffit de faire&nbsp;l&rsquo;instanciation&nbsp;: par exemple si on veut créer un objet voiture nommé&nbsp;maVoiture&nbsp; on utilise le code :</p>



<pre class="wp-block-code"><code>voiture maVoiture = new  voiture();</code></pre>



<p>L&rsquo;objet&nbsp;maVoiture&nbsp;qu&rsquo;on vient de créer est une voiture de&nbsp;marque Renault&nbsp;et de&nbsp;prix 20000&nbsp;( Euro )</p>



<p>Et maintenant si on veut accéder à la marque de l&rsquo;objet&nbsp;maVoiture&nbsp;et de la récupérer sur une variable String on utilise le code :</p>



<pre class="wp-block-code"><code>String marque = maVoiture.marque ;</code></pre>



<p>Voici le code final de la&nbsp;classe&nbsp;voiture&nbsp;:</p>



<pre class="wp-block-code"><code>class voiture {
	String marque="Renault";
	double prix=20000;
    voiture(){
    }
	public static void main(String&#91;] args) {
		voiture maVoiture=new voiture();
		System.out.println("La marque de maVoiture est : "+ maVoiture.marque);
		System.out.println("Le prix de maVoiture est : "+ maVoiture.prix + " Euro");
	}
}</code></pre>



<p>Ce qui affiche à l&rsquo;exécution :</p>



<p><em><strong>La marque de maVoiture est : Renault</strong></em><br><em><strong>Le prix de maVoiture est : 20000.0 Euro</strong></em></p>



<h3>&nbsp;2 &#8211; 3 Constructeur avec paramètres</h3>



<p>On peut aussi donner la possibilité à l&rsquo;utilisateur de choisir lui même la marque et le prix de la voiture en ajoutant&nbsp; des&nbsp;paramètres&nbsp;au&nbsp;constructeur&nbsp;:</p>



<pre class="wp-block-code"><code>voiture ( String mq , double pr ) {
    	this.marque=mq ;
    	this.prix=pr ;
    }</code></pre>



<p>Et maintenant l&rsquo;utilisateur du modèle&nbsp;voiture&nbsp;est libre de choisir la&nbsp;marque&nbsp;qu&rsquo;il souhaite avec le&nbsp;prix&nbsp;qui qui lui convient au moment de l&rsquo;instanciation&nbsp;, par exemple s&rsquo;il souhaite créer une voiture de marque<strong>&nbsp;Peugeot</strong>&nbsp;et de&nbsp;<strong>prix 25000 Euro</strong>&nbsp;il n&rsquo;a qu&rsquo;à instancier avec ces paramètres :</p>



<pre class="wp-block-code"><code>voiture saVoiture=new voiture( "Peugeot" , 25000 ) ;</code></pre>



<p>Voici le code final de la classe :</p>



<pre class="wp-block-code"><code>class voiture {
	String marque;
	double prix;
    voiture(String mq,double pr){
    	this.marque=mq;
    	this.prix=pr;
    }
	public static void main(String&#91;] args) {
		voiture saVoiture=new voiture("Peugeot",25000);
		System.out.println("La marque de  saVoiture est : "+ saVoiture.marque);
		System.out.println("Le prix de saVoiture est : "+ saVoiture.prix + " Euro");
	}
}</code></pre>



<p>Ce qui affiche à l&rsquo;exécution :</p>



<p><em><strong>La marque de&nbsp; saVoiture est : Peugeot</strong></em><br><em><strong>Le prix de saVoiture est : 25000.0 Euro</strong></em></p>



<h2>3 &#8211; Modificateurs d&rsquo;accès</h2>



<p>Vous auriez sûrement déjà remarqué les mots&nbsp;<strong>public, protected et private</strong>&nbsp;au début des déclarations des méthodes de classe. Ces mots-clés sont appelés les&nbsp;<strong>modificateurs d&rsquo;accès</strong>&nbsp;dans la syntaxe du langage Java, et ils définissent la portée d&rsquo;un constituant de la classe.</p>



<h3>3 &#8211; 1 &#8211; Cas d&rsquo;une classe</h3>



<ul><li>Si une classe a une visibilité&nbsp;<strong>public</strong>&nbsp;(publique), la classe peut être appelée &nbsp;depuis n&rsquo;importe où dans le programme.</li><li>Si une classe possède une visibilité du package, la classe ne peut être appelée que dans le package où la classe est définie.</li><li>Si une classe a une visibilité&nbsp;<strong>private</strong>&nbsp;(privée) (elle ne peut se produire que si la classe est définie imbriquée dans une autre classe), la classe ne peut être consultée que dans la classe externe.</li></ul>



<h3>3 &#8211; 2 &#8211; Cas d&rsquo;un attribut</h3>



<ul><li>&nbsp;&nbsp;&nbsp;&nbsp;Si une variable est définie dans une&nbsp;<strong>classe publique</strong>&nbsp;et qu&rsquo;elle a une visibilité<strong>&nbsp;publique</strong>, la variable peut être appelée n&rsquo;importe où dans l&rsquo;application par la classe dans laquelle elle est définie.</li><li>Si une variable a une visibilité&nbsp;<strong>protected</strong>&nbsp;(protégée) , la variable ne peut être appelée que dans les&nbsp;<strong>sous-classes</strong>&nbsp;et dans le même paquet dans la classe dans laquelle elle est définie.</li><li>Si une variable a une visibilité du package , la variable ne peut être référencée que dans le même paquet dans la classe dans laquelle elle est définie.</li><li>Si une variable a une visibilité&nbsp;<strong>private</strong>&nbsp;(privée), la variable ne peut être accessible que dans la classe dans laquelle elle est définie.</li></ul>



<h3>3 &#8211; 3 &#8211; Cas d&rsquo;une méthode Java</h3>



<ul><li>&nbsp;&nbsp;&nbsp;&nbsp;Si une méthode est définie dans une&nbsp;<strong>classe publique</strong>&nbsp;et qu&rsquo;elle a une&nbsp;<strong>visibilité publique</strong>, la méthode peut être appelée n&rsquo;importe où dans l&rsquo;application à travers la classe dans laquelle elle est définie.</li><li>Si une méthode est déclarée&nbsp;<strong>protected</strong>&nbsp; elle a une visibilité protégé, la méthode peut être appelée uniquement dans les sous-classes et dans le même paquetage à travers la classe dans laquelle elle est définie.</li><li>Si une méthode est déclarée&nbsp;<strong>private</strong>&nbsp;elle a une visibilité privée, la méthode peut être appelée uniquement dans la classe dans laquelle elle est définie.</li></ul>



<h3>3 &#8211; 4 &#8211; Le modificateur abstract</h3>



<p>Le modificateur&nbsp;<strong>abstract</strong>&nbsp;est utilisé devant les classes&nbsp; Java pour définir les<strong>&nbsp;classes abstraites</strong>&nbsp;( les classes abstraite sont des classes non instanciables et par suite non exécutables directement, elle ne peuvent être utiliser qu&rsquo;en héritage )</p>



<h3>3 &#8211; 5 &#8211; Le modificateur Final</h3>



<ul><li>En Java le mot clé<strong>&nbsp;final</strong>&nbsp;s’il est ajouté devant un &nbsp;<strong>attribut</strong>, il le rend non modifiable, il prend toujours la valeur par laquelle il est initialisé.</li><li>Le mot clé<strong>&nbsp;final</strong>&nbsp;s’il est ajouté devant une<strong>&nbsp;méthode</strong>, il indique que cette dernière &nbsp;ne peut pas être modifiée pendant l’héritage. Les méthodes&nbsp;<strong>static</strong>&nbsp;et&nbsp;<strong>private</strong>&nbsp;sont considérées automatiquement&nbsp;<strong>&nbsp;final</strong>.</li><li>Le mot clé<strong>&nbsp;final&nbsp;</strong>s’il est ajouté devant une&nbsp;<strong>classe</strong>, il indique que cette dernière ne peut pas avoir de&nbsp;<strong>classes filles</strong>.</li></ul>



<h3>3 &#8211; 6 &#8211; &#8211; Le modificateur Static</h3>



<p>Pour un attribut ou une méthode &nbsp;Java, le modificateur&nbsp;<strong>static</strong>&nbsp;indique, que la méthode ou l&rsquo;attribut &nbsp; peut être appelé sans faire une &nbsp;instanciation sur &nbsp;sa classe.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Structures conditionnelles, boucles</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/18/structures-conditionnelles-boucles/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Sat, 18 Jun 2022 17:57:01 +0000</pubDate>
				<category><![CDATA[Java]]></category>
		<category><![CDATA[java]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=291</guid>

					<description><![CDATA[1 &#8211; Structure conditionnelle If&#160; &#38; If else, Java En Java, une instruction if est une instruction conditionnelle qui exécute un ensemble d&#8217;instructions selon une condition si elle est réalisée ou non.Syntaxe: Exemple Ce qui affiche : Vous êtes majeur si l&#8217;âge tapé est &#62;=18Vous êtes mineur si l&#8217;âge tapé est &#60; 18 Remarque :&#8230;]]></description>
										<content:encoded><![CDATA[
<h2>1 &#8211; Structure conditionnelle If&nbsp; &amp; If else, Java</h2>



<p>En Java, une instruction if est une instruction conditionnelle qui exécute un ensemble d&rsquo;instructions selon une condition si elle est réalisée ou non.<br>Syntaxe:</p>



<h3>Exemple</h3>



<span id="more-291"></span>



<pre class="wp-block-code"><code>import java.util.Scanner;
public class si {

	public static void main(String&#91;] args) {
		System.out.println("Veuillez saisir votre age !");
	Scanner age=new Scanner(System.in);
	int tonAge=age.nextInt();
	if ( tonAge &lt; 18 ) {
System.out.println("vous êtes mineur"+" Ton age est : "+tonAge);
	}
	else{
		System.out.println("vous êtes Majeur"+" Ton age est : "+tonAge);	
	}
	age.close();
}
}</code></pre>



<p>Ce qui affiche :</p>



<p>Vous êtes majeur si l&rsquo;âge tapé est &gt;=18<br>Vous êtes mineur si l&rsquo;âge tapé est &lt; 18</p>



<h3>Remarque :</h3>



<p>La commande&nbsp;<strong>else {</strong>&nbsp; n&rsquo;est pas obligatoire</p>



<h2>2 &#8211; Boucle For Java</h2>



<p>Il existe de nombreuses&nbsp; situations qui vous oblige à exécuter un bloc d&rsquo;instructions plusieurs fois dans vos applications.&nbsp;Les boucles peuvent exécuter un bloc de code un certain nombre de fois.&nbsp;La boucle&nbsp;<strong>for</strong>&nbsp;de Java vous sera&nbsp; utile dans ce cas<br>Syntaxe:</p>



<pre class="wp-block-code"><code> 
for (début compteur ;  termination;     incrémentation du compteur) {
   Bloc d'instructons
}</code></pre>



<h3>Exemple :</h3>



<pre class="wp-block-code"><code>for ( int i = 1 ; i&lt;=10 ; i++){
System.out.println("bonjour !");
}</code></pre>



<p>L&rsquo;exemple ci dessus affiche 10 fois le message&nbsp;&nbsp;<strong>bonjour !</strong></p>



<h2>3 &#8211; Boucle while Java</h2>



<p>La&nbsp; boucle&nbsp;<strong>while</strong>&nbsp;est une instruction&nbsp; de contrôle qui permet d&rsquo;exécuter le code à plusieurs reprises en fonction d&rsquo;une condition booléenne donnée, chaque fois que la condition est réalisée l&rsquo;instruction est exécutée.<br>Syntaxe:</p>



<pre class="wp-block-code"><code>while ( condition ) {

bloc d'instructions ...

}</code></pre>



<h3>Exemple</h3>



<pre class="wp-block-code"><code>int i = 1 ;
while ( i&lt;=10 ) {
System.out.println(" bonjour !");
i ++;
}</code></pre>



<p>L&rsquo;exemple ci dessus affiche 10 le message&nbsp;<strong>bonjour !</strong>&nbsp; et s&rsquo;arrête, puis qu&rsquo;à chaque affichage du message i est incrémenté de +1 et à la 10 ème fois il prends la valeur 10 + 1 = 11 et donc la condition i &lt;=10 n&rsquo;est plus réalisée ce qui entraine l&rsquo;arrêt de l&rsquo;instruction :</p>



<pre class="wp-block-code"><code>System.out.println(" bonjour !") ;</code></pre>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
