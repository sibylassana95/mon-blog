<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>PHP &#8211; SIBY INFORMATIQUE</title>
	<atom:link href="https://sibylassana95.github.io/mon-blog/category/php/feed/" rel="self" type="application/rss+xml" />
	<link>https://sibylassana95.github.io/mon-blog</link>
	<description>Astuce - Cours - Actualité</description>
	<lastBuildDate>Tue, 21 Jun 2022 03:03:08 +0000</lastBuildDate>
	<language>fr-FR</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.0</generator>
	<item>
		<title>Gestion des dossiers et des fichiers en php</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/18/gestion-des-dossiers-et-des-fichiers-en-php/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Sat, 18 Jun 2022 17:48:36 +0000</pubDate>
				<category><![CDATA[PHP]]></category>
		<category><![CDATA[echo]]></category>
		<category><![CDATA[eco]]></category>
		<category><![CDATA[pdo]]></category>
		<category><![CDATA[php]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=275</guid>

					<description><![CDATA[1 &#8211; Gestion des fichiers avec php Depuis sa version 4&#160;php&#160;offre à son utilisateur la possibilité de manipuler des objets : comme création, suppression, écriture dans des fichiers, modification des images &#8230; Les principales fonctions qui manipulent les fichiers en php sont : touch()&#160; La fonction touch permet de créer des fichiers sa syntaxe est&#8230;]]></description>
										<content:encoded><![CDATA[
<h2>1 &#8211; Gestion des fichiers avec php</h2>



<p>Depuis sa version 4&nbsp;<strong>php</strong>&nbsp;offre à son utilisateur la possibilité de manipuler des objets : comme création, suppression, écriture dans des fichiers, modification des images &#8230; Les principales fonctions qui manipulent les fichiers en php sont :</p>



<p><strong>touch()&nbsp;</strong></p>



<p>La fonction touch permet de créer des fichiers sa syntaxe est :</p>



<p><strong>Touch(&#8216;$nom_fichier&#8217;) ;&nbsp;</strong></p>



<p>où&nbsp;<strong>$nom_fichier</strong>&nbsp;désigne le nom du fichier à créer y compris le chemin.</p>



<h4>Exemple&nbsp;:</h4>



<span id="more-275"></span>



<pre class="wp-block-code"><code>&lt; ?php
touch('c: \ test.doc');
?&gt;</code></pre>



<p>C&#8217;est un exemple permet la création d&#8217;un document Word à la racine du disque dur C:\ &nbsp;&nbsp;nommé<strong>&nbsp;test.doc</strong></p>



<p><strong>Unlink()&nbsp;:&nbsp;</strong>La fonction unlink est utilisée en php pour supprimer un fichier qui existe déjà sa syntaxe est :&nbsp;&nbsp;<strong>unlink(&#8216;$nom_fichier&#8217;) ;</strong></p>



<h4>Exemple&nbsp;:</h4>



<pre class="wp-block-code"><code>&lt;?php

unlink('c:\test.doc');

?&gt;</code></pre>



<p>C&#8217;est un exemple qui permet la suppression du document Word&nbsp;<strong>test.doc</strong>&nbsp;que nous venons de créer à l’aide de l’exemple précédent.</p>



<p><strong>fopen()</strong></p>



<p>La fonction&nbsp;<strong>fopen</strong>&nbsp;permet l&#8217;ouverture des fichiers sa syntaxe est :</p>



<p><strong>$fichier = fopen(&#8216;$nom_fichier&#8217;, &#8216;mode de l&#8217;ouverture&#8217;) ;</strong></p>



<p><strong>Les mode d&#8217;ouverture sont :</strong><br>r : mode lecture seule<br>r+ : mode lecture et écriture<br>a : mode lecture seule et place le curseur à la fin du fichier<br>a+ : mode lecture et écriture et place le curseur à la fin du fichier<br>w : mode écriture seulement et la fonction crée le fichier s&#8217;il n&#8217;existe pas<br>w+ : mode lecture et écriture et la fonction crée le fichier s&#8217;il n&#8217;existe pas</p>



<p><strong>fputs()</strong><br>La fonction&nbsp;<strong>fputs</strong>&nbsp;permet d&#8217;écrire sur des fichiers sa syntaxe est :</p>



<p><strong>fputs($fichier,″le texte que vous sohaitez mettre sur le fichier ″) ;</strong></p>



<h4>Exemple :</h4>



<pre class="wp-block-code"><code>&lt;?php

$fp=fopen('c:\test.doc','a+');

fputs($fp,"voila que finalement j'arrive à écrire sur un fichier à l'aide de php");

?&gt;</code></pre>



<p><strong>rename()</strong></p>



<p>La fonction permet de renommer un fichier existant sa syntaxe est :</p>



<p><strong>rename($ancien,$nouveau);</strong></p>



<p><strong>copy()</strong></p>



<p>Cette function permet de copier un fichier. Sa syntaxe est :</p>



<p><strong>copy($source , $destination) ;</strong></p>



<p><strong>read()</strong></p>



<p>Cette fonction permet de lire un fichier existant</p>



<h4>Exemple&nbsp;:</h4>



<pre class="wp-block-code"><code>&lt;?php
    
readfile('c:\test.doc');
    
?&gt;</code></pre>



<p><strong>file_exists()<br></strong>&nbsp;&nbsp;&nbsp; Cette fonction permet de tester si le fichier existe ou non</p>



<h4>Exemple&nbsp;:</h4>



<pre class="wp-block-code"><code>&lt;?php
    if(file_exists('c:\test.doc'))
    echo"le fichier existe";
    else
    echo"le fichier n'existe pas";
    ?&gt;</code></pre>



<p><strong>file_type()</strong><br>Cette fonction détermine le type de fichier. Sa syntaxe est :</p>



<p><strong>file_type($fichier) ;</strong></p>



<p><strong>file_size( )</strong></p>



<p>Cette fonction renvoie la taille du fichier. Sa syntaxe est :</p>



<p><strong>&nbsp; file_size($fichier) ;</strong></p>



<p><strong>&nbsp;fgetc()<br></strong>&nbsp; Cette fonction permet de lire un fichier caractère par caractère</p>



<h4>Exemple&nbsp;:</h4>



<p>voici un exemple qui permet de lire le premier caractère d&#8217;un fichier nommé&nbsp;<strong>fichier.txt</strong></p>



<pre class="wp-block-code"><code>&lt;?php
   
$fp = fopen('fichier.txt', 'r'); //Ouvre le fichier en lecture seule.
     
$caract1 = fgetc($fp); //$caract1 prend comme valeur le premier caractère du fichier
     
$caract2 = fgetc($fp); //$caract2 prend comme valeur le 2ème caractère du fichier.
  
fclose($fp); 
   
?&gt;</code></pre>



<p><strong>feof()</strong></p>



<p>Cette fonction permet de savoir si la fin du fichier est atteint ou non, nous allons voir comment peut on utiliser cette fonction pour lire la totalité d&#8217;un fichier.</p>



<h4>Exemple&nbsp;:</h4>



<pre class="wp-block-code"><code>&lt;?php
    
$fp=fopen("fichier.txt","r");
    
$caract=' ';
    
while(!feof($fp)){
    
$caract .=fgetc($fp);
    
}
    
echo $caract;
    
fclose($fp);
    
?&gt;</code></pre>



<p>voici un exemple qui combine entre fgetc() et feof () pour lire un fichier totalement</p>



<p><strong>fgets()<br></strong>&nbsp;&nbsp;&nbsp; Cette fonction permet de lire un fichier ligne par ligne</p>



<h4>Exemple&nbsp;:</h4>



<p>Voici un exemple permetttant d&#8217;afficher la première ligne d&#8217;un fichier</p>



<pre class="wp-block-code"><code>&lt;?php
    
$fp=fopen("fichier.txt" , "r");
    
$ligne=fgets($fp);
    
echo $ligne;
    
fclose($fp);
    
?&gt;</code></pre>



<h4>Exemple&nbsp;:</h4>



<p>Voici un exemple qui combine entre feof() et fgets() pour lire un fichier en entier</p>



<pre class="wp-block-code"><code>&lt;?php
    
$fp=fopen("test.txt" , "r");
    
$contenu=' ';
    
while(!feof($fp)){
    
$contenu =fgets($fp);
    
echo $contenu;
    
echo'&lt;br&gt;';
    
}
    
fclose($fp);
    
?&gt; </code></pre>



<h2>2 &#8211; Gestion des dossiers avec php</h2>



<h3>2 &#8211; 1 &nbsp; Création d&#8217;un dossier avec php</h3>



<p>Pour créer un dossier on utilise l&#8217;instruction mkdir dont la sytaxe est la suivante :</p>



<p><strong>mkdir(&#8216;nom_du_dossier&#8217; , &#8216;droit d&#8217;acées&#8217;)</strong></p>



<h4>Exemple&nbsp;:</h4>



<p>Pour créer un dossier nommé&nbsp;<strong>new&nbsp;</strong>au sein du dossier www de wamp on utilise le code :</p>



<pre class="wp-block-code"><code>&lt;?php

mkdir('new');

?&gt;</code></pre>



<p>Puis on enregistre le fichier à la racine du serveur ( ie dans le dossier www/ ). On tape ensuite son adresse url.</p>



<h3>2 &#8211; 2&nbsp;&nbsp; Lecture du contenu d&#8217;un dossier avec php</h3>



<p>Pour lire le contenu d&#8217;un dossier on doit d&#8217;abord l&#8217;ouvrir avec l&#8217;instruction&nbsp;<strong>opendir( )</strong>&nbsp;et le lire ensuite avec l&#8217;instruction&nbsp;<strong>readdir( )</strong></p>



<h4>Exemple&nbsp;:</h4>



<p>Pour lire le contenu d&#8217;un dossier nvd qui se trouve à l&#8217;intérieur du dossier www on doit créer un fichier php à la racine du serveur on le nomme readdir.php par exemple et dont le code :</p>



<pre class="wp-block-code"><code>&lt;?php

$open=opendir('nvd');

while($res=readdir($open)){

echo"$res&lt;br /&gt;";

}

?&gt;</code></pre>



<h4>Exemple&nbsp;:</h4>



<div class="wp-container-2 wp-block-columns">
<div class="wp-container-1 wp-block-column" style="flex-basis:100%">
<p>Pour lire le contenu du dossier parent on utilise la commande <strong>$open=opendir(..)</strong>Par exemple si le fichier qui contient le code d&#8217;ouverture <strong>$open=opendir(..)</strong>se trouve à la racine du serveur wamp, le résultat retourné en tapant l&#8217;adresse url de ce fichier est :<em>.</em></p>
</div>
</div>



<p><em>Apache2</em></p>



<p><em>barimage.bmp</em></p>



<p><em>images_off.bmp</em></p>



<p><em>images_on.bmp</em></p>



<p><em>install_mysql_service.bat</em></p>



<p><em>install_services.bat</em></p>



<p><em>install_services_auto.bat</em></p>



<p><em>lang</em></p>



<p><em>launch_wampserver.bat</em></p>



<p><em>license.txt</em></p>



<p><em>logs</em></p>



<p><em>mysql</em></p>



<p><em>php</em></p>



<p><em>phpmyadmin</em></p>



<p><em>scripts</em></p>



<p><em>sqlitemanager</em></p>



<p><em>tmp</em></p>



<p><em>unins000.dat</em></p>



<p><em>unins000.exe</em></p>



<p><em>uninstall_services.bat</em></p>



<p><em>wamp5.chm</em></p>



<p><em>wampmanager.conf</em></p>



<p><em>wampmanager.exe</em></p>



<p><em>wampmanager.ini</em></p>



<p><em>wampmanager.tpl</em></p>



<p><em>wampserver.ico</em></p>



<p><em>www</em></p>



<h4>Suppression d&#8217;un répertoire</h4>



<p>Pour supprimer un répertoire on utilise l&#8217;instruction rmdir(&#8216; nom_du dossier &#8216; ).</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Upload des fichiers en php</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/18/upload-des-fichiers-en-php/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Sat, 18 Jun 2022 17:46:24 +0000</pubDate>
				<category><![CDATA[PHP]]></category>
		<category><![CDATA[echo]]></category>
		<category><![CDATA[eco]]></category>
		<category><![CDATA[pdo]]></category>
		<category><![CDATA[php]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=273</guid>

					<description><![CDATA[1 &#8211; Création du formulaire d&#8217;upload Le langage php nous offre la possibilité d&#8217;Uploader des fichiers sur un serveur par une méthode assez simple à réaliser. Nous allons créer cela en deux étapes : On peut réaliser ceux- ci grâce à la commande : Voici le code : &#160;&#160;&#160; On crée ensuite un dossier sur&#8230;]]></description>
										<content:encoded><![CDATA[
<h2>1 &#8211; Création du formulaire d&#8217;upload</h2>



<p>Le langage php nous offre la possibilité d&#8217;Uploader des fichiers sur un serveur par une méthode assez simple à réaliser. Nous allons créer cela en deux étapes :</p>



<p>On peut réaliser ceux- ci grâce à la commande :</p>



<span id="more-273"></span>



<pre class="wp-block-code"><code>&lt;input type = "file"&gt;</code></pre>



<p>Voici le code :</p>



<pre class="wp-block-code"><code>&lt;form method="POST" action="upload.php"  enctype="multipart / form-data"&gt; 
&lt;input type="file" name="fichier_choisi"&gt;
&lt;input type="submit" value="Envoyez"&gt; 
&lt;/form&gt;</code></pre>



<p>&nbsp;&nbsp;&nbsp; On crée ensuite un dossier sur le serveur qu&#8217;on va nommer upload par exemple, ensuite un sous dossier nommé upload_fichiers et c&#8217;est ce dossier qui va recevoir les fichiers uploadé, le formulaire ci-dessus sera enregistré dans une page web au sein du dossier uplod on va la nommer par exemple upload.html</p>



<h2>2 &#8211; création du fichier php de l&#8217;upload</h2>



<p>&nbsp;&nbsp;&nbsp; &#8211; On doit tout d&#8217;abord récupérer le fichier du formulaire à l&#8217;aide de la méthode :</p>



<p>&nbsp;<strong>$nomFichier = $_FILES[&#8220;fichier_choisi&#8221;][&#8220;name&#8221;]</strong></p>



<h4>Rzmarque&nbsp;:</h4>



<p>On a ajouté ici le code :&nbsp;<strong>[&#8220;name&#8221;]</strong>&nbsp;tout simplement pour utiliser le nom réel du fichier.</p>



<p>&nbsp;&nbsp;&nbsp; &#8211; On enregistre ensuite le fichier sur le serveur avec un nom temporaire grâce à la méthode :</p>



<p>&nbsp;<strong>$nomTemporaire = $_FILES[&#8220;fichier_choisi&#8221;][&#8220;tmp_name&#8221;] ;</strong></p>



<p>&nbsp;&nbsp;&nbsp; &#8211; On indique ensuite le chemin où va&nbsp; -t &#8211; on uploader les fichiers à l&#8217;aide de la méthode :</p>



<p>&nbsp;<strong>$chemin = &#8220;./upload_fichier/&#8221; ;</strong></p>



<p>&nbsp;&nbsp;&nbsp; &#8211; Finalement on crée une copie sur le dossier&nbsp;<strong>upload_fichiers</strong>&nbsp;à l&#8217;aide de la méthode :</p>



<p>&nbsp;<strong>copy($nomTemporaire, $chemin.$nomFichier)</strong></p>



<p>&nbsp;&nbsp;&nbsp; Voici donc le code final du fichier upload.php :</p>



<h2></h2>



<pre class="wp-block-code"><code>&lt;?php
$nomFichier = $_FILES&#91;"fichier_choisi"]&#91;"name"] ;
$nomTemporaire = $_FILES&#91;"fichier_choisi"]&#91;"tmp_name"] ;
$chemin = "./upload_fichier/" ;
if(copy($nomTemporaire, $chemin.$nomFichier)){
echo'Fichier envoyé correctement';    
}
else{
echo'Fichier non envoyé';    
}    
?&gt;</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Contrôle des formulaires en php</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/18/controle-des-formulaires-en-php/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Sat, 18 Jun 2022 17:45:51 +0000</pubDate>
				<category><![CDATA[PHP]]></category>
		<category><![CDATA[echo]]></category>
		<category><![CDATA[eco]]></category>
		<category><![CDATA[pdo]]></category>
		<category><![CDATA[php]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=271</guid>

					<description><![CDATA[1 &#8211;&#160;&#160;contrôle des données d&#8217;un formulaire simple &#160;&#160;&#160; Les valeurs saisies par un internaute en remplissant un formulaire du type POST, doivent être récupérées à l&#8217;aide d&#8217;un script php et doivent être traitées comme étant des variables php. La commande utilisée par php pour réaliser cela est : $_POST[&#8216; nom du champ&#8217;] où l&#8217;expression nom&#8230;]]></description>
										<content:encoded><![CDATA[
<h2>1 &#8211;&nbsp;&nbsp;<strong>contrôle des données d&#8217;un formulaire simple</strong></h2>



<p>&nbsp;&nbsp;&nbsp; Les valeurs saisies par un internaute en remplissant un formulaire du type POST, doivent être récupérées à l&#8217;aide d&#8217;un script php et doivent être traitées comme étant des variables php. La commande utilisée par php pour réaliser cela est : $_POST[&#8216; nom du champ&#8217;] où l&#8217;expression nom du champ désigne le nom du champ du formulaire remplit par l&#8217;internaute. La balise &lt;form&gt; du formulaire en question est de la forme :</p>



<span id="more-271"></span>



<pre class="wp-block-code"><code>&lt;/p&gt;
&lt;form method = "POST" action = "fichier.php"&gt;
&lt;/form&gt;
&lt;p&gt;</code></pre>



<p>&nbsp;&nbsp;&nbsp; où<strong>&nbsp;fichier.php</strong>&nbsp;est le nom du fichier php qui va traiter les données du formulaire</p>



<h3><strong>Exemple&nbsp;</strong>:</h3>



<p>Créeons un fichier html contenant une zone de texte( là où l&#8217;internaute doit saisir son nom) et un bouton envoyer . Vous pouvez donner un nom quelconque à ce fichier html.</p>



<pre class="wp-block-code"><code>&lt;form method = "POST" action = "test.php"&gt;
Introduisez votre nom &lt;input type = "text" name ="visiteur"&gt;
&lt;input type ="submit" value= "Envoyez"&gt;
&lt;/form&gt;</code></pre>



<p>Nous venons de créer la page html qui contient le formulaire d&#8217;envoi, nous allons maintenant créer le fichier php qui va récupérer la valeur saisi par l&#8217;internaute ( nom de l’internaute ). Le nom de ce dernier n&#8217;est pas n&#8217;importe, il doit suivre la commande</p>



<h3>action = &#8221; nom du fichier php&#8221;</h3>



<p>ici dans cet exemple le nom est&nbsp;<strong>test.php</strong>&nbsp;, son code est le suivant :</p>



<pre class="wp-block-code"><code>&lt;?php
    $nom = $_POST&#91;'visiteur'] ;
    echo&lt;code&gt;"&lt;/code&gt; bienvenue &lt;code&gt;"&lt;/code&gt;.$nom ;
    ?&gt;</code></pre>



<h3>Remarque :</h3>



<p>Les deux fichiers doivent être déposés dans le même répertoire si non vous devez indiquer le chemin du fichier php dans<strong>&nbsp;action =<code>"</code>fichier.php<code>"</code></strong></p>



<h2><strong>2 &#8211; Utilisation de la fonction mail( )</strong></h2>



<p>La fonction mail permet l&#8217;evoi d&#8217;un message sous forme d&#8217;un courriel à un destinataire. Sa syntaxe est la suivante :</p>



<h3>Mail(<code>"</code>adresse de messagerie du destinataire<code>"</code>,<code>"</code>sujet du message<code>"</code>,<code>"</code>le message<code>"</code>)&nbsp;;</h3>



<h3><strong>Exemple&nbsp;</strong>:</h3>



<p>Créons un formulaire d&#8217;envoie d&#8217;email à l&#8217;adresse : y_derf@yahoo.fr</p>



<pre class="wp-block-code"><code>&lt;/p&gt;
&lt;form method = "POST" action = "formmail.php" &gt;
Sujet &lt;input type = "text" name = "sujetmessage"&gt;
Message &lt;input type = "text" name = "message"&gt;
&lt;input type = "submit" value= "Envoyez"&gt;
&lt;/form&gt;
&lt;p&gt;</code></pre>



<p>Le fichier php qui va traiter le formulaire sera nommé :&nbsp;<strong>formmail.php</strong>&nbsp;son code est :</p>



<p><em>formmail.php</em></p>



<pre class="wp-block-code"><code>&lt;?php
$sujet = $_POST&#91;'sujetmessage '] ;
$message = $_POST&#91;' message'] ;
mail(&lt;code&gt;"&lt;/code&gt;y_derf@yahoo.fr &lt;code&gt;"&lt;/code&gt;,$sujet , message) ;
?&gt;</code></pre>



<p>On peut ajouter l&#8217;adresse email de l&#8217;internaute par la méthode :</p>



<h3>$to = $_POST[&#8216;adresse email de l&#8217;internaute&#8217;]<br>mail(″ adresse mail destinataire ″ , $sujet , $message , ″from :″.$to) ;</h3>



<p>et si on veut rediriger l&#8217;internaute vers une page de remerciement , on doit tout d&#8217;abord créer cette page lui donner un nom par exemple une page web contenant le message « Merci pour votre participation » nommons la merci.htm, il suffit maintenant d&#8217;ajouter la méthode suivante :</p>



<h3>header(″location : http://adresse/ url de la page merci.htm ″) ;</h3>



<h3>&nbsp;<strong>Code complet de l&#8217;exemple</strong></h3>



<p>&nbsp;&nbsp;&nbsp; Voici le code de la page web contenant le formulaire à remplir appelons la<strong>&nbsp;index.htm</strong>&nbsp;:</p>



<p><em>index.htm</em></p>



<pre class="wp-block-code"><code>&lt;html&gt;
&lt;head&gt;
&lt;title&gt;formulaire&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/p&gt;
&lt;form method="post" action="formmail.php"&gt;
votre email&lt;input type="text" name="mailpost"&gt;
sujet du message&lt;input type="text" name="sujet"&gt;
message&lt;input type="text" name="message"&gt;
&lt;input type="submit" value="envoyezé"&gt;
&lt;/form&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<p>Voici la page&nbsp;<strong>formmail.php</strong>&nbsp;qui va traiter la page formulaire :</p>



<p><em>formmail.php</em></p>



<pre class="wp-block-code"><code>&lt;?php
$to=$_POST&#91;'mailpost'];
$sujet=$_POST&#91;'sujet'];
$message=$_POST&#91;'message'];
mail("y_derf@yahoo.fr",$sujet,$message,"from:&lt;code&gt;"&lt;/code&gt;.$to);
header("Adresse url de la page merci.htm");
?&gt;</code></pre>



<p>Voici le code de la apge&nbsp;<strong>merci.htm</strong>&nbsp;:</p>



<p><em>merci.htm</em></p>



<pre class="wp-block-code"><code>&lt;html&gt;
&lt;head&gt;
&lt;title&gt;Merci pour votre participation&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;font size="6"&gt;Merci pour votre participation&lt;/font&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<h2><strong>3 &#8211; Envoi d&#8217;email en mode html</strong></h2>



<p>&nbsp;&nbsp;&nbsp; On peut envoyer l&#8217;email en mode html (mise en forme du texte : gras, italique, soulignement, couleur du texte,images &#8230;) , il suffit pour cela d&#8217;ajouter quelque lignes de code au script ci-dessus :</p>



<h3>$to .=&#8221;MIME-version:1.0 \n&#8221;;</h3>



<h3>$to .=&#8221;Content-type:text/html; charset=iso-8859-1\n&#8221;;</h3>



<p><strong>&nbsp;&nbsp;&nbsp; Code complet de l&#8217;exemple</strong></p>



<p>&nbsp;&nbsp;&nbsp; Voici le code de la page web contenant le formulaire à remplir :</p>



<p><em>index.htm</em></p>



<pre class="wp-block-code"><code>&lt;html&gt;
&lt;head&gt;
&lt;title&gt;formulaire&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;/p&gt;
&lt;form method="post" action="formmail.php" enctype="multipart/form-data"&gt;
votre email&lt;input type="text" name="mailpost"&gt;
sujet du message&lt;input type="text" name="sujet"&gt;
message&lt;input type="text" name="message"&gt;
&lt;input type="submit" value="Envoyez"&gt;
&lt;/form&gt;
&lt;p&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>



<p>Voici la page&nbsp;<strong>formmail.php</strong>&nbsp;qui va traiter la page formulaire :</p>



<pre class="wp-block-code"><code>&lt;?php $to=$_POST&#91;'mailpost']; $to .="MIME-version: 1.0\n"; $to .= "Content-type: text/html; charset= iso-8859-1\n"; $sujet=$_POST&#91;'sujet']; $message=$_POST&#91;'message']; if(mail("y_derf@yahoo.fr",$sujet,$message,"from:".$to)){ echo'message envoyé correctement'; } else{ echo'message non envoyé'; } ?&gt;</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Les tableaux en php</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/18/les-tableaux-en-php/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Sat, 18 Jun 2022 17:44:08 +0000</pubDate>
				<category><![CDATA[PHP]]></category>
		<category><![CDATA[echo]]></category>
		<category><![CDATA[eco]]></category>
		<category><![CDATA[pdo]]></category>
		<category><![CDATA[php]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=269</guid>

					<description><![CDATA[5.1 &#8211; Tableaux numérotés Un tableau est une sorte de variable qui permet de stocker ranger d&#8217;autres variables ou informations. Supposons que l&#8217;on souhaite regrouper deux variables $var1=&#8221;élève&#8221; et $var2=&#8221;professeur&#8221; $var3=&#8221;directeur&#8221;&#160; en une seule variable, on utilise pour cela la fonction&#160;array(): Exemple : Remarque&#160;: On peut définir directement le tableau par : $tab=array(&#8220;élève&#8221; , &#8220;professeur&#8221;&#8230;]]></description>
										<content:encoded><![CDATA[
<h2>5.1 &#8211; Tableaux numérotés</h2>



<p>Un tableau est une sorte de variable qui permet de stocker ranger d&#8217;autres variables ou informations. Supposons que l&#8217;on souhaite regrouper deux variables $var1=&#8221;élève&#8221; et $var2=&#8221;professeur&#8221; $var3=&#8221;directeur&#8221;&nbsp; en une seule variable, on utilise pour cela la fonction&nbsp;<strong>array():</strong></p>



<pre class="wp-block-code"><code>$tab  = array($var1,$var2,$var3);
$tab&#91;0]; // permetl'acces à $var1
$tab&#91;1]; // permet l'accesà$var2
$tab&#91;2];// permetl'accés à $var3</code></pre>



<span id="more-269"></span>



<h3>Exemple :</h3>



<pre class="wp-block-code"><code>$var1="élève";
$var2="prosesseur";
$var3="directeur";
$tab=array($var1,$var2,$var3);
    echo$tab&#91;0] ; // affiche élève
    echo$tab&#91;1];//affiche professeur
    echo$tab&#91;2] ; //affiche directeur</code></pre>



<h3><strong>Remarque&nbsp;:</strong></h3>



<p>On peut définir directement le tableau par :</p>



<p><strong>$tab=array(&#8220;élève&#8221; , &#8220;professeur&#8221; , &#8220;directeur&#8221; ) ;</strong></p>



<p>ou bien de la façon plus formelle :</p>



<pre class="wp-block-code"><code>$tab=array();
    $tab&#91;0]="élève" ;
    $tab&#91;1]="professeur" ;
    $tab&#91;2]="directeur" ;
    Ouencore:
    $toto = array(
    0 =&gt; "élève",
    1 =&gt; "professeur",
    2 =&gt; "directeur");</code></pre>



<h2>5.2 &#8211; Tableau associatif</h2>



<p>Jusqu&#8217;à présent on n&#8217;a définie que les tableaux numéroté du type:</p>



<p><strong>0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; élève</strong></p>



<p><strong>1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; professeur</strong></p>



<p><strong>2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; directeur</strong></p>



<p>Supposons que l&#8217;on souhaite maintenant représenter en php un tableau du type :</p>



<p><strong>nom&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Houssam</strong></p>



<p><strong>âge&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 25 ans</strong></p>



<p><strong>taille&nbsp;&nbsp;&nbsp;&nbsp; 1m 80</strong></p>



<p>&nbsp;&nbsp;&nbsp; Le problème ici est différent du cas précédent puisqu&#8217;il n&#8217;y aura aucun indice. Ce genre de tableau est dit associatif est peut être représenté en php de la manière suivante:</p>



<pre class="wp-block-code"><code>$tab=array(
  "nom"=&gt;"Houssam",
  "âge"=&gt;"25 ans" ,
  "taille"=&gt;"1 m80"
  );</code></pre>



<p>&nbsp;&nbsp;&nbsp; Pour accéder aux élément de ce tableau on utilise la sytaxe:</p>



<pre class="wp-block-code"><code>$tab&#91;"nom "] // affiche le nom Houssam
$tab&#91;"âge"] // affiche l'age qui est ici 25 ans
$tab&#91;"taille"] // affiche ici la taille : 1 m 80.</code></pre>



<h2>5.3 &#8211; parcourt d&#8217;un tableau</h2>



<h3>5.3.1 &#8211; Cas d&#8217;un tableau numéroté</h3>



<p>&nbsp;&nbsp;&nbsp; Pour parcourir un tableau numéroté du type :</p>



<p><strong>$tab=array(&#8220;élève&#8221; , &#8220;professeur&#8221; , &#8220;directeur&#8221; );</strong></p>



<p>on utilise la boucle&nbsp;:</p>



<p><strong>foreach( ){</strong></p>



<p><strong>…</strong></p>



<p><strong>}</strong></p>



<h3><strong>Exemple&nbsp;:</strong></h3>



<pre class="wp-block-code"><code>&lt;?php $tab=array("élève" , "professeur" , "directeur" ) ; foreach($tabas$valeur){ echo" $valeur "; } ?&gt;</code></pre>



<p><strong>&nbsp;&nbsp;&nbsp; Ce qui affiche :</strong></p>



<p>&nbsp;<strong>élève</strong></p>



<p><strong>&nbsp;&nbsp;&nbsp; professeur</strong></p>



<p><strong>&nbsp;&nbsp;&nbsp; directeur&nbsp;</strong></p>



<h3>5.3.2&nbsp; &#8211; Cas d&#8217;un tableau associatif</h3>



<p>La même boucle&nbsp;<strong>foreach</strong>&nbsp;est utilisé pour parcourir un tableau associatif avec une légère différence au niveau de la syntaxe. Prenons l&#8217;exemple du tableau :</p>



<p><strong>$tab=array( &#8220;nom&#8221;=&gt;&#8221;Houssam&#8221;, &#8220;âge&#8221;=&gt;&#8221;25 ans&#8221; , &#8220;taille&#8221;=&gt;&#8221;1 m80&#8221; ) ;</strong></p>



<p>On utilise la syntaxe suivante :</p>



<pre class="wp-block-code"><code>&lt;?php $tab=array( "nom"=&gt;"Houssam", "âge"=&gt;"25 ans" , "taille"=&gt;"1 m80" ) ;
    foreach( $tab as $element =&gt; $val ) {
    echo"$element est $val";
    }
?&gt;</code></pre>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Les structures de contrôle en php</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/18/les-structures-de-controle-en-php/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Sat, 18 Jun 2022 17:43:11 +0000</pubDate>
				<category><![CDATA[PHP]]></category>
		<category><![CDATA[echo]]></category>
		<category><![CDATA[eco]]></category>
		<category><![CDATA[pdo]]></category>
		<category><![CDATA[php]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=267</guid>

					<description><![CDATA[Les structures de controles &#160;1 &#8211; L&#8217;instruction if &#160;&#160;&#160; C&#8217;est une instruction permettant d&#8217;exécuter un nombre d&#8217;instruction lorsqu&#8217;une condition est réalisée. La syntaxe est la suivante : Exemple : 2 &#8211; Les boucles &#160;2.1 &#8211; La boucle for La syntaxe est la suivante : for( [initialisations] ; [test sortie] ; [faire a chaque fois] )&#8230;]]></description>
										<content:encoded><![CDATA[
<h1>Les structures de controles</h1>



<h2>&nbsp;1 &#8211; L&#8217;instruction if</h2>



<p>&nbsp;&nbsp;&nbsp; C&#8217;est une instruction permettant d&#8217;exécuter un nombre d&#8217;instruction lorsqu&#8217;une condition est réalisée. La syntaxe est la suivante :</p>



<pre class="wp-block-code"><code>f ( condition) {
    instructions
    }
    else {
    instructions
    }</code></pre>



<h3>Exemple :</h3>



<span id="more-267"></span>



<pre class="wp-block-code"><code>function test ( $x ) {
  if ( $x &lt;=0 ) { return ( 2 * $x ); } else { return ( 3 * $x) ; } } ?&gt;</code></pre>



<h2>2 &#8211; Les boucles</h2>



<h3>&nbsp;2.1 &#8211; La boucle for</h3>



<p>La syntaxe est la suivante :</p>



<p><strong>for( [initialisations] ; [test sortie] ; [faire a chaque fois] )</strong></p>



<h3><strong>Exemple</strong></h3>



<pre class="wp-block-code"><code>for ($i=0; $i&lt;5; $i++) { echo"ligne numéro ".$i." "; } ?&gt;</code></pre>



<h3><strong>Exemple</strong>&nbsp;:</h3>



<p>Voici un exemple permettant de construire la fonction factorielle :</p>



<pre class="wp-block-code"><code>function fact($n){
   $m=1;
   for($i=1;$i&lt;=$n;$i++){ $m=$m*$i; } return $m; } echo“factorielle de 5 est :”.fact(5); ?&gt;</code></pre>



<p><strong>Ce qui renvoie : factorielle de 5 est : 120</strong></p>



<h3>2.2 &#8211; La boucle foreach</h3>



<p>&nbsp;&nbsp;&nbsp; Illustrons cette boucle sur un exemple simple : considérons le tableau suivant :</p>



<p><strong>$tableau=$array(a,b,c,d,e);</strong></p>



<p>Nous pouvons parcourir ce tableau à l&#8217;aide de la fonction&nbsp;<strong>foreach()</strong>&nbsp;de la manière suivante:</p>



<p><strong>foreach($tableau , as $valeur)</strong></p>



<p>&nbsp;Cette méthode nous donne l&#8217;accès à toutes les valeurs du tableau : a, b, c, d, e. voici le code finale :</p>



<pre class="wp-block-code"><code>&lt;?php $array = array( a,b,c,d,e ); foreach( $array as $valeur ){ echo $valeur . ' '; } ?&gt;</code></pre>



<p>&nbsp;&nbsp;&nbsp; Ce qui affiche :</p>



<p>a</p>



<p>b</p>



<p>c</p>



<p>d</p>



<p>e</p>



<h3>2.3 &#8211; La boucle while</h3>



<p>&nbsp;&nbsp;&nbsp; La boucle while permet d&#8217;exécuter un certain nombre d&#8217;instructions tant qu&#8217;une condition est réalisée, la syntaxe est :</p>



<pre class="wp-block-code"><code>while(condition){
instructions
}</code></pre>



<h3><strong>Exemple&nbsp;: Divistion Euclidienne :</strong></h3>



<pre class="wp-block-code"><code>&lt;?php 
function diveuclide($a,$b){
 $m=1;
 while($b*$m&lt;$a){
     $m=$m+1;
    }
     return $m-1;
    }
    echo"la divistion euclidienne de 17 par 3 vaut :".diveuclide(17,3);
    ?&gt;</code></pre>



<p><strong>&nbsp;&nbsp;&nbsp;&nbsp;Ce&nbsp; qui&nbsp; renvoie&nbsp; la&nbsp; divistion&nbsp; euclidienne de&nbsp;&nbsp; 17&nbsp;&nbsp; par&nbsp;&nbsp; 3&nbsp;&nbsp; vaut&nbsp;&nbsp;&nbsp; 5</strong></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Variables -Fonctions php -Opérateurs arithmétiques</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/18/variables-fonctions-php-operateurs-arithmetiques/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Sat, 18 Jun 2022 17:42:25 +0000</pubDate>
				<category><![CDATA[PHP]]></category>
		<category><![CDATA[echo]]></category>
		<category><![CDATA[eco]]></category>
		<category><![CDATA[pdo]]></category>
		<category><![CDATA[php]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=265</guid>

					<description><![CDATA[3.1 &#8211; Variables php Exemples et définition Contrairement aux autres langages les variables en PHP ne se déclarent pas, si vous voulez utiliser une variable il suffit d&#8217;introduire son nom précédé du symbole dollar&#160;$&#160;, le premier caractère du nom de la variable doit être une lettre tandis que pour les autres elles peuvent être des&#8230;]]></description>
										<content:encoded><![CDATA[
<h2>3.1 &#8211; Variables php</h2>



<h3>Exemples et définition</h3>



<p>Contrairement aux autres langages les variables en PHP ne se déclarent pas, si vous voulez utiliser une variable il suffit d&#8217;introduire son nom précédé du symbole dollar&nbsp;<strong>$</strong>&nbsp;, le premier caractère du nom de la variable doit être une lettre tandis que pour les autres elles peuvent être des chiffres et même le caractère &#8220;_&#8221;</p>



<h3><strong>Exemple&nbsp;:</strong></h3>



<span id="more-265"></span>



<p><em>Somme de deux variables</em></p>



<pre class="wp-block-code"><code>&lt;?php
$x = 10;
$z = $x +$y;
$y = 20;
echo " $z "; // affiche la somme des deux variables qui est 30
?&gt;</code></pre>



<h3><strong>Remarque&nbsp;:</strong></h3>



<p>Entre les caractères &#8216; &#8230; &#8216; les variables ne sont pas interprétées tandis qu&#8217;entre les caractères &#8221; &#8230;&#8221; les variables sont interprétées</p>



<h3><strong>Exemple</strong>&nbsp;:</h3>



<p>Si on reprend l&#8217;exemple ci- dessus avec les caractères &#8216; &#8230; &#8216;</p>



<pre class="wp-block-code"><code>&lt;?php
$x = 10;
$y = 20;
$z = $x+ $y;
echo ' La valeur de z est $z ';
//affiche simplement La valeur de z est $z sans interpretation
?&gt;</code></pre>



<p>L&#8217;interpréteur n&#8217;affichera pas la valeur de la variable z qui est la somme de x et de y qui vaut 30 mais il affichera $z , il la considère comme étant une chaîne de caractères.</p>



<p>Mais en &nbsp;reprenant cette fois ci l&#8217;exemple ci- dessus avec les caractères ’’ &#8230;’’</p>



<p><em>interpretation des variables php</em></p>



<pre class="wp-block-code"><code>&lt;?php
$x = 10;
$y = 20;
$z = $x+ $y;
Echo ’’ La valeur de z est $z ’’;
//affiche La valeur de z est 30 il y a donc interpretation
?&gt;</code></pre>



<h3>Fonctions de test des variables</h3>



<p><strong>empty($var) renvoie vrai si la variable est vide</strong></p>



<p><strong>isset($var) renvoie vrai si la variable existe</strong></p>



<p><strong>unset($var) détruit une variable</strong></p>



<p><strong>gettype($var) retourne le type de la variable</strong></p>



<p><strong>settype($var,type) converti la variable</strong></p>



<h2>3.2 &#8211; Constantes php</h2>



<p>Les constantes sont une classe spéciale de variables dont la valeur est inchangeable. Les constantes sont définie à l&#8217;aide de la fonction define() avec la syntaxe suivante :</p>



<p>&nbsp;<strong>define(nom_de_variable ,valeur) ;</strong></p>



<h3><strong>Exemple&nbsp;:</strong></h3>



<p><em>constantes php</em></p>



<pre class="wp-block-code"><code>&lt;?php
define(monage,"30 ans");
echo 'mon age est '.monage; // affiche mon age est  30 ans
?&gt;</code></pre>



<h2>3.3 &#8211; Les fonctions php</h2>



<h3>Syntaxe et déclaration</h3>



<p>Contrairement aux variables les fonction PHP doivent être déclarées à l&#8217;avance. La syntaxe de déclaration est la suivante :</p>



<p><strong>function Nom_De_La_Fonction(argument1, argument2, &#8230;)</strong></p>



<p><strong>{ liste d&#8217;instructions }</strong></p>



<h3><strong>Exemple&nbsp;<img src="https://s.w.org/images/core/emoji/14.0.0/72x72/1f641.png" alt="🙁" class="wp-smiley" style="height: 1em; max-height: 1em;" /></strong>fonction qui calcule le double d’un nombre )</h3>



<pre class="wp-block-code"><code>&lt;?php
function double($x) {
return ( 2* $x );
}
echo'le double de 16 est '. double(16);
//affiche le double de 16 est 32
?&gt;</code></pre>



<p>La valeur retournée ici par cette fonction c&#8217;est&nbsp;<strong>le double de 16 qui est 32</strong></p>



<h3><strong>Exemple</strong>&nbsp;: (fonction de deux variables calculant le produit de deux nombres )</h3>



<p><em>fonction produit en php</em></p>



<pre class="wp-block-code"><code>&lt;?
fucntion deuxvar( $x , $y ) {
return ($x * $y ) ;
}
echo'Le produit de 5 et 7 vaut '.deuxvar ( 5 , 7) ;
//affiche le prduit de 5 et 7 vaut 35
?&gt;</code></pre>



<p>Ce dernier exemple renvoi le produit de deux nombres ici&nbsp;&nbsp;&nbsp;<strong>5 * 7&nbsp;&nbsp;&nbsp;&nbsp; qui est&nbsp;&nbsp; 35.</strong></p>



<h2>3.4 &#8211; Fonction chaine de caractères</h2>



<p><strong>Nous allons cité ici les fonctions chaine de caractères les &nbsp;plus connues :</strong></p>



<h3><strong>addslashes()</strong></h3>



<p>Ajoute des anti-slashes devant les caractères spéciaux</p>



<p><strong>$res = addslashes(&#8220;C&#8217;est l&#8217;arbre qu&#8217;il faut couper&#8221;);</strong></p>



<p><strong>Résultat : C\&#8217;est l\&#8217;arbre qu\&#8217;il faut couper (cette fonction est généralement utilisée pour éviter les problèmes des magic quotes)</strong></p>



<h3><strong>stripslashes()</strong></h3>



<p>Cette fonction réalise l&#8217;opération contraire à la précédente elle permet de supprimer les slashes d&#8217;une chaine de caractère.<strong></strong></p>



<h3><strong>ceil()</strong></h3>



<p><strong>Retourne le nombre entier supérieur par exemple 3.2&nbsp;$res = ceil(&#8220;3.2&#8221;);</strong></p>



<p><strong>Résultat</strong>&nbsp;: 4</p>



<h3><strong>chunk_split()</strong></h3>



<p>Permet de subdiviser une chaîne en plusieurs morceaux.<br><strong>$chaine = chunk_split(&#8220;bonjour Monsieur&#8221;,&#8221;3&#8243;,&#8221;-&#8220;);</strong></p>



<p><strong>Renvoie</strong>&nbsp;: bon-jou-r M-ons-ieu-r-</p>



<h3><strong>htmlentities()</strong></h3>



<p>Remplace les caractères par leur équivalent HTML (si ils existent).</p>



<p>$<strong>res = htmlentities(&#8220;le code d&#8217;un bouton est &lt;input type=button value=Envoyez&gt;&#8221;);</strong></p>



<p><strong>Renvoie</strong>&nbsp;:<br>Le code d&#8217;un bouton est &lt;input type=button value=Envoyez&gt;. Par contre si vous appliquez le code directement vous obtenez un bouton sur lequel est écrit Envoyez</p>



<h3><strong>strlen()</strong></h3>



<p>renvoie le nombre de caractère d&#8217;une chaine</p>



<h3><strong>strstr()</strong></h3>



<p>Recherche un caractère dans la chaîne et affiche le reste de la chaîne y compris le caractère recherché .</p>



<p><strong>$res = strstr(&#8220;webmaster@domain.com&#8221;, &#8220;r&#8221;);</strong></p>



<p><strong>Résultat</strong>&nbsp;:&nbsp; r@domain.com</p>



<h3><strong>Strtolower()</strong></h3>



<p>permet de convertir la chaine de caractère en minuscules</p>



<h3><strong>strtoupper()</strong></h3>



<p>permet de convertir la chaine de caractère en majuscules</p>



<h3><strong>substr($str,$i,$j)</strong></h3>



<p>retourne une sous chaine de $str de taille $j en débutant de la position $i</p>



<h3><strong>substr_replace()</strong></h3>



<p><strong>$res= substr_replace(&#8220;ouJDA&#8221;,&#8221;OU&#8221;,0,2);</strong></p>



<p>ce qui donne&nbsp;<strong>OUJDA.</strong></p>



<p>remplace un segment de la chaîne string par la chaîne replacement</p>



<h3><strong>str_replace()</strong></h3>



<p>remplace dans une chaine un caractère par un autre.</p>



<p>exemple&nbsp;:&nbsp;<strong>str_replace(&#8220;b&#8221;,&#8221;s&#8221;,&#8221;bon&#8221;);</strong><br>ce qui renvoi :&nbsp;<strong>sons</strong></p>



<h3><strong>ucfirst()</strong></h3>



<p>Met la première lettre de chaque chaîne en Majuscule.<br><strong>$res = ucfirst(&#8220;salut Monsieur&#8221;);</strong></p>



<p><strong>Résultat</strong>&nbsp;: Salut Monsieur.</p>



<h3><strong>ucwords()</strong></h3>



<p>Met la première lettre de chaque mot d&#8217;une chaîne en Majuscule.<br><strong>$res = ucwords(&#8220;bienvenue sur le site&#8221;);</strong></p>



<p><strong>Résultat</strong>&nbsp;: Bienvenue Sur Le Site</p>



<h3><strong>Exemple&nbsp;:&nbsp;</strong>(strlen())</h3>



<p><em>longueur d&#8217;une chaine de caractère en php</em></p>



<pre class="wp-block-code"><code>&lt;?php
$chaine="pompier";
$n=strlen($chaine);
echo"$n"; // affiche 7
?&gt;</code></pre>



<h3><strong>Exemple&nbsp;:&nbsp;</strong>(substr())</h3>



<pre class="wp-block-code"><code>&lt;?php
$chaine="pompier";
$n=substr($chaine,2,3);
echo"$n"; // affiche mpi
?&gt;</code></pre>



<h2>3b &#8211; Les opérateurs arithmétiques et logiques</h2>



<p>Comme tout langage le PHP fourni à son utilisateur des opérateurs afin de pouvoir effectuer des opérations arithmétiques et logiques.</p>



<h3><strong>3b.1 Opérateurs arithmétiques</strong></h3>



<p>&nbsp;&nbsp;&nbsp; + &nbsp; &nbsp; &nbsp;&nbsp; :&nbsp; Addition</p>



<p>&nbsp;&nbsp;&nbsp; &#8211; &nbsp; &nbsp; &nbsp;&nbsp; :&nbsp; soustraction</p>



<p>&nbsp;&nbsp;&nbsp; * &nbsp; &nbsp; &nbsp; :&nbsp; multiplication</p>



<p>&nbsp;&nbsp;&nbsp; / &nbsp; &nbsp; &nbsp;&nbsp; :&nbsp; Division</p>



<p>&nbsp;&nbsp;&nbsp; %&nbsp;&nbsp;&nbsp;&nbsp; :Modulo</p>



<h3><strong>3b.2&nbsp;Opérateurs logiques</strong></h3>



<p>&nbsp;&nbsp;&nbsp; !&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; :&nbsp; negation logique</p>



<p>&nbsp;&nbsp;&nbsp; and ou &amp;&amp;&nbsp; :&nbsp; conjonction logique</p>



<p>&nbsp;&nbsp;&nbsp; or&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; :&nbsp; disjonction logique</p>



<p>&nbsp;&nbsp;&nbsp; xor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :&nbsp; disjonction exclusive</p>



<h3><strong>3b.3&nbsp;Opérateurs de comparaison</strong></h3>



<p>&nbsp;&nbsp;&nbsp; &lt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :&nbsp; strictement inferieur</p>



<p>&nbsp;&nbsp;&nbsp; &gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :&nbsp; strictement superieur</p>



<p>&nbsp;&nbsp;&nbsp; &lt;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :&nbsp; inferieur ou égal</p>



<p>&nbsp;&nbsp;&nbsp; &gt;=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :&nbsp; superieur ou égal</p>



<p>&nbsp;&nbsp;&nbsp; ==&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :&nbsp; égal à</p>



<p>&nbsp;&nbsp;&nbsp; !=&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :&nbsp; différent</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Premier programme php</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/18/premier-programme-php/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Sat, 18 Jun 2022 17:40:18 +0000</pubDate>
				<category><![CDATA[PHP]]></category>
		<category><![CDATA[echo]]></category>
		<category><![CDATA[eco]]></category>
		<category><![CDATA[pdo]]></category>
		<category><![CDATA[php]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=263</guid>

					<description><![CDATA[1&#160; &#8211; Premier script php Pour créer notre &#160;premier programme php nous allons &#160;utiliser une fonction très populaire dans ce langage : la fonction&#160;echo(); Cette dernière &#160;permet d&#8217;afficher un texte, la valeur d&#8217;une constante ou d&#8217;une variable&#8230; Un code&#160;php&#160;commence par la balise &#160;&#60;?php&#160;et se termine par &#160;?&#62;&#160;ou simplement par le&#160;symbole&#160;&#60;?&#160;et se termine par&#160;?&#62;&#160;nous avons &#160;aussi&#8230;]]></description>
										<content:encoded><![CDATA[
<h2>1&nbsp; &#8211; Premier script php</h2>



<p>Pour créer notre &nbsp;premier programme php nous allons &nbsp;utiliser une fonction très populaire dans ce langage : la fonction&nbsp;<strong>echo();</strong></p>



<p>Cette dernière &nbsp;permet d&#8217;afficher un texte, la valeur d&#8217;une constante ou d&#8217;une variable&#8230;</p>



<p>Un code&nbsp;<strong>php</strong>&nbsp;commence par la balise &nbsp;<strong>&lt;?php</strong>&nbsp;et se termine par &nbsp;<strong>?&gt;</strong>&nbsp;ou simplement par le&nbsp;symbole&nbsp;<strong>&lt;?</strong>&nbsp;et se termine par&nbsp;<strong>?&gt;</strong>&nbsp;nous avons &nbsp;aussi la possibilité de procéder comme en Javascript et Vbscript en introduisant les balises :</p>



<span id="more-263"></span>



<pre class="wp-block-code"><code>&lt;script language ="php"&gt; ...
&lt;/script&gt;</code></pre>



<p><strong>Un code php est donc de la forme :</strong></p>



<p><em>premier script php</em></p>



<pre class="wp-block-code"><code>&lt;?php
   
Notre code php ici...
 
?&gt;</code></pre>



<p>Pour afficher un message de bien venue nous pouvons utiliser le code :</p>



<pre class="wp-block-code"><code>&lt;?php
   
echo "Bienvenue  ! " ;
 
?></code></pre>



<h2>2 &#8211; Visualisation de la page</h2>



<p>&nbsp;Pour visualiser notre&nbsp; page php nous allons suivre les étapes suivantes :</p>



<p>&nbsp;&#8230;</p>



<p><em><strong>1 &#8211; Lançons&nbsp; notre serveur local EasyPHP ou Wamp ou… et vérifions que nos serveurs Apache et MySql sont démarés ( Feu vert)</strong></em></p>



<p><em><strong>2 &#8211;&nbsp; Tapons&nbsp; le code ci-dessus dans le bloc note ou un éditeur PHP comme Context ou devphp</strong></em></p>



<p><em><strong>3 &#8211;&nbsp; Enregistrons le fichier sur le répertoire : C:\Program Files\EasyPHP1-8\www\&nbsp; dans le cas de EasyPHP ou sur C:\wamp\www\ dans le cas de wamp server,&nbsp; sous le nom de test.php</strong></em></p>



<p><em><strong>4 &#8211; Tapons finalement dans notre navigateur l&#8217;adresse URL&nbsp; http://localhost/test.php</strong></em></p>



<p>Voici ce que nous devons obtenir :<br></p>



<h2 class="has-text-align-center">Bienvenue  !</h2>



<h2>3 &#8211; Commentaires</h2>



<p>&nbsp; &nbsp; &#8211; Pour insérer un commentaire sur une seule ligne introduisez<strong>&nbsp;la double slash //</strong>&nbsp;tout ce qui se trouve après // ne sera pas interprété par le serveur.</p>



<p>&nbsp; &nbsp; &#8211; Pour insérer un commentaire sur plusieurs lignes, il suffit d&#8217;introduire les délimiteurs :</p>



<p><strong>&nbsp;/* &#8230; */&nbsp;</strong>tout ce qui se trouve entre deux délimiteurs ne sera pas interprété par le serveur, vous pouvez utiliser tant de lignes que vous souhaitez.</p>



<h3><strong>Exemple :</strong></h3>



<p><strong>//&nbsp;</strong>Ceux &#8211; ci est un commentaire sur une seule ligne</p>



<p><strong>&nbsp;/*&nbsp;</strong>Par contre</p>



<p>ceux &#8211; ci est un commentaire</p>



<p>Sur plusieurs lignes<strong>&nbsp;*/</strong></p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Introduction au langage PHP</title>
		<link>https://sibylassana95.github.io/mon-blog/2022/06/18/introduction-au-langage-php/</link>
		
		<dc:creator><![CDATA[sibylassana95]]></dc:creator>
		<pubDate>Sat, 18 Jun 2022 17:37:10 +0000</pubDate>
				<category><![CDATA[PHP]]></category>
		<category><![CDATA[echo]]></category>
		<category><![CDATA[eco]]></category>
		<category><![CDATA[pdo]]></category>
		<category><![CDATA[php]]></category>
		<guid isPermaLink="false">https://sibylassana95.github.io/mon-blog/?p=261</guid>

					<description><![CDATA[Introduction Contrairement aux langages HTML, Vbscript ou Javascript qui s&#8217;exécutent du coté client, le langage PHP( Personal Home Page) est interprété et exécuté du coté Serveur, c&#8217;est à dire quand un poste client envoi une requête à un Seveur exécutant du code PHP, ce dernier compile la page ( interprète) en HTML avant de l&#8217;envoyer&#8230;]]></description>
										<content:encoded><![CDATA[
<h2>Introduction</h2>



<p>Contrairement aux langages HTML, Vbscript ou Javascript qui s&#8217;exécutent du coté client, le langage PHP( Personal Home Page) est interprété et exécuté du coté Serveur, c&#8217;est à dire quand un poste client envoi une requête à un Seveur exécutant du code PHP, ce dernier compile la page ( interprète) en HTML avant de l&#8217;envoyer au poste client. On peut donc dire qu&#8217;un poste client ne reçoit jamais du code PHP et par suite n&#8217;exécutera jamais du code PHP. Pour exécuter du code PHP dans votre machine locale, certaines configurations sont exigées, procédez comme suit :</p>



<span id="more-261"></span>



<h2>&nbsp;Installation sous windows</h2>



<p><strong><em>&#8211; Installer le logiciel Apache</em></strong><br><strong><em>&#8211; Installez PHP</em></strong><br><strong><em>&#8211; Vous pouvez choisir la méthode la plus simple :&nbsp;</em></strong>&nbsp;c&#8217;est l&#8217;installation de EasyPHP ou WAMP5 ( elle contient Apache, PHP et MySql en même temp). Vous aurez besoin d&#8217;un éditeur de texte pour éditer le code PHP par exemple bloc-notes. Quand à moi je vous recommande vivement le serveur Wamp.</p>



<p><a href="http://www.wampserver.com/" target="_blank" rel="noreferrer noopener"><strong>Télécharger le seveur Wamp</strong></a></p>


<div class="wp-block-image">
<figure class="aligncenter"><a href="http://www.wampserver.com/" target="_blank" rel="noreferrer noopener"><img src="https://www.tresfacile.net/images/php/wamp.jpg" alt=""/></a></figure></div>


<p>Choisissez la version qui correspond à votre système&nbsp;<strong>32 bits</strong>&nbsp;ou<strong>&nbsp;64 bits.&nbsp;</strong>Après avoir télécharger le serveur wamp, procédez à l&#8217;installation&nbsp;<em>&nbsp;( l&#8217;installation est très simple et très automatisée et donc elle nécessite pas à être développée ici )</em></p>



<p>Mais comment démarrer votre serveur wamp ? le problème est si simple que vous ne le croyez ! Il suffit de le lancer via le menu&nbsp;<strong>Démarrer&nbsp; -&gt; WampServer</strong></p>


<div class="wp-block-image">
<figure class="aligncenter"><img src="https://www.tresfacile.net/images/php/langage-mysql0.png" alt=""/></figure></div>


<p>Mais est ce que votre serveur fonctionne -t- il vraiment ? Pour le tester il suffit de jeter un coup d’œil en bas à droite sur la barre des tâches pour voir son icône :</p>


<div class="wp-block-image">
<figure class="aligncenter"><img src="https://www.tresfacile.net/images/php/langage-mysql1.png" alt=""/></figure></div>


<p><strong><em>&#8211; Si l&#8217;icône est verte&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; :&nbsp;</em></strong><em>le serveur fonctionne correctement</em></p>



<p><strong><em>&#8211; Si l&#8217;icône est rouge ou orange&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :</em></strong><em>&nbsp;le serveur ne fonctionne pas</em>&nbsp;&nbsp;<em>!</em></p>



<p>Après avoir vérifier que le serveur fonctionne correctement vous vous demander peut être comment y accéder ? Il suffit de lancer le navigateur et tapez l&#8217;adresse url :&nbsp;<strong>http://localhost/</strong>&nbsp;ou bien&nbsp;<strong>http://127.0.0.1/</strong></p>



<p>Si votre serveur wamp fonctionne correctement vous devez obtenir sa page de démarrage :</p>


<div class="wp-block-image">
<figure class="aligncenter"><img src="https://www.tresfacile.net/images/php/demarrage-wamp.png" alt=""/></figure></div>


<h3><strong>Remarque</strong></h3>



<p>d&#8217;autres configurations sont possibles, par exemple à la place du logiciel Apache vous pouvez installer IIS.</p>



<p><strong>NB</strong>&nbsp;Chaque fichier PHP crée doit être enregistrer dans le cas du serveur wamp dans le répertoire<strong>&nbsp; :</strong></p>



<p><strong>C:\wamp\www\</strong></p>



<p>et doit être appelé localement par votre navigateur en tapant l&#8217;adresse URL suivante :</p>



<p><strong>http://localhost/votre fichier.php</strong></p>



<h3><strong>Exemple</strong></h3>



<p>Si votre fichier est nommé test, pour l&#8217;exécuter tappez dans votre navigateur l&#8217;adresse URL :</p>



<p><em><strong>http://localhost/test.php</strong></em></p>



<h2>Installation sous Linux</h2>



<p>Nous traitons ici le cas d&#8217;UBUNTU pour les autres distribution l&#8217;installation sera plus ou moins similaire.<br>Sous linux le serveur apache, le langage php et le serveur mysql sont disponible sous forme de package nommé&nbsp;<strong>lamp</strong>&nbsp;( qui veut dire Linux, Apache, MySql et PHP ). pour installer le package&nbsp;<strong>lamp-server</strong>&nbsp;on se loge en mode&nbsp;<strong>root</strong>&nbsp;à l&#8217;aide de la commande&nbsp;<strong>sudo -i</strong>&nbsp;sur un terminal shell et puis on tape :</p>



<h3><strong>sudo apt-get install lamp-server^</strong></h3>



<p><strong><br></strong>sans oublier le &#8221; ^&#8221; &nbsp;à la fin de la commande.</p>



<h3><strong>Remarque</strong></h3>



<p>Le langage PHP offre au phpeur toute la puissance : possibilité d&#8217;ouvrir, d&#8217;écrire sur des fichier et même de créer des fichiers aux différents formats&nbsp;<strong>txt pdf doc &#8230;</strong>grâce à la commande&nbsp;:</p>



<h3><strong>touch($nom de fichier)&nbsp;;</strong></h3>



<p>comme le PHP permet la création des fichiers il permet aussi la suppression des fichiers à l&#8217;aide de la commande</p>



<h3><strong>unlink(($nom de fichier)&nbsp;;</strong></h3>



<p>Pour bien apprécier la puissance du PHP, essayez de répondre à la question suivante :<br>peut -on- modifier un fichier à l&#8217;aide d&#8217;un langage qui fonctionne du coté client comme&nbsp;<strong>vbscript ou javascript ?</strong>&nbsp;la réponse marque bien la puissance du PHP.</p>



<h2>Les fichiers de configurations</h2>



<p>Nous traitons seulement le cas de windows, le cas de linux dépendra de votre distribution.<br>Démarrez votre serveur wamp et puis cliquez sur son icone sur la barre des taches, pointez ensuite sur config files :</p>


<div class="wp-block-image">
<figure class="aligncenter"><a href="http://3.bp.blogspot.com/-coh8qcSF7mA/UWmlDuQ79OI/AAAAAAAAABg/WeJ2f76PChc/s1600/fichiers-de-configuration-de-wamp.png"><img src="https://www.tresfacile.net/images/php/_d_improd_/configuration-php-ini_f_improf_274x320.png" alt="configuration php fichier php.ini" title="configuration-php-ini.png"/></a></figure></div>


<p>&nbsp; &nbsp; Comme vous le voyez sur l&#8217;image ci dessus il y a trois fichiers de configurations :</p>



<p>&nbsp; &nbsp; &#8211; httpd.conf : qui contient les paramètres de configuration du serveur apache</p>



<p>&nbsp; &nbsp; -php.ini &nbsp; &nbsp; &nbsp; : qui contient les paramètres de configuration du langage php</p>



<p>&nbsp; &nbsp; -my.ini &nbsp; &nbsp; &nbsp; &nbsp;: qui contient les paramètres de configuration du serveur de base de données mysql</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
